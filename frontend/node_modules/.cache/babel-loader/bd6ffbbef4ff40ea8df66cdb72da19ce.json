{"ast":null,"code":"import _slicedToArray from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _defineProperty from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _toConsumableArray from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * Callback for setting the board state\r\n *\r\n * @callback setBoardState\r\n * @param {Object} board An dictionary representing the current board state\r\n */ /**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {setBoardState} setBoardState sets a new state of the board\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */export function MovePiece(toX,toY,setBoardState,setTakenPieces,draggedPiece,boardState){console.log(\"move\");var square=GetPieceAtSquare(toX,toY,boardState);// check if piece on square\n// Ensure piece on square is not owned and is alive before taking\nif(square!=null&&!square.isOwner&&square.state.isAlive){// Remove piece from board\ndelete boardState[square.piece];// Track what pieces are taken so that they can be rendered under player name\nvar pieceNameSplit=square.piece.split(\"_\");var piecePathName=pieceNameSplit[0]+\"_\"+pieceNameSplit[1];var pieceImgPath=require(\"../assets/images/pieces/\"+piecePathName+\".png\");var colour;if(pieceNameSplit[1]===\"w\")colour=\"white\";else colour=\"black\";// Sort the array of pieces so that matching pieces appear next to eachother\nsetTakenPieces(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},colour,[].concat(_toConsumableArray(prevState[colour]),[pieceImgPath]).sort()));});}var king=boardState[\"king_w\"].isOwner?\"king_w\":\"king_b\";// Gets the castle if castling\nvar castleToMove=CheckIfCanCastle(toX,toY,draggedPiece,boardState);if(castleToMove!==null){var newCastleCol=castleToMove.state.col===7?5:3;var newKingCol=newCastleCol===5?6:2;// Moves the king and castle when castling\nsetBoardState(function(prevState){var _objectSpread3;return _objectSpread(_objectSpread({},prevState),{},(_objectSpread3={},_defineProperty(_objectSpread3,castleToMove.castleName,_objectSpread(_objectSpread({},boardState[castleToMove.castleName]),{},{col:newCastleCol,hasMoved:true})),_defineProperty(_objectSpread3,king,_objectSpread(_objectSpread({},boardState[king]),{},{col:newKingCol,hasMoved:true})),_objectSpread3));});}else{// Update state of the moved piece\nif(draggedPiece.pieceName.split(\"_\")[0]===\"king\"){setBoardState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},draggedPiece.pieceName,_objectSpread(_objectSpread({},boardState[draggedPiece.pieceName]),{},{row:toY,col:toX,hasMoved:true})));});}else{// Moving a piece will always take king out of check\nsetBoardState(function(prevState){var _objectSpread5;return _objectSpread(_objectSpread({},prevState),{},(_objectSpread5={},_defineProperty(_objectSpread5,draggedPiece.pieceName,_objectSpread(_objectSpread({},boardState[draggedPiece.pieceName]),{},{row:toY,col:toX,hasMoved:true})),_defineProperty(_objectSpread5,king,_objectSpread(_objectSpread({},boardState[king]),{},{inCheck:false})),_objectSpread5));});}}}/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */export function CanMovePiece(toX,toY,draggedPiece,boardState){var square=GetPieceAtSquare(toX,toY,boardState);// if a friendly piece is in a square, don't allow this piece to be moved there\nif(square&&square.state.isOwner&&square.state.isAlive)return false;// calculate the difference between the new square and the piece being dragged\nvar dx=Math.abs(toX-draggedPiece.pieceState.col);var dy=Math.abs(toY-draggedPiece.pieceState.row);var pieceName=draggedPiece.pieceName.split(\"_\")[0];// Check the row and column of the piece to see if the movement should be blocked\n// by another piece\nvar straightCollision=CheckStraightCollisions(toX,toY,boardState,draggedPiece);// Check the diagonal of the piece to see if the movement should be blocked\n// by another piece\nvar diagCollision=CheckDiagCollisions(toX,toY,boardState,draggedPiece);// Checks if the move will block the piece attacking the king\nvar pieceCheckingKing=CheckIfPieceIsProtectingKing(toX,toY,boardState,draggedPiece.pieceName);// Get the players king\nvar king=boardState[\"king_w\"].isOwner?boardState[\"king_w\"]:boardState[\"king_b\"];var piecePuttingKingInCheck,cantMoveToProtectKing;if(king.inCheck){// Gets the piece that is putting the king in check\npiecePuttingKingInCheck=CheckIfMoveUnderAttack(king.col,king.row,boardState);var pieceAttackingKingNotAtSquare=square!==null&&square.piece!==piecePuttingKingInCheck;// Move must protect king if king is in check\ncantMoveToProtectKing=king.inCheck&&(pieceCheckingKing===null&&pieceAttackingKingNotAtSquare||pieceCheckingKing===null&&square===null);}var isProtectingKing;if(pieceName!==\"king\"){// Check if the piece is defending the king\n// Get the piece that is attacking the king if true\nvar pieceAttackingKing=CheckIfPieceIsProtectingKing(draggedPiece.pieceState.col,draggedPiece.pieceState.row,boardState,draggedPiece.pieceName);// Check if the piece is currently under attack\nvar isPieceUnderAttack=CheckIfMoveUnderAttack(draggedPiece.pieceState.col,draggedPiece.pieceState.row,boardState)!==null;isProtectingKing=pieceAttackingKing!==null&&isPieceUnderAttack;}var cantMoveWhilstProtecting=function cantMoveWhilstProtecting(){// Dont allow the pawn to move if its protecting king unless it can take the piece\n// and ensure that the piece is alive before taking\nif(isProtectingKing&&(square&&pieceCheckingKing!==square.piece||square===null||square&&!square.state.isAlive))return true;return false;};switch(pieceName){case\"king\":var moveUnderAttack=CheckIfMoveUnderAttack(toX,toY,boardState,draggedPiece.pieceName);var moveNotInCheck=moveUnderAttack===null||square&&square.piece===moveUnderAttack;var canCastle=CheckIfCanCastle(toX,toY,draggedPiece,boardState);return((dx===1||dx===0)&&(dy===1||dy===0)||canCastle&&dx===2&&dy===0)&&moveNotInCheck;case\"castle\":if(cantMoveWhilstProtecting())return;if(cantMoveToProtectKing)return;return(dx===0&&dy>0||dx>0&&dy===0)&&!straightCollision.collision;case\"knight\":if(cantMoveWhilstProtecting())return;if(cantMoveToProtectKing)return;return dx===2&&dy===1||dx===1&&dy===2;case\"bishop\":if(cantMoveWhilstProtecting())return;if(cantMoveToProtectKing)return;return!(dx===0&&dy>0)&&!(dx>0&&dy===0)&&(dx===dy||dx===dy)&&!diagCollision.collision;case\"queen\":if(cantMoveWhilstProtecting())return;if(cantMoveToProtectKing)return;return(dx===0&&dy>0||dx>0&&dy===0)&&!straightCollision.collision||(dx===dy||dx===dy)&&!diagCollision.collision;case\"pawn\":if(cantMoveWhilstProtecting())return;if(cantMoveToProtectKing)return;// Recalculate dx/dy with direction\ndx=toX-draggedPiece.pieceState.col;dy=toY-draggedPiece.pieceState.row;// Allow pawn to move 2 squares on first move\nif(!draggedPiece.pieceState.hasMoved){// Negative direction moves up the board (player always at bottom)\nif(dx===0&&(dy===-1||dy===-2)&&!straightCollision.collision){return square===null;}}// Allow pawn to take opponents pieces diagonal by 1 square\nif((dx===1||dx===-1)&&dy===-1&&square!==null)return true;// Allow pawn to move forward by 1 square\nreturn dx===0&&dy===-1&&square===null;default:return false;}}/**\r\n * Checks if the current square is empty\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @returns piece name and state if square is not empty, null otherwise\r\n */function GetPieceAtSquare(x,y,boardState){for(var _i=0,_Object$entries=Object.entries(boardState);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),piece=_Object$entries$_i[0],state=_Object$entries$_i[1];if(x===state.col&&y===state.row){return{piece:piece,state:state};}}return null;}/**\r\n * Checks if there is a piece in the diagonal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} draggedPiece contains data about the currently dragged piece\r\n * @param {boolean} checkForOpponentPiece if true, the check will be on behalf of the opponent\r\n * @returns piece and false if an opponents piece is inbetween the square and the currently dragged piece, piece and true otherwise\r\n */function CheckDiagCollisions(x,y,boardState,draggedPiece){var checkForOpponentPiece=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;// Get row and col of dragged piece\nvar row=draggedPiece.pieceState.row;var col=draggedPiece.pieceState.col;var dirX=Math.sign(x-col);var dirY=Math.sign(y-row);for(var i=0;i<Math.abs(x-col)+1;i++){for(var _i2=0,_Object$entries2=Object.entries(boardState);_i2<_Object$entries2.length;_i2++){var _Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),piece=_Object$entries2$_i[0],state=_Object$entries2$_i[1];// Dont include collisions with self\nif(piece!==draggedPiece.pieceName){var owner=checkForOpponentPiece?!state.isOwner:state.isOwner;if(col+i*dirX===state.col&&row+i*dirY===state.row&&state.isAlive&&(i===0&&!owner||i!==0)){if(i!==Math.abs(x-col)){// Stops opponents pieces from being taken when hidden behind each other\nreturn{piece:piece,collision:true};}return{piece:piece,collision:owner};}}}}return{piece:null,collision:false};}/**\r\n * Checks if there is a piece in the vertical and horizontal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} draggedPiece contains data about the currently dragged piece\r\n * @param {boolean} checkForOpponentPiece if true, the check will be on behalf of the opponent\r\n * @returns true and the piece name if an opponents piece is inbetween the square and the currently dragged piece, false and null otherwise\r\n */function CheckStraightCollisions(x,y,boardState,draggedPiece){var checkForOpponentPiece=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;// Get row and col of dragged piece\nvar row=draggedPiece.pieceState.row;var col=draggedPiece.pieceState.col;// Get change in x and y between dragged piece and square\nvar dx=Math.abs(x-col);var dy=Math.abs(y-row);// Ignore diagonal moves\nif(dx>0&&dy>0)return true;// get direction of move\nvar dirX=Math.sign(x-col);var dirY=Math.sign(y-row);for(var i=1;i<Math.max(dx,dy)+1;i++){for(var _i3=0,_Object$entries3=Object.entries(boardState);_i3<_Object$entries3.length;_i3++){var _Object$entries3$_i=_slicedToArray(_Object$entries3[_i3],2),piece=_Object$entries3$_i[0],state=_Object$entries3$_i[1];// Dont include collisions with self\nif(piece!==draggedPiece.pieceName){if(state.isAlive){// Move is horizontal if dy = 0, otherwise vertical\nif(dy===0){if(col+i*dirX===state.col&&row===state.row){if(i!==Math.abs(x-col)){// Stops opponents pieces from being taken when hidden behind each other\nreturn{piece:piece,collision:true};}return{piece:piece,collision:checkForOpponentPiece?!state.isOwner:state.isOwner};}}else{if(row+i*dirY===state.row&&col===state.col){if(i!==Math.abs(y-row)){// Stops opponents pieces from being taken when hidden behind each other\nreturn{piece:piece,collision:true};}return{piece:piece,collision:checkForOpponentPiece?!state.isOwner:state.isOwner};}}}}}}return{piece:null,collision:false};}/**\r\n * Checks if a piece at (x,y) on the board is under attack by an opponents piece\r\n * @param {*} x x coordinate of the square currently being checked\r\n * @param {*} y y coordinate of the square currently being checked\r\n * @param {*} boardState current state of the board\r\n * @returns piece name if the piece is under attack, null otherwise\r\n */function CheckIfMoveUnderAttack(x,y,boardState){var pieceToMove=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;for(var _i4=0,_Object$entries4=Object.entries(boardState);_i4<_Object$entries4.length;_i4++){var _Object$entries4$_i=_slicedToArray(_Object$entries4[_i4],2),piece=_Object$entries4$_i[0],state=_Object$entries4$_i[1];// King cannot be checked by its own pieces\nif(!state.isOwner){var dx=Math.abs(x-state.col);var dy=Math.abs(y-state.row);// Check if the square is under attack from an opponents piece via straight line\nvar straightCollisions=CheckStraightCollisions(state.col,state.row,boardState,{pieceName:pieceToMove,pieceState:{col:x,row:y}});if(straightCollisions.piece&&!straightCollisions.collision){var pieceName=straightCollisions.piece.split(\"_\")[0];// If the piece can take pieces horizontally or vertically or king is in range,\n// then the move is not valid\nif(pieceName===\"queen\"||pieceName===\"castle\"||pieceName===\"king\"&&(dx===1||dy===1)){//return true;\nreturn straightCollisions.piece;}}// Check if the square is under attack from an opponents piece via diagonal line\nvar diagCollisions=CheckDiagCollisions(state.col,state.row,boardState,{pieceName:pieceToMove,pieceState:{col:x,row:y}});if(diagCollisions.piece&&diagCollisions.piece!==pieceToMove&&!diagCollisions.collision){// Dont include collisions with self\nif(diagCollisions.piece===pieceToMove)return null;var _pieceName=diagCollisions.piece.split(\"_\")[0];// If the piece can move diagonally or the pawn is in range of square,\n// then the move is not valid\nif(_pieceName===\"queen\"||_pieceName===\"bishop\"||_pieceName===\"king\"&&dx===1&&dy===1||_pieceName===\"pawn\"&&dx===1&&y-state.row===1){//return true;\nreturn diagCollisions.piece;}}// Check if square is under attack by a knight\nif(piece.split(\"_\")[0]===\"knight\"&&(dx===2&&dy===1||dx===1&&dy===2)){return piece;}}}return null;}/**\r\n * Check if the piece at (x,y) on the board is blocking an opponent piece from checking the king\r\n * @param {*} x x coordinate of the square currently being checked\r\n * @param {*} y y coordinate of the square currently being checked\r\n * @param {*} boardState current state of the board\r\n * @param {*} draggedPiece piece being dragged\r\n * @returns name of piece attacking king, if no such piece exists, return null\r\n */function CheckIfPieceIsProtectingKing(x,y,boardState,draggedPiece){// Get players king\nvar king=boardState[\"king_w\"].isOwner?boardState[\"king_w\"]:boardState[\"king_b\"];// Direction from (x,y) to king\nvar dirX=Math.sign(x-king.col);var dirY=Math.sign(y-king.row);if(dirX===0&&dirY===0)return null;var dx=Math.abs(king.col-x);var dy=Math.abs(king.row-y);var getOppositeCoords=function getOppositeCoords(king){var oppositeX=king.col;var oppositeY=king.row;// Get the x,y in the opposite direction to the king to the edge of the board\nwhile(oppositeX<=7&&oppositeX>=0&&oppositeY<=7&&oppositeY>=0){oppositeX+=dirX;oppositeY+=dirY;}return[oppositeX,oppositeY];};// Check pieces that are directly above or beside the king\nif(dx===0||(dirX===1||dirX===-1)&&dy===0){// Check if piece is inbetween king and opponent piece that can attack king\nvar straightCollisions=CheckStraightCollisions(x,y,boardState,{pieceState:{col:king.col,row:king.row}});// A piece is inbetween the dragged piece and the king,\n// therefore, it is not protecting the king and can be moved\nif(straightCollisions.collision&&straightCollisions.piece!==draggedPiece)return null;var _getOppositeCoords=getOppositeCoords(king),_getOppositeCoords2=_slicedToArray(_getOppositeCoords,2),oppositeX=_getOppositeCoords2[0],oppositeY=_getOppositeCoords2[1];var oppositeStraightCollisions=CheckStraightCollisions(oppositeX,oppositeY,boardState,{pieceState:{col:x,row:y}});if(oppositeStraightCollisions.piece&&!boardState[oppositeStraightCollisions.piece].isOwner){var pieceName=oppositeStraightCollisions.piece.split(\"_\")[0];// If the piece in opposite direction to king is able to attack the king\n// once the dragged piece is moved, then don't allow the piece to be moved\nif(pieceName===\"castle\"||pieceName===\"queen\"){// the piece is protecting the king\nreturn oppositeStraightCollisions.piece;}}}else if(dx===dy){// Check the pieces directly diagonal to the king\n// Check if piece is inbetween king and opponent piece that can attack king\nvar diagCollisions=CheckDiagCollisions(x,y,boardState,{pieceState:{col:king.col,row:king.row}});// A piece is inbetween the dragged piece and the king,\n// therefore, it is not protecting the king and can be moved\nif(diagCollisions.collision&&diagCollisions.piece!==draggedPiece)return null;var _getOppositeCoords3=getOppositeCoords(king),_getOppositeCoords4=_slicedToArray(_getOppositeCoords3,2),_oppositeX=_getOppositeCoords4[0],_oppositeY=_getOppositeCoords4[1];var oppositeDiagCollisions=CheckDiagCollisions(_oppositeX,_oppositeY,boardState,{pieceState:{col:x,row:y}});if(oppositeDiagCollisions.piece&&!boardState[oppositeDiagCollisions.piece].isOwner){var _pieceName2=oppositeDiagCollisions.piece.split(\"_\")[0];// If the piece in opposite direction to king is able to attack the king\n// once the dragged piece is moved, then don't allow the piece to be moved\nif(_pieceName2===\"bishop\"||_pieceName2===\"queen\"||_pieceName2===\"pawn\"){// the piece is protecting the king\nreturn oppositeDiagCollisions.piece;}}}return null;}/**\r\n * Checks if a piece at (x,y) on the board is under attack by an opponents piece\r\n * @param {*} boardState current state of the board\r\n * @returns true if the piece is under attack, false otherwise\r\n */export function CheckIfOpponentInCheck(boardState,opponentKing){for(var _i5=0,_Object$entries5=Object.entries(boardState);_i5<_Object$entries5.length;_i5++){var _Object$entries5$_i=_slicedToArray(_Object$entries5[_i5],2),piece=_Object$entries5$_i[0],state=_Object$entries5$_i[1];// King cannot be checked by its own pieces\nif(state.isOwner){var dx=Math.abs(opponentKing.col-state.col);var dy=Math.abs(opponentKing.row-state.row);// Check if the square is under attack from an opponents piece via straight line\nvar straightCollisions=CheckStraightCollisions(state.col,state.row,boardState,{pieceState:{col:opponentKing.col,row:opponentKing.row}},true);if(straightCollisions.piece&&!straightCollisions.collision){var pieceName=straightCollisions.piece.split(\"_\")[0];// If the piece can take pieces horizontally or vertically or king is in range,\n// then the move is not valid\nif(pieceName===\"queen\"||pieceName===\"castle\"||pieceName===\"king\"&&(dx===1||dy===1)){return true;}}// Check if the square is under attack from an opponents piece via diagonal line\nvar diagCollisions=CheckDiagCollisions(state.col,state.row,boardState,{pieceState:{col:opponentKing.col,row:opponentKing.row}},true);if(diagCollisions.piece&&!diagCollisions.collision){var _pieceName3=diagCollisions.piece.split(\"_\")[0];// If the piece can move diagonally or the pawn is in range of square,\n// then the move is not valid\n// negative direction is up the board\nif(_pieceName3===\"queen\"||_pieceName3===\"bishop\"||_pieceName3===\"king\"&&dx===1&&dy===1||_pieceName3===\"pawn\"&&dx===1&&opponentKing.row-state.row===-1){return true;}}// Check if square is under attack by a knight\nif(piece.split(\"_\")[0]===\"knight\"&&(dx===2&&dy===1||dx===1&&dy===2)){return true;}}}return false;}function CheckIfCanCastle(x,y,draggedPiece,boardState){var pieceName=draggedPiece.pieceName.split(\"_\")[0];var pieceColour=draggedPiece.pieceName.split(\"_\")[1];if(pieceName===\"king\"&&!draggedPiece.pieceState.hasBeenInCheck&&!draggedPiece.pieceState.hasMoved){var castle_1=boardState[\"castle_\"+pieceColour+\"_1\"];var castle_2=boardState[\"castle_\"+pieceColour+\"_2\"];// Ensure move is at correct square, castle hasnt moved and there is no pieces\n// inbetween the king and castle\nif(x===2&&y===7&&castle_1&&!castle_1.hasMoved&&!GetPieceAtSquare(1,7,boardState)&&!GetPieceAtSquare(2,7,boardState)&&!GetPieceAtSquare(3,7,boardState)){return{castleName:\"castle_\"+pieceColour+\"_1\",state:castle_1};}else if(x===6&&y===7&&castle_2&&!castle_2.hasMoved&&!GetPieceAtSquare(6,7,boardState)&&!GetPieceAtSquare(5,7,boardState)){return{castleName:\"castle_\"+pieceColour+\"_2\",state:castle_2};}}return null;}function CheckIfCanEnPassant(x,y,draggedPiece,boardState){}","map":{"version":3,"names":["MovePiece","toX","toY","setBoardState","setTakenPieces","draggedPiece","boardState","console","log","square","GetPieceAtSquare","isOwner","state","isAlive","piece","pieceNameSplit","split","piecePathName","pieceImgPath","require","colour","prevState","sort","king","castleToMove","CheckIfCanCastle","newCastleCol","col","newKingCol","castleName","hasMoved","pieceName","row","inCheck","CanMovePiece","dx","Math","abs","pieceState","dy","straightCollision","CheckStraightCollisions","diagCollision","CheckDiagCollisions","pieceCheckingKing","CheckIfPieceIsProtectingKing","piecePuttingKingInCheck","cantMoveToProtectKing","CheckIfMoveUnderAttack","pieceAttackingKingNotAtSquare","isProtectingKing","pieceAttackingKing","isPieceUnderAttack","cantMoveWhilstProtecting","moveUnderAttack","moveNotInCheck","canCastle","collision","x","y","Object","entries","checkForOpponentPiece","dirX","sign","dirY","i","owner","max","pieceToMove","straightCollisions","diagCollisions","getOppositeCoords","oppositeX","oppositeY","oppositeStraightCollisions","oppositeDiagCollisions","CheckIfOpponentInCheck","opponentKing","pieceColour","hasBeenInCheck","castle_1","castle_2","CheckIfCanEnPassant"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/components/Game.js"],"sourcesContent":["/**\r\n * Callback for setting the board state\r\n *\r\n * @callback setBoardState\r\n * @param {Object} board An dictionary representing the current board state\r\n */\r\n\r\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {setBoardState} setBoardState sets a new state of the board\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\r\nexport function MovePiece(\r\n    toX,\r\n    toY,\r\n    setBoardState,\r\n    setTakenPieces,\r\n    draggedPiece,\r\n    boardState\r\n) {\r\n    console.log(\"move\");\r\n    const square = GetPieceAtSquare(toX, toY, boardState);\r\n\r\n    // check if piece on square\r\n    // Ensure piece on square is not owned and is alive before taking\r\n    if (square != null && !square.isOwner && square.state.isAlive) {\r\n        // Remove piece from board\r\n        delete boardState[square.piece];\r\n\r\n        // Track what pieces are taken so that they can be rendered under player name\r\n        const pieceNameSplit = square.piece.split(\"_\");\r\n        const piecePathName = pieceNameSplit[0] + \"_\" + pieceNameSplit[1];\r\n        const pieceImgPath = require(\"../assets/images/pieces/\" +\r\n            piecePathName +\r\n            \".png\");\r\n\r\n        let colour;\r\n        if (pieceNameSplit[1] === \"w\") colour = \"white\";\r\n        else colour = \"black\";\r\n        // Sort the array of pieces so that matching pieces appear next to eachother\r\n        setTakenPieces((prevState) => ({\r\n            ...prevState,\r\n            [colour]: [...prevState[colour], pieceImgPath].sort(),\r\n        }));\r\n    }\r\n\r\n    const king = boardState[\"king_w\"].isOwner ? \"king_w\" : \"king_b\";\r\n\r\n    // Gets the castle if castling\r\n    const castleToMove = CheckIfCanCastle(toX, toY, draggedPiece, boardState);\r\n    if (castleToMove !== null) {\r\n        const newCastleCol = castleToMove.state.col === 7 ? 5 : 3;\r\n        const newKingCol = newCastleCol === 5 ? 6 : 2;\r\n        // Moves the king and castle when castling\r\n        setBoardState((prevState) => ({\r\n            ...prevState,\r\n            [castleToMove.castleName]: {\r\n                ...boardState[castleToMove.castleName],\r\n                col: newCastleCol,\r\n                hasMoved: true,\r\n            },\r\n            [king]: {\r\n                ...boardState[king],\r\n                col: newKingCol,\r\n                hasMoved: true,\r\n            },\r\n        }));\r\n    } else {\r\n        // Update state of the moved piece\r\n        if (draggedPiece.pieceName.split(\"_\")[0] === \"king\") {\r\n            setBoardState((prevState) => ({\r\n                ...prevState,\r\n                [draggedPiece.pieceName]: {\r\n                    ...boardState[draggedPiece.pieceName],\r\n                    row: toY,\r\n                    col: toX,\r\n                    hasMoved: true,\r\n                },\r\n            }));\r\n        } else {\r\n            // Moving a piece will always take king out of check\r\n            setBoardState((prevState) => ({\r\n                ...prevState,\r\n                [draggedPiece.pieceName]: {\r\n                    ...boardState[draggedPiece.pieceName],\r\n                    row: toY,\r\n                    col: toX,\r\n                    hasMoved: true,\r\n                },\r\n                [king]: {\r\n                    ...boardState[king],\r\n                    inCheck: false,\r\n                },\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\r\nexport function CanMovePiece(toX, toY, draggedPiece, boardState) {\r\n    const square = GetPieceAtSquare(toX, toY, boardState);\r\n\r\n    // if a friendly piece is in a square, don't allow this piece to be moved there\r\n    if (square && square.state.isOwner && square.state.isAlive) return false;\r\n\r\n    // calculate the difference between the new square and the piece being dragged\r\n    let dx = Math.abs(toX - draggedPiece.pieceState.col);\r\n    let dy = Math.abs(toY - draggedPiece.pieceState.row);\r\n\r\n    const pieceName = draggedPiece.pieceName.split(\"_\")[0];\r\n\r\n    // Check the row and column of the piece to see if the movement should be blocked\r\n    // by another piece\r\n    const straightCollision = CheckStraightCollisions(\r\n        toX,\r\n        toY,\r\n        boardState,\r\n        draggedPiece\r\n    );\r\n    // Check the diagonal of the piece to see if the movement should be blocked\r\n    // by another piece\r\n    const diagCollision = CheckDiagCollisions(\r\n        toX,\r\n        toY,\r\n        boardState,\r\n        draggedPiece\r\n    );\r\n\r\n    // Checks if the move will block the piece attacking the king\r\n    const pieceCheckingKing = CheckIfPieceIsProtectingKing(\r\n        toX,\r\n        toY,\r\n        boardState,\r\n        draggedPiece.pieceName\r\n    );\r\n\r\n    // Get the players king\r\n    const king = boardState[\"king_w\"].isOwner\r\n        ? boardState[\"king_w\"]\r\n        : boardState[\"king_b\"];\r\n\r\n    let piecePuttingKingInCheck, cantMoveToProtectKing;\r\n    if (king.inCheck) {\r\n        // Gets the piece that is putting the king in check\r\n        piecePuttingKingInCheck = CheckIfMoveUnderAttack(\r\n            king.col,\r\n            king.row,\r\n            boardState\r\n        );\r\n\r\n        const pieceAttackingKingNotAtSquare =\r\n            square !== null && square.piece !== piecePuttingKingInCheck;\r\n        // Move must protect king if king is in check\r\n        cantMoveToProtectKing =\r\n            king.inCheck &&\r\n            ((pieceCheckingKing === null && pieceAttackingKingNotAtSquare) ||\r\n                (pieceCheckingKing === null && square === null));\r\n    }\r\n\r\n    let isProtectingKing;\r\n    if (pieceName !== \"king\") {\r\n        // Check if the piece is defending the king\r\n        // Get the piece that is attacking the king if true\r\n        const pieceAttackingKing = CheckIfPieceIsProtectingKing(\r\n            draggedPiece.pieceState.col,\r\n            draggedPiece.pieceState.row,\r\n            boardState,\r\n            draggedPiece.pieceName\r\n        );\r\n        // Check if the piece is currently under attack\r\n        const isPieceUnderAttack =\r\n            CheckIfMoveUnderAttack(\r\n                draggedPiece.pieceState.col,\r\n                draggedPiece.pieceState.row,\r\n                boardState\r\n            ) !== null;\r\n        isProtectingKing = pieceAttackingKing !== null && isPieceUnderAttack;\r\n    }\r\n\r\n    const cantMoveWhilstProtecting = () => {\r\n        // Dont allow the pawn to move if its protecting king unless it can take the piece\r\n        // and ensure that the piece is alive before taking\r\n        if (\r\n            isProtectingKing &&\r\n            ((square && pieceCheckingKing !== square.piece) ||\r\n                square === null ||\r\n                (square && !square.state.isAlive))\r\n        )\r\n            return true;\r\n        return false;\r\n    };\r\n\r\n    switch (pieceName) {\r\n        case \"king\":\r\n            const moveUnderAttack = CheckIfMoveUnderAttack(\r\n                toX,\r\n                toY,\r\n                boardState,\r\n                draggedPiece.pieceName\r\n            );\r\n            const moveNotInCheck =\r\n                moveUnderAttack === null ||\r\n                (square && square.piece === moveUnderAttack);\r\n            const canCastle = CheckIfCanCastle(\r\n                toX,\r\n                toY,\r\n                draggedPiece,\r\n                boardState\r\n            );\r\n            return (\r\n                (((dx === 1 || dx === 0) && (dy === 1 || dy === 0)) ||\r\n                    (canCastle && dx === 2 && dy === 0)) &&\r\n                moveNotInCheck\r\n            );\r\n\r\n        case \"castle\":\r\n            if (cantMoveWhilstProtecting()) return;\r\n            if (cantMoveToProtectKing) return;\r\n            return (\r\n                ((dx === 0 && dy > 0) || (dx > 0 && dy === 0)) &&\r\n                !straightCollision.collision\r\n            );\r\n\r\n        case \"knight\":\r\n            if (cantMoveWhilstProtecting()) return;\r\n            if (cantMoveToProtectKing) return;\r\n            return (dx === 2 && dy === 1) || (dx === 1 && dy === 2);\r\n\r\n        case \"bishop\":\r\n            if (cantMoveWhilstProtecting()) return;\r\n            if (cantMoveToProtectKing) return;\r\n            return (\r\n                !(dx === 0 && dy > 0) &&\r\n                !(dx > 0 && dy === 0) &&\r\n                (dx === dy || dx === dy) &&\r\n                !diagCollision.collision\r\n            );\r\n\r\n        case \"queen\":\r\n            if (cantMoveWhilstProtecting()) return;\r\n            if (cantMoveToProtectKing) return;\r\n\r\n            return (\r\n                (((dx === 0 && dy > 0) || (dx > 0 && dy === 0)) &&\r\n                    !straightCollision.collision) ||\r\n                ((dx === dy || dx === dy) && !diagCollision.collision)\r\n            );\r\n\r\n        case \"pawn\":\r\n            if (cantMoveWhilstProtecting()) return;\r\n            if (cantMoveToProtectKing) return;\r\n            // Recalculate dx/dy with direction\r\n            dx = toX - draggedPiece.pieceState.col;\r\n            dy = toY - draggedPiece.pieceState.row;\r\n            // Allow pawn to move 2 squares on first move\r\n            if (!draggedPiece.pieceState.hasMoved) {\r\n                // Negative direction moves up the board (player always at bottom)\r\n                if (\r\n                    dx === 0 &&\r\n                    (dy === -1 || dy === -2) &&\r\n                    !straightCollision.collision\r\n                ) {\r\n                    return square === null;\r\n                }\r\n            }\r\n            // Allow pawn to take opponents pieces diagonal by 1 square\r\n            if ((dx === 1 || dx === -1) && dy === -1 && square !== null)\r\n                return true;\r\n\r\n            // Allow pawn to move forward by 1 square\r\n            return dx === 0 && dy === -1 && square === null;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if the current square is empty\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @returns piece name and state if square is not empty, null otherwise\r\n */\r\nfunction GetPieceAtSquare(x, y, boardState) {\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        if (x === state.col && y === state.row) {\r\n            return { piece, state };\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Checks if there is a piece in the diagonal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} draggedPiece contains data about the currently dragged piece\r\n * @param {boolean} checkForOpponentPiece if true, the check will be on behalf of the opponent\r\n * @returns piece and false if an opponents piece is inbetween the square and the currently dragged piece, piece and true otherwise\r\n */\r\nfunction CheckDiagCollisions(\r\n    x,\r\n    y,\r\n    boardState,\r\n    draggedPiece,\r\n    checkForOpponentPiece = false\r\n) {\r\n    // Get row and col of dragged piece\r\n    const row = draggedPiece.pieceState.row;\r\n    const col = draggedPiece.pieceState.col;\r\n\r\n    const dirX = Math.sign(x - col);\r\n    const dirY = Math.sign(y - row);\r\n    for (let i = 0; i < Math.abs(x - col) + 1; i++) {\r\n        for (const [piece, state] of Object.entries(boardState)) {\r\n            // Dont include collisions with self\r\n            if (piece !== draggedPiece.pieceName) {\r\n                const owner = checkForOpponentPiece\r\n                    ? !state.isOwner\r\n                    : state.isOwner;\r\n                if (\r\n                    col + i * dirX === state.col &&\r\n                    row + i * dirY === state.row &&\r\n                    state.isAlive &&\r\n                    ((i === 0 && !owner) || i !== 0)\r\n                ) {\r\n                    if (i !== Math.abs(x - col)) {\r\n                        // Stops opponents pieces from being taken when hidden behind each other\r\n                        return {\r\n                            piece: piece,\r\n                            collision: true,\r\n                        };\r\n                    }\r\n                    return {\r\n                        piece: piece,\r\n                        collision: owner,\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return { piece: null, collision: false };\r\n}\r\n\r\n/**\r\n * Checks if there is a piece in the vertical and horizontal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} draggedPiece contains data about the currently dragged piece\r\n * @param {boolean} checkForOpponentPiece if true, the check will be on behalf of the opponent\r\n * @returns true and the piece name if an opponents piece is inbetween the square and the currently dragged piece, false and null otherwise\r\n */\r\nfunction CheckStraightCollisions(\r\n    x,\r\n    y,\r\n    boardState,\r\n    draggedPiece,\r\n    checkForOpponentPiece = false\r\n) {\r\n    // Get row and col of dragged piece\r\n    const row = draggedPiece.pieceState.row;\r\n    const col = draggedPiece.pieceState.col;\r\n    // Get change in x and y between dragged piece and square\r\n    const dx = Math.abs(x - col);\r\n    const dy = Math.abs(y - row);\r\n\r\n    // Ignore diagonal moves\r\n    if (dx > 0 && dy > 0) return true;\r\n\r\n    // get direction of move\r\n    const dirX = Math.sign(x - col);\r\n    const dirY = Math.sign(y - row);\r\n\r\n    for (let i = 1; i < Math.max(dx, dy) + 1; i++) {\r\n        for (const [piece, state] of Object.entries(boardState)) {\r\n            // Dont include collisions with self\r\n            if (piece !== draggedPiece.pieceName) {\r\n                if (state.isAlive) {\r\n                    // Move is horizontal if dy = 0, otherwise vertical\r\n                    if (dy === 0) {\r\n                        if (col + i * dirX === state.col && row === state.row) {\r\n                            if (i !== Math.abs(x - col)) {\r\n                                // Stops opponents pieces from being taken when hidden behind each other\r\n                                return {\r\n                                    piece: piece,\r\n                                    collision: true,\r\n                                };\r\n                            }\r\n                            return {\r\n                                piece: piece,\r\n                                collision: checkForOpponentPiece\r\n                                    ? !state.isOwner\r\n                                    : state.isOwner,\r\n                            };\r\n                        }\r\n                    } else {\r\n                        if (row + i * dirY === state.row && col === state.col) {\r\n                            if (i !== Math.abs(y - row)) {\r\n                                // Stops opponents pieces from being taken when hidden behind each other\r\n                                return {\r\n                                    piece: piece,\r\n                                    collision: true,\r\n                                };\r\n                            }\r\n                            return {\r\n                                piece: piece,\r\n                                collision: checkForOpponentPiece\r\n                                    ? !state.isOwner\r\n                                    : state.isOwner,\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return { piece: null, collision: false };\r\n}\r\n\r\n/**\r\n * Checks if a piece at (x,y) on the board is under attack by an opponents piece\r\n * @param {*} x x coordinate of the square currently being checked\r\n * @param {*} y y coordinate of the square currently being checked\r\n * @param {*} boardState current state of the board\r\n * @returns piece name if the piece is under attack, null otherwise\r\n */\r\nfunction CheckIfMoveUnderAttack(x, y, boardState, pieceToMove = null) {\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        // King cannot be checked by its own pieces\r\n        if (!state.isOwner) {\r\n            const dx = Math.abs(x - state.col);\r\n            const dy = Math.abs(y - state.row);\r\n\r\n            // Check if the square is under attack from an opponents piece via straight line\r\n            const straightCollisions = CheckStraightCollisions(\r\n                state.col,\r\n                state.row,\r\n                boardState,\r\n                {\r\n                    pieceName: pieceToMove,\r\n                    pieceState: { col: x, row: y },\r\n                }\r\n            );\r\n\r\n            if (straightCollisions.piece && !straightCollisions.collision) {\r\n                const pieceName = straightCollisions.piece.split(\"_\")[0];\r\n                // If the piece can take pieces horizontally or vertically or king is in range,\r\n                // then the move is not valid\r\n                if (\r\n                    pieceName === \"queen\" ||\r\n                    pieceName === \"castle\" ||\r\n                    (pieceName === \"king\" && (dx === 1 || dy === 1))\r\n                ) {\r\n                    //return true;\r\n                    return straightCollisions.piece;\r\n                }\r\n            }\r\n            // Check if the square is under attack from an opponents piece via diagonal line\r\n            const diagCollisions = CheckDiagCollisions(\r\n                state.col,\r\n                state.row,\r\n                boardState,\r\n                {\r\n                    pieceName: pieceToMove,\r\n                    pieceState: { col: x, row: y },\r\n                }\r\n            );\r\n\r\n            if (\r\n                diagCollisions.piece &&\r\n                diagCollisions.piece !== pieceToMove &&\r\n                !diagCollisions.collision\r\n            ) {\r\n                // Dont include collisions with self\r\n                if (diagCollisions.piece === pieceToMove) return null;\r\n\r\n                const pieceName = diagCollisions.piece.split(\"_\")[0];\r\n                // If the piece can move diagonally or the pawn is in range of square,\r\n                // then the move is not valid\r\n                if (\r\n                    pieceName === \"queen\" ||\r\n                    pieceName === \"bishop\" ||\r\n                    (pieceName === \"king\" && dx === 1 && dy === 1) ||\r\n                    (pieceName === \"pawn\" && dx === 1 && y - state.row === 1)\r\n                ) {\r\n                    //return true;\r\n                    return diagCollisions.piece;\r\n                }\r\n            }\r\n\r\n            // Check if square is under attack by a knight\r\n            if (\r\n                piece.split(\"_\")[0] === \"knight\" &&\r\n                ((dx === 2 && dy === 1) || (dx === 1 && dy === 2))\r\n            ) {\r\n                return piece;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Check if the piece at (x,y) on the board is blocking an opponent piece from checking the king\r\n * @param {*} x x coordinate of the square currently being checked\r\n * @param {*} y y coordinate of the square currently being checked\r\n * @param {*} boardState current state of the board\r\n * @param {*} draggedPiece piece being dragged\r\n * @returns name of piece attacking king, if no such piece exists, return null\r\n */\r\nfunction CheckIfPieceIsProtectingKing(x, y, boardState, draggedPiece) {\r\n    // Get players king\r\n    const king = boardState[\"king_w\"].isOwner\r\n        ? boardState[\"king_w\"]\r\n        : boardState[\"king_b\"];\r\n\r\n    // Direction from (x,y) to king\r\n    const dirX = Math.sign(x - king.col);\r\n    const dirY = Math.sign(y - king.row);\r\n\r\n    if (dirX === 0 && dirY === 0) return null;\r\n\r\n    const dx = Math.abs(king.col - x);\r\n    const dy = Math.abs(king.row - y);\r\n\r\n    const getOppositeCoords = (king) => {\r\n        let oppositeX = king.col;\r\n        let oppositeY = king.row;\r\n        // Get the x,y in the opposite direction to the king to the edge of the board\r\n\r\n        while (\r\n            oppositeX <= 7 &&\r\n            oppositeX >= 0 &&\r\n            oppositeY <= 7 &&\r\n            oppositeY >= 0\r\n        ) {\r\n            oppositeX += dirX;\r\n            oppositeY += dirY;\r\n        }\r\n        return [oppositeX, oppositeY];\r\n    };\r\n\r\n    // Check pieces that are directly above or beside the king\r\n    if (dx === 0 || ((dirX === 1 || dirX === -1) && dy === 0)) {\r\n        // Check if piece is inbetween king and opponent piece that can attack king\r\n        const straightCollisions = CheckStraightCollisions(x, y, boardState, {\r\n            pieceState: { col: king.col, row: king.row },\r\n        });\r\n\r\n        // A piece is inbetween the dragged piece and the king,\r\n        // therefore, it is not protecting the king and can be moved\r\n        if (\r\n            straightCollisions.collision &&\r\n            straightCollisions.piece !== draggedPiece\r\n        )\r\n            return null;\r\n\r\n        const [oppositeX, oppositeY] = getOppositeCoords(king);\r\n\r\n        const oppositeStraightCollisions = CheckStraightCollisions(\r\n            oppositeX,\r\n            oppositeY,\r\n            boardState,\r\n            {\r\n                pieceState: { col: x, row: y },\r\n            }\r\n        );\r\n\r\n        if (\r\n            oppositeStraightCollisions.piece &&\r\n            !boardState[oppositeStraightCollisions.piece].isOwner\r\n        ) {\r\n            const pieceName = oppositeStraightCollisions.piece.split(\"_\")[0];\r\n            // If the piece in opposite direction to king is able to attack the king\r\n            // once the dragged piece is moved, then don't allow the piece to be moved\r\n            if (pieceName === \"castle\" || pieceName === \"queen\") {\r\n                // the piece is protecting the king\r\n                return oppositeStraightCollisions.piece;\r\n            }\r\n        }\r\n    } else if (dx === dy) {\r\n        // Check the pieces directly diagonal to the king\r\n        // Check if piece is inbetween king and opponent piece that can attack king\r\n        const diagCollisions = CheckDiagCollisions(x, y, boardState, {\r\n            pieceState: { col: king.col, row: king.row },\r\n        });\r\n\r\n        // A piece is inbetween the dragged piece and the king,\r\n        // therefore, it is not protecting the king and can be moved\r\n        if (diagCollisions.collision && diagCollisions.piece !== draggedPiece)\r\n            return null;\r\n\r\n        const [oppositeX, oppositeY] = getOppositeCoords(king);\r\n\r\n        const oppositeDiagCollisions = CheckDiagCollisions(\r\n            oppositeX,\r\n            oppositeY,\r\n            boardState,\r\n            {\r\n                pieceState: { col: x, row: y },\r\n            }\r\n        );\r\n\r\n        if (\r\n            oppositeDiagCollisions.piece &&\r\n            !boardState[oppositeDiagCollisions.piece].isOwner\r\n        ) {\r\n            const pieceName = oppositeDiagCollisions.piece.split(\"_\")[0];\r\n            // If the piece in opposite direction to king is able to attack the king\r\n            // once the dragged piece is moved, then don't allow the piece to be moved\r\n            if (\r\n                pieceName === \"bishop\" ||\r\n                pieceName === \"queen\" ||\r\n                pieceName === \"pawn\"\r\n            ) {\r\n                // the piece is protecting the king\r\n                return oppositeDiagCollisions.piece;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Checks if a piece at (x,y) on the board is under attack by an opponents piece\r\n * @param {*} boardState current state of the board\r\n * @returns true if the piece is under attack, false otherwise\r\n */\r\nexport function CheckIfOpponentInCheck(boardState, opponentKing) {\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        // King cannot be checked by its own pieces\r\n        if (state.isOwner) {\r\n            const dx = Math.abs(opponentKing.col - state.col);\r\n            const dy = Math.abs(opponentKing.row - state.row);\r\n\r\n            // Check if the square is under attack from an opponents piece via straight line\r\n            const straightCollisions = CheckStraightCollisions(\r\n                state.col,\r\n                state.row,\r\n                boardState,\r\n                {\r\n                    pieceState: {\r\n                        col: opponentKing.col,\r\n                        row: opponentKing.row,\r\n                    },\r\n                },\r\n                true\r\n            );\r\n\r\n            if (straightCollisions.piece && !straightCollisions.collision) {\r\n                const pieceName = straightCollisions.piece.split(\"_\")[0];\r\n                // If the piece can take pieces horizontally or vertically or king is in range,\r\n                // then the move is not valid\r\n                if (\r\n                    pieceName === \"queen\" ||\r\n                    pieceName === \"castle\" ||\r\n                    (pieceName === \"king\" && (dx === 1 || dy === 1))\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n            // Check if the square is under attack from an opponents piece via diagonal line\r\n            const diagCollisions = CheckDiagCollisions(\r\n                state.col,\r\n                state.row,\r\n                boardState,\r\n                {\r\n                    pieceState: {\r\n                        col: opponentKing.col,\r\n                        row: opponentKing.row,\r\n                    },\r\n                },\r\n                true\r\n            );\r\n            if (diagCollisions.piece && !diagCollisions.collision) {\r\n                const pieceName = diagCollisions.piece.split(\"_\")[0];\r\n\r\n                // If the piece can move diagonally or the pawn is in range of square,\r\n                // then the move is not valid\r\n                // negative direction is up the board\r\n                if (\r\n                    pieceName === \"queen\" ||\r\n                    pieceName === \"bishop\" ||\r\n                    (pieceName === \"king\" && dx === 1 && dy === 1) ||\r\n                    (pieceName === \"pawn\" &&\r\n                        dx === 1 &&\r\n                        opponentKing.row - state.row === -1)\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // Check if square is under attack by a knight\r\n            if (\r\n                piece.split(\"_\")[0] === \"knight\" &&\r\n                ((dx === 2 && dy === 1) || (dx === 1 && dy === 2))\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction CheckIfCanCastle(x, y, draggedPiece, boardState) {\r\n    const pieceName = draggedPiece.pieceName.split(\"_\")[0];\r\n    const pieceColour = draggedPiece.pieceName.split(\"_\")[1];\r\n    if (\r\n        pieceName === \"king\" &&\r\n        !draggedPiece.pieceState.hasBeenInCheck &&\r\n        !draggedPiece.pieceState.hasMoved\r\n    ) {\r\n        const castle_1 = boardState[\"castle_\" + pieceColour + \"_1\"];\r\n        const castle_2 = boardState[\"castle_\" + pieceColour + \"_2\"];\r\n        // Ensure move is at correct square, castle hasnt moved and there is no pieces\r\n        // inbetween the king and castle\r\n        if (\r\n            x === 2 &&\r\n            y === 7 &&\r\n            castle_1 &&\r\n            !castle_1.hasMoved &&\r\n            !GetPieceAtSquare(1, 7, boardState) &&\r\n            !GetPieceAtSquare(2, 7, boardState) &&\r\n            !GetPieceAtSquare(3, 7, boardState)\r\n        ) {\r\n            return {\r\n                castleName: \"castle_\" + pieceColour + \"_1\",\r\n                state: castle_1,\r\n            };\r\n        } else if (\r\n            x === 6 &&\r\n            y === 7 &&\r\n            castle_2 &&\r\n            !castle_2.hasMoved &&\r\n            !GetPieceAtSquare(6, 7, boardState) &&\r\n            !GetPieceAtSquare(5, 7, boardState)\r\n        ) {\r\n            return {\r\n                castleName: \"castle_\" + pieceColour + \"_2\",\r\n                state: castle_2,\r\n            };\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction CheckIfCanEnPassant(x, y, draggedPiece, boardState) {}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}