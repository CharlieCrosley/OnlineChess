{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\charl\\\\Documents\\\\Code\\\\Web Dev\\\\Chess-Online\\\\chessproject\\\\frontend\\\\src\\\\pages\\\\Chess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { GameContainer, GamePlayer, Player, TakenPieces, ButtonWrapper, PlayerName } from \"./GameElements\";\nimport Board from \"../components/Board\";\nimport { checkIfOpponentInCheck, canMovePiece } from \"../components/Game\";\nimport GameOver from \"../components/GameOver\";\nimport { Button } from \"../components/GameOverElements\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chess = () => {\n  _s();\n\n  const location = useLocation();\n  const [winner, setWinner] = useState(null);\n  const [room] = useState(location.state.room);\n  const [name] = useState(location.state.name);\n  const [opponentName, setOpponentName] = useState(null);\n  const [playerColour, setPlayerColour] = useState(location.state.colour);\n  const [takenPieces, setTakenPieces] = useState({\n    white: [],\n    black: []\n  });\n  const [isTurn, setIsTurn] = useState(location.state.colour === \"white\" ? true : false);\n  /* require(\"../assets/images/pieces/pawn_b.png\"),\r\n  require(\"../assets/images/pieces/queen_b.png\"),\r\n  require(\"../assets/images/pieces/bishop_b.png\"),\r\n  require(\"../assets/images/pieces/king_b.png\"), */\n\n  const boardRotation = getBoardRotation(playerColour);\n  const isWhite = playerColour === \"white\"; // Sets initial piece positions ensuring that players colour is always at bottom\n\n  const [boardState, setBoardState] = useState(initBoardState(isWhite, boardRotation));\n  const [prevBoardState, setPrevBoardState] = useState(null);\n  const [audio] = useState({\n    check: new Audio(require(\"../assets/sounds/check.mp3\")),\n    move: new Audio(require(\"../assets/sounds/move.mp3\")),\n    capture: new Audio(require(\"../assets/sounds/capture.ogg\")),\n    end: new Audio(require(\"../assets/sounds/game_end.mp3\"))\n  });\n  const opponentColour = playerColour === \"white\" ? \"black\" : \"white\";\n  const {\n    sendMessage,\n    readyState\n  } = useWebSocket(\"ws://127.0.0.1:8000/ws/\" + room + \"/\", {\n    onOpen: () => {\n      console.log(\"Connected!\");\n      sendMessage(JSON.stringify({\n        type: \"send_message\",\n        message: {\n          opponentName: location.state.name\n        },\n        event: \"START\"\n      }));\n    },\n    onClose: () => {\n      console.log(\"Disconnected!\");\n    },\n    onMessage: e => {\n      const dataFromServer = JSON.parse(e.data);\n\n      switch (dataFromServer.payload.event) {\n        case \"START\":\n          // Only set opponent name once at start\n          if (opponentName === null) {\n            setOpponentName(dataFromServer.payload.message.opponentName);\n            sendMessage(JSON.stringify({\n              type: \"send_message\",\n              message: {\n                opponentName: location.state.name\n              },\n              event: \"START\"\n            }));\n          }\n\n          break;\n\n        case \"END\":\n          // If a player receives the end message, they won\n          setWinner(dataFromServer.payload.message.winnerColour === playerColour);\n          break;\n\n        case \"MOVE\":\n          // Ensure that the message is not from self\n          if (dataFromServer.payload.message.opponent && dataFromServer.payload.message.opponent.colour !== playerColour) {\n            const flippedBoard = flipBoard(dataFromServer.payload.message.boardState); // Make sure that the board state has changed\n            // Board must be flipped since the opponent sees it from the other side\n\n            if (JSON.stringify(flippedBoard) !== JSON.stringify(boardState)) {\n              setBoardState(flippedBoard);\n              setTakenPieces(dataFromServer.payload.message.takenPieces);\n            }\n          }\n\n          break;\n\n        case \"RESTART\":\n          // Reset state and swap colour\n          setWinner(null);\n          setTakenPieces({\n            white: [],\n            black: []\n          });\n          setPlayerColour(opponentColour);\n          setIsTurn(opponentColour === \"white\");\n          break;\n      }\n    }\n  });\n  useEffect(() => {\n    // Reset the board the the colour is swapped\n    // Dont do this when first joining a room\n    if (prevBoardState !== null) {\n      setPrevBoardState(null);\n      setBoardState(initBoardState(isWhite, boardRotation));\n    }\n  }, [playerColour]);\n\n  const playMoveAudio = () => {\n    if (prevBoardState === null) return;\n\n    for (const [piece] of Object.entries(boardState)) {\n      // Check if any piece has been taken by comparing the new and old board states\n      if (boardState[piece].isAlive !== prevBoardState[piece].isAlive) {\n        audio.capture.play();\n        return;\n      }\n    } // If no piece has been taken, play the normal move sound\n\n\n    audio.move.play();\n  };\n\n  const handleCheckmate = () => {\n    // Update the kings check state\n    let opponentKing, playerKing;\n\n    if (boardState[\"king_w\"].isOwner) {\n      opponentKing = boardState[\"king_b\"];\n      playerKing = boardState[\"king_w\"];\n    } else {\n      opponentKing = boardState[\"king_w\"];\n      playerKing = boardState[\"king_b\"];\n    }\n\n    if (checkIfOpponentInCheck(boardState, opponentKing)) {\n      audio.check.play();\n      opponentKing.inCheck = true;\n    } else {\n      opponentKing.inCheck = false;\n    } // This state will be updated when on the opponents side and sent to the player\n\n\n    if (playerKing.inCheck) {\n      audio.check.play();\n    }\n  };\n\n  const checkForGameOver = () => {\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        for (const [piece, state] of Object.entries(boardState)) {\n          // If a piece can be moved, the game is not over\n          if (state.isOwner && state.isAlive && canMovePiece(x, y, {\n            pieceName: piece,\n            pieceState: state\n          }, boardState)) return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  useEffect(() => {\n    // Send the current board state to the websocket group\n    // Only send message if the board state has changed to avoid infintite loop of sending\n    playMoveAudio();\n    handleCheckmate();\n\n    if (prevBoardState) {\n      sendMessage(JSON.stringify({\n        type: \"send_message\",\n        message: {\n          boardState,\n          takenPieces,\n          opponent: {\n            name: name,\n            colour: playerColour\n          }\n        },\n        event: \"MOVE\"\n      })); // True if there are no possible moves, meaning the opponent won\n\n      if (checkForGameOver()) {\n        // Tell the other player that they won\n        sendMessage(JSON.stringify({\n          type: \"send_message\",\n          message: {\n            winnerColour: opponentColour\n          },\n          event: \"END\"\n        }));\n      }\n    } // Swap turns\n\n\n    setIsTurn(prev => !prev);\n    setPrevBoardState(boardState);\n  }, [boardState]);\n\n  const restartGame = () => {\n    // Tell the group to restart game and switch sides\n    sendMessage(JSON.stringify({\n      type: \"send_message\",\n      message: null,\n      event: \"RESTART\"\n    }));\n  };\n\n  const navigate = useNavigate();\n\n  const exitRoom = () => {\n    // Return to room join page\n    navigate(\"/join\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    children: /*#__PURE__*/_jsxDEV(GamePlayer, {\n      children: [/*#__PURE__*/_jsxDEV(ButtonWrapper, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          colour: \"rgb(198, 34, 34)\",\n          onClick: exitRoom,\n          children: \"Exit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Player, {\n        children: [/*#__PURE__*/_jsxDEV(PlayerName, {\n          children: opponentName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TakenPieces, {\n          children: takenPieces[playerColour].map((piecePath, i) => {\n            return /*#__PURE__*/_jsxDEV(\"img\", {\n              src: piecePath\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        boardState: boardState,\n        setBoardState: setBoardState,\n        setTakenPieces: setTakenPieces,\n        isTurn: isTurn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Player, {\n        children: [/*#__PURE__*/_jsxDEV(PlayerName, {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TakenPieces, {\n          children: takenPieces[opponentColour].map((piecePath, i) => {\n            return /*#__PURE__*/_jsxDEV(\"img\", {\n              src: piecePath\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GameOver, {\n        show: winner !== null,\n        winner: winner,\n        restartGame: restartGame,\n        exitRoom: exitRoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chess, \"PTWWBF2eYXsUiJgQKyuQSeG6GFg=\", false, function () {\n  return [useLocation, useWebSocket, useNavigate];\n});\n\n_c = Chess;\nexport default Chess;\n\nconst getBoardRotation = colour => {\n  if (colour === \"white\") return {\n    white: [7, 6],\n    black: [0, 1]\n  };else if (colour === \"black\") return {\n    white: [0, 1],\n    black: [7, 6]\n  };\n  throw \"Colour must be black or white\";\n};\n\nconst flipBoard = boardState => {\n  for (const [_, state] of Object.entries(boardState)) {\n    state.row = 7 - state.row;\n    state.isOwner = !state.isOwner;\n  }\n\n  return boardState;\n};\n\nexport const initBoardState = (isWhite, boardRotation) => {\n  const pieceNames = [\"castle_w_1\", \"knight_w_1\", \"bishop_w_1\", \"queen_w\", \"king_w\", \"bishop_w_2\", \"knight_w_2\", \"castle_w_2\", \"pawn_w_1\", \"pawn_w_2\", \"pawn_w_3\", \"pawn_w_4\", \"pawn_w_5\", \"pawn_w_6\", \"pawn_w_7\", \"pawn_w_8\", \"castle_b_1\", \"knight_b_1\", \"bishop_b_1\", \"queen_b\", \"king_b\", \"bishop_b_2\", \"knight_b_2\", \"castle_b_2\", \"pawn_b_1\", \"pawn_b_2\", \"pawn_b_3\", \"pawn_b_4\", \"pawn_b_5\", \"pawn_b_6\", \"pawn_b_7\", \"pawn_b_8\"];\n  const boardState = {};\n\n  for (let i = 0; i < 32; i++) {\n    // First 16 elements in  pieces array are white rest are black\n    // Each 8 elements in array is a row\n    if (i < 16) {\n      let row;\n      if (i < 8) row = boardRotation.white[0];else row = boardRotation.white[1];\n      const properties = {\n        row: row,\n        col: i % 8,\n        hasMoved: false,\n        isOwner: isWhite,\n        isAlive: true\n      };\n\n      if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\n        properties[\"inCheck\"] = false;\n        properties[\"hasBeenInCheck\"];\n      }\n\n      boardState[pieceNames[i]] = properties;\n    } else {\n      let row;\n      if (i < 24) row = boardRotation.black[0];else row = boardRotation.black[1];\n      const properties = {\n        row: row,\n        col: i % 8,\n        hasMoved: false,\n        isOwner: !isWhite,\n        isAlive: true\n      };\n\n      if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\n        properties[\"inCheck\"] = false;\n      }\n\n      boardState[pieceNames[i]] = properties;\n    }\n  }\n\n  return boardState;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Chess\");","map":{"version":3,"names":["React","useState","useEffect","useWebSocket","ReadyState","useLocation","useNavigate","GameContainer","GamePlayer","Player","TakenPieces","ButtonWrapper","PlayerName","Board","checkIfOpponentInCheck","canMovePiece","GameOver","Button","Chess","location","winner","setWinner","room","state","name","opponentName","setOpponentName","playerColour","setPlayerColour","colour","takenPieces","setTakenPieces","white","black","isTurn","setIsTurn","boardRotation","getBoardRotation","isWhite","boardState","setBoardState","initBoardState","prevBoardState","setPrevBoardState","audio","check","Audio","require","move","capture","end","opponentColour","sendMessage","readyState","onOpen","console","log","JSON","stringify","type","message","event","onClose","onMessage","e","dataFromServer","parse","data","payload","winnerColour","opponent","flippedBoard","flipBoard","playMoveAudio","piece","Object","entries","isAlive","play","handleCheckmate","opponentKing","playerKing","isOwner","inCheck","checkForGameOver","y","x","pieceName","pieceState","prev","restartGame","navigate","exitRoom","map","piecePath","i","_","row","pieceNames","properties","col","hasMoved"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/pages/Chess.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport {\r\n    GameContainer,\r\n    GamePlayer,\r\n    Player,\r\n    TakenPieces,\r\n    ButtonWrapper,\r\n    PlayerName,\r\n} from \"./GameElements\";\r\nimport Board from \"../components/Board\";\r\nimport { checkIfOpponentInCheck, canMovePiece } from \"../components/Game\";\r\nimport GameOver from \"../components/GameOver\";\r\nimport { Button } from \"../components/GameOverElements\";\r\n\r\nconst Chess = () => {\r\n    const location = useLocation();\r\n\r\n    const [winner, setWinner] = useState(null);\r\n    const [room] = useState(location.state.room);\r\n    const [name] = useState(location.state.name);\r\n    const [opponentName, setOpponentName] = useState(null);\r\n    const [playerColour, setPlayerColour] = useState(location.state.colour);\r\n    const [takenPieces, setTakenPieces] = useState({\r\n        white: [],\r\n        black: [],\r\n    });\r\n    const [isTurn, setIsTurn] = useState(\r\n        location.state.colour === \"white\" ? true : false\r\n    );\r\n\r\n    /* require(\"../assets/images/pieces/pawn_b.png\"),\r\n    require(\"../assets/images/pieces/queen_b.png\"),\r\n    require(\"../assets/images/pieces/bishop_b.png\"),\r\n    require(\"../assets/images/pieces/king_b.png\"), */\r\n\r\n    const boardRotation = getBoardRotation(playerColour);\r\n    const isWhite = playerColour === \"white\";\r\n    // Sets initial piece positions ensuring that players colour is always at bottom\r\n    const [boardState, setBoardState] = useState(\r\n        initBoardState(isWhite, boardRotation)\r\n    );\r\n    const [prevBoardState, setPrevBoardState] = useState(null);\r\n\r\n    const [audio] = useState({\r\n        check: new Audio(require(\"../assets/sounds/check.mp3\")),\r\n        move: new Audio(require(\"../assets/sounds/move.mp3\")),\r\n        capture: new Audio(require(\"../assets/sounds/capture.ogg\")),\r\n        end: new Audio(require(\"../assets/sounds/game_end.mp3\")),\r\n    });\r\n\r\n    const opponentColour = playerColour === \"white\" ? \"black\" : \"white\";\r\n\r\n    const { sendMessage, readyState } = useWebSocket(\r\n        \"ws://127.0.0.1:8000/ws/\" + room + \"/\",\r\n        {\r\n            onOpen: () => {\r\n                console.log(\"Connected!\");\r\n                sendMessage(\r\n                    JSON.stringify({\r\n                        type: \"send_message\",\r\n                        message: { opponentName: location.state.name },\r\n                        event: \"START\",\r\n                    })\r\n                );\r\n            },\r\n            onClose: () => {\r\n                console.log(\"Disconnected!\");\r\n            },\r\n            onMessage: (e) => {\r\n                const dataFromServer = JSON.parse(e.data);\r\n                switch (dataFromServer.payload.event) {\r\n                    case \"START\":\r\n                        // Only set opponent name once at start\r\n                        if (opponentName === null) {\r\n                            setOpponentName(\r\n                                dataFromServer.payload.message.opponentName\r\n                            );\r\n                            sendMessage(\r\n                                JSON.stringify({\r\n                                    type: \"send_message\",\r\n                                    message: {\r\n                                        opponentName: location.state.name,\r\n                                    },\r\n                                    event: \"START\",\r\n                                })\r\n                            );\r\n                        }\r\n                        break;\r\n\r\n                    case \"END\":\r\n                        // If a player receives the end message, they won\r\n                        setWinner(\r\n                            dataFromServer.payload.message.winnerColour ===\r\n                                playerColour\r\n                        );\r\n                        break;\r\n\r\n                    case \"MOVE\":\r\n                        // Ensure that the message is not from self\r\n                        if (\r\n                            dataFromServer.payload.message.opponent &&\r\n                            dataFromServer.payload.message.opponent.colour !==\r\n                                playerColour\r\n                        ) {\r\n                            const flippedBoard = flipBoard(\r\n                                dataFromServer.payload.message.boardState\r\n                            );\r\n                            // Make sure that the board state has changed\r\n                            // Board must be flipped since the opponent sees it from the other side\r\n                            if (\r\n                                JSON.stringify(flippedBoard) !==\r\n                                JSON.stringify(boardState)\r\n                            ) {\r\n                                setBoardState(flippedBoard);\r\n\r\n                                setTakenPieces(\r\n                                    dataFromServer.payload.message.takenPieces\r\n                                );\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case \"RESTART\":\r\n                        // Reset state and swap colour\r\n                        setWinner(null);\r\n                        setTakenPieces({\r\n                            white: [],\r\n                            black: [],\r\n                        });\r\n                        setPlayerColour(opponentColour);\r\n                        setIsTurn(opponentColour === \"white\");\r\n                        break;\r\n                }\r\n            },\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Reset the board the the colour is swapped\r\n        // Dont do this when first joining a room\r\n        if (prevBoardState !== null) {\r\n            setPrevBoardState(null);\r\n            setBoardState(initBoardState(isWhite, boardRotation));\r\n        }\r\n    }, [playerColour]);\r\n\r\n    const playMoveAudio = () => {\r\n        if (prevBoardState === null) return;\r\n        for (const [piece] of Object.entries(boardState)) {\r\n            // Check if any piece has been taken by comparing the new and old board states\r\n            if (boardState[piece].isAlive !== prevBoardState[piece].isAlive) {\r\n                audio.capture.play();\r\n                return;\r\n            }\r\n        }\r\n        // If no piece has been taken, play the normal move sound\r\n        audio.move.play();\r\n    };\r\n\r\n    const handleCheckmate = () => {\r\n        // Update the kings check state\r\n        let opponentKing, playerKing;\r\n        if (boardState[\"king_w\"].isOwner) {\r\n            opponentKing = boardState[\"king_b\"];\r\n            playerKing = boardState[\"king_w\"];\r\n        } else {\r\n            opponentKing = boardState[\"king_w\"];\r\n            playerKing = boardState[\"king_b\"];\r\n        }\r\n\r\n        if (checkIfOpponentInCheck(boardState, opponentKing)) {\r\n            audio.check.play();\r\n            opponentKing.inCheck = true;\r\n        } else {\r\n            opponentKing.inCheck = false;\r\n        }\r\n        // This state will be updated when on the opponents side and sent to the player\r\n        if (playerKing.inCheck) {\r\n            audio.check.play();\r\n        }\r\n    };\r\n\r\n    const checkForGameOver = () => {\r\n        for (let y = 0; y < 8; y++) {\r\n            for (let x = 0; x < 8; x++) {\r\n                for (const [piece, state] of Object.entries(boardState)) {\r\n                    // If a piece can be moved, the game is not over\r\n                    if (\r\n                        state.isOwner &&\r\n                        state.isAlive &&\r\n                        canMovePiece(\r\n                            x,\r\n                            y,\r\n                            { pieceName: piece, pieceState: state },\r\n                            boardState\r\n                        )\r\n                    )\r\n                        return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Send the current board state to the websocket group\r\n        // Only send message if the board state has changed to avoid infintite loop of sending\r\n        playMoveAudio();\r\n\r\n        handleCheckmate();\r\n\r\n        if (prevBoardState) {\r\n            sendMessage(\r\n                JSON.stringify({\r\n                    type: \"send_message\",\r\n                    message: {\r\n                        boardState,\r\n                        takenPieces,\r\n                        opponent: { name: name, colour: playerColour },\r\n                    },\r\n                    event: \"MOVE\",\r\n                })\r\n            );\r\n\r\n            // True if there are no possible moves, meaning the opponent won\r\n            if (checkForGameOver()) {\r\n                // Tell the other player that they won\r\n                sendMessage(\r\n                    JSON.stringify({\r\n                        type: \"send_message\",\r\n                        message: { winnerColour: opponentColour },\r\n                        event: \"END\",\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        // Swap turns\r\n        setIsTurn((prev) => !prev);\r\n        setPrevBoardState(boardState);\r\n    }, [boardState]);\r\n\r\n    const restartGame = () => {\r\n        // Tell the group to restart game and switch sides\r\n        sendMessage(\r\n            JSON.stringify({\r\n                type: \"send_message\",\r\n                message: null,\r\n                event: \"RESTART\",\r\n            })\r\n        );\r\n    };\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const exitRoom = () => {\r\n        // Return to room join page\r\n        navigate(\"/join\");\r\n    };\r\n\r\n    return (\r\n        <GameContainer>\r\n            <GamePlayer>\r\n                <ButtonWrapper>\r\n                    <Button colour={\"rgb(198, 34, 34)\"} onClick={exitRoom}>\r\n                        Exit\r\n                    </Button>\r\n                </ButtonWrapper>\r\n\r\n                <Player>\r\n                    <PlayerName>{opponentName}</PlayerName>\r\n                    <TakenPieces>\r\n                        {takenPieces[playerColour].map((piecePath, i) => {\r\n                            return <img key={i} src={piecePath} />;\r\n                        })}\r\n                    </TakenPieces>\r\n                </Player>\r\n                <Board\r\n                    boardState={boardState}\r\n                    setBoardState={setBoardState}\r\n                    setTakenPieces={setTakenPieces}\r\n                    isTurn={isTurn}\r\n                />\r\n                <Player>\r\n                    <PlayerName>{name}</PlayerName>\r\n                    <TakenPieces>\r\n                        {takenPieces[opponentColour].map((piecePath, i) => {\r\n                            return <img key={i} src={piecePath} />;\r\n                        })}\r\n                    </TakenPieces>\r\n                </Player>\r\n                <GameOver\r\n                    show={winner !== null}\r\n                    winner={winner}\r\n                    restartGame={restartGame}\r\n                    exitRoom={exitRoom}\r\n                />\r\n            </GamePlayer>\r\n        </GameContainer>\r\n    );\r\n};\r\n\r\nexport default Chess;\r\n\r\nconst getBoardRotation = (colour) => {\r\n    if (colour === \"white\") return { white: [7, 6], black: [0, 1] };\r\n    else if (colour === \"black\") return { white: [0, 1], black: [7, 6] };\r\n    throw \"Colour must be black or white\";\r\n};\r\n\r\nconst flipBoard = (boardState) => {\r\n    for (const [_, state] of Object.entries(boardState)) {\r\n        state.row = 7 - state.row;\r\n        state.isOwner = !state.isOwner;\r\n    }\r\n    return boardState;\r\n};\r\n\r\nexport const initBoardState = (isWhite, boardRotation) => {\r\n    const pieceNames = [\r\n        \"castle_w_1\",\r\n        \"knight_w_1\",\r\n        \"bishop_w_1\",\r\n        \"queen_w\",\r\n        \"king_w\",\r\n        \"bishop_w_2\",\r\n        \"knight_w_2\",\r\n        \"castle_w_2\",\r\n        \"pawn_w_1\",\r\n        \"pawn_w_2\",\r\n        \"pawn_w_3\",\r\n        \"pawn_w_4\",\r\n        \"pawn_w_5\",\r\n        \"pawn_w_6\",\r\n        \"pawn_w_7\",\r\n        \"pawn_w_8\",\r\n        \"castle_b_1\",\r\n        \"knight_b_1\",\r\n        \"bishop_b_1\",\r\n        \"queen_b\",\r\n        \"king_b\",\r\n        \"bishop_b_2\",\r\n        \"knight_b_2\",\r\n        \"castle_b_2\",\r\n        \"pawn_b_1\",\r\n        \"pawn_b_2\",\r\n        \"pawn_b_3\",\r\n        \"pawn_b_4\",\r\n        \"pawn_b_5\",\r\n        \"pawn_b_6\",\r\n        \"pawn_b_7\",\r\n        \"pawn_b_8\",\r\n    ];\r\n    const boardState = {};\r\n    for (let i = 0; i < 32; i++) {\r\n        // First 16 elements in  pieces array are white rest are black\r\n        // Each 8 elements in array is a row\r\n        if (i < 16) {\r\n            let row;\r\n            if (i < 8) row = boardRotation.white[0];\r\n            else row = boardRotation.white[1];\r\n            const properties = {\r\n                row: row,\r\n                col: i % 8,\r\n                hasMoved: false,\r\n                isOwner: isWhite,\r\n                isAlive: true,\r\n            };\r\n            if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\r\n                properties[\"inCheck\"] = false;\r\n                properties[\"hasBeenInCheck\"];\r\n            }\r\n            boardState[pieceNames[i]] = properties;\r\n        } else {\r\n            let row;\r\n            if (i < 24) row = boardRotation.black[0];\r\n            else row = boardRotation.black[1];\r\n            const properties = {\r\n                row: row,\r\n                col: i % 8,\r\n                hasMoved: false,\r\n                isOwner: !isWhite,\r\n                isAlive: true,\r\n            };\r\n            if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\r\n                properties[\"inCheck\"] = false;\r\n            }\r\n            boardState[pieceNames[i]] = properties;\r\n        }\r\n    }\r\n    return boardState;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,IAAuBC,UAAvB,QAAyC,qBAAzC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;AACA,SACIC,aADJ,EAEIC,UAFJ,EAGIC,MAHJ,EAIIC,WAJJ,EAKIC,aALJ,EAMIC,UANJ,QAOO,gBAPP;AAQA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,sBAAT,EAAiCC,YAAjC,QAAqD,oBAArD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,MAAT,QAAuB,gCAAvB;;;AAEA,MAAMC,KAAK,GAAG,MAAM;EAAA;;EAChB,MAAMC,QAAQ,GAAGd,WAAW,EAA5B;EAEA,MAAM,CAACe,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,IAAD,CAApC;EACA,MAAM,CAACqB,IAAD,IAASrB,QAAQ,CAACkB,QAAQ,CAACI,KAAT,CAAeD,IAAhB,CAAvB;EACA,MAAM,CAACE,IAAD,IAASvB,QAAQ,CAACkB,QAAQ,CAACI,KAAT,CAAeC,IAAhB,CAAvB;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCzB,QAAQ,CAAC,IAAD,CAAhD;EACA,MAAM,CAAC0B,YAAD,EAAeC,eAAf,IAAkC3B,QAAQ,CAACkB,QAAQ,CAACI,KAAT,CAAeM,MAAhB,CAAhD;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAAC;IAC3C+B,KAAK,EAAE,EADoC;IAE3CC,KAAK,EAAE;EAFoC,CAAD,CAA9C;EAIA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBlC,QAAQ,CAChCkB,QAAQ,CAACI,KAAT,CAAeM,MAAf,KAA0B,OAA1B,GAAoC,IAApC,GAA2C,KADX,CAApC;EAIA;AACJ;AACA;AACA;;EAEI,MAAMO,aAAa,GAAGC,gBAAgB,CAACV,YAAD,CAAtC;EACA,MAAMW,OAAO,GAAGX,YAAY,KAAK,OAAjC,CAtBgB,CAuBhB;;EACA,MAAM,CAACY,UAAD,EAAaC,aAAb,IAA8BvC,QAAQ,CACxCwC,cAAc,CAACH,OAAD,EAAUF,aAAV,CAD0B,CAA5C;EAGA,MAAM,CAACM,cAAD,EAAiBC,iBAAjB,IAAsC1C,QAAQ,CAAC,IAAD,CAApD;EAEA,MAAM,CAAC2C,KAAD,IAAU3C,QAAQ,CAAC;IACrB4C,KAAK,EAAE,IAAIC,KAAJ,CAAUC,OAAO,CAAC,4BAAD,CAAjB,CADc;IAErBC,IAAI,EAAE,IAAIF,KAAJ,CAAUC,OAAO,CAAC,2BAAD,CAAjB,CAFe;IAGrBE,OAAO,EAAE,IAAIH,KAAJ,CAAUC,OAAO,CAAC,8BAAD,CAAjB,CAHY;IAIrBG,GAAG,EAAE,IAAIJ,KAAJ,CAAUC,OAAO,CAAC,+BAAD,CAAjB;EAJgB,CAAD,CAAxB;EAOA,MAAMI,cAAc,GAAGxB,YAAY,KAAK,OAAjB,GAA2B,OAA3B,GAAqC,OAA5D;EAEA,MAAM;IAAEyB,WAAF;IAAeC;EAAf,IAA8BlD,YAAY,CAC5C,4BAA4BmB,IAA5B,GAAmC,GADS,EAE5C;IACIgC,MAAM,EAAE,MAAM;MACVC,OAAO,CAACC,GAAR,CAAY,YAAZ;MACAJ,WAAW,CACPK,IAAI,CAACC,SAAL,CAAe;QACXC,IAAI,EAAE,cADK;QAEXC,OAAO,EAAE;UAAEnC,YAAY,EAAEN,QAAQ,CAACI,KAAT,CAAeC;QAA/B,CAFE;QAGXqC,KAAK,EAAE;MAHI,CAAf,CADO,CAAX;IAOH,CAVL;IAWIC,OAAO,EAAE,MAAM;MACXP,OAAO,CAACC,GAAR,CAAY,eAAZ;IACH,CAbL;IAcIO,SAAS,EAAGC,CAAD,IAAO;MACd,MAAMC,cAAc,GAAGR,IAAI,CAACS,KAAL,CAAWF,CAAC,CAACG,IAAb,CAAvB;;MACA,QAAQF,cAAc,CAACG,OAAf,CAAuBP,KAA/B;QACI,KAAK,OAAL;UACI;UACA,IAAIpC,YAAY,KAAK,IAArB,EAA2B;YACvBC,eAAe,CACXuC,cAAc,CAACG,OAAf,CAAuBR,OAAvB,CAA+BnC,YADpB,CAAf;YAGA2B,WAAW,CACPK,IAAI,CAACC,SAAL,CAAe;cACXC,IAAI,EAAE,cADK;cAEXC,OAAO,EAAE;gBACLnC,YAAY,EAAEN,QAAQ,CAACI,KAAT,CAAeC;cADxB,CAFE;cAKXqC,KAAK,EAAE;YALI,CAAf,CADO,CAAX;UASH;;UACD;;QAEJ,KAAK,KAAL;UACI;UACAxC,SAAS,CACL4C,cAAc,CAACG,OAAf,CAAuBR,OAAvB,CAA+BS,YAA/B,KACI1C,YAFC,CAAT;UAIA;;QAEJ,KAAK,MAAL;UACI;UACA,IACIsC,cAAc,CAACG,OAAf,CAAuBR,OAAvB,CAA+BU,QAA/B,IACAL,cAAc,CAACG,OAAf,CAAuBR,OAAvB,CAA+BU,QAA/B,CAAwCzC,MAAxC,KACIF,YAHR,EAIE;YACE,MAAM4C,YAAY,GAAGC,SAAS,CAC1BP,cAAc,CAACG,OAAf,CAAuBR,OAAvB,CAA+BrB,UADL,CAA9B,CADF,CAIE;YACA;;YACA,IACIkB,IAAI,CAACC,SAAL,CAAea,YAAf,MACAd,IAAI,CAACC,SAAL,CAAenB,UAAf,CAFJ,EAGE;cACEC,aAAa,CAAC+B,YAAD,CAAb;cAEAxC,cAAc,CACVkC,cAAc,CAACG,OAAf,CAAuBR,OAAvB,CAA+B9B,WADrB,CAAd;YAGH;UACJ;;UACD;;QAEJ,KAAK,SAAL;UACI;UACAT,SAAS,CAAC,IAAD,CAAT;UACAU,cAAc,CAAC;YACXC,KAAK,EAAE,EADI;YAEXC,KAAK,EAAE;UAFI,CAAD,CAAd;UAIAL,eAAe,CAACuB,cAAD,CAAf;UACAhB,SAAS,CAACgB,cAAc,KAAK,OAApB,CAAT;UACA;MA7DR;IA+DH;EA/EL,CAF4C,CAAhD;EAqFAjD,SAAS,CAAC,MAAM;IACZ;IACA;IACA,IAAIwC,cAAc,KAAK,IAAvB,EAA6B;MACzBC,iBAAiB,CAAC,IAAD,CAAjB;MACAH,aAAa,CAACC,cAAc,CAACH,OAAD,EAAUF,aAAV,CAAf,CAAb;IACH;EACJ,CAPQ,EAON,CAACT,YAAD,CAPM,CAAT;;EASA,MAAM8C,aAAa,GAAG,MAAM;IACxB,IAAI/B,cAAc,KAAK,IAAvB,EAA6B;;IAC7B,KAAK,MAAM,CAACgC,KAAD,CAAX,IAAsBC,MAAM,CAACC,OAAP,CAAerC,UAAf,CAAtB,EAAkD;MAC9C;MACA,IAAIA,UAAU,CAACmC,KAAD,CAAV,CAAkBG,OAAlB,KAA8BnC,cAAc,CAACgC,KAAD,CAAd,CAAsBG,OAAxD,EAAiE;QAC7DjC,KAAK,CAACK,OAAN,CAAc6B,IAAd;QACA;MACH;IACJ,CARuB,CASxB;;;IACAlC,KAAK,CAACI,IAAN,CAAW8B,IAAX;EACH,CAXD;;EAaA,MAAMC,eAAe,GAAG,MAAM;IAC1B;IACA,IAAIC,YAAJ,EAAkBC,UAAlB;;IACA,IAAI1C,UAAU,CAAC,QAAD,CAAV,CAAqB2C,OAAzB,EAAkC;MAC9BF,YAAY,GAAGzC,UAAU,CAAC,QAAD,CAAzB;MACA0C,UAAU,GAAG1C,UAAU,CAAC,QAAD,CAAvB;IACH,CAHD,MAGO;MACHyC,YAAY,GAAGzC,UAAU,CAAC,QAAD,CAAzB;MACA0C,UAAU,GAAG1C,UAAU,CAAC,QAAD,CAAvB;IACH;;IAED,IAAIzB,sBAAsB,CAACyB,UAAD,EAAayC,YAAb,CAA1B,EAAsD;MAClDpC,KAAK,CAACC,KAAN,CAAYiC,IAAZ;MACAE,YAAY,CAACG,OAAb,GAAuB,IAAvB;IACH,CAHD,MAGO;MACHH,YAAY,CAACG,OAAb,GAAuB,KAAvB;IACH,CAhByB,CAiB1B;;;IACA,IAAIF,UAAU,CAACE,OAAf,EAAwB;MACpBvC,KAAK,CAACC,KAAN,CAAYiC,IAAZ;IACH;EACJ,CArBD;;EAuBA,MAAMM,gBAAgB,GAAG,MAAM;IAC3B,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MACxB,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;QACxB,KAAK,MAAM,CAACZ,KAAD,EAAQnD,KAAR,CAAX,IAA6BoD,MAAM,CAACC,OAAP,CAAerC,UAAf,CAA7B,EAAyD;UACrD;UACA,IACIhB,KAAK,CAAC2D,OAAN,IACA3D,KAAK,CAACsD,OADN,IAEA9D,YAAY,CACRuE,CADQ,EAERD,CAFQ,EAGR;YAAEE,SAAS,EAAEb,KAAb;YAAoBc,UAAU,EAAEjE;UAAhC,CAHQ,EAIRgB,UAJQ,CAHhB,EAUI,OAAO,KAAP;QACP;MACJ;IACJ;;IACD,OAAO,IAAP;EACH,CApBD;;EAsBArC,SAAS,CAAC,MAAM;IACZ;IACA;IACAuE,aAAa;IAEbM,eAAe;;IAEf,IAAIrC,cAAJ,EAAoB;MAChBU,WAAW,CACPK,IAAI,CAACC,SAAL,CAAe;QACXC,IAAI,EAAE,cADK;QAEXC,OAAO,EAAE;UACLrB,UADK;UAELT,WAFK;UAGLwC,QAAQ,EAAE;YAAE9C,IAAI,EAAEA,IAAR;YAAcK,MAAM,EAAEF;UAAtB;QAHL,CAFE;QAOXkC,KAAK,EAAE;MAPI,CAAf,CADO,CAAX,CADgB,CAahB;;MACA,IAAIuB,gBAAgB,EAApB,EAAwB;QACpB;QACAhC,WAAW,CACPK,IAAI,CAACC,SAAL,CAAe;UACXC,IAAI,EAAE,cADK;UAEXC,OAAO,EAAE;YAAES,YAAY,EAAElB;UAAhB,CAFE;UAGXU,KAAK,EAAE;QAHI,CAAf,CADO,CAAX;MAOH;IACJ,CA/BW,CAiCZ;;;IACA1B,SAAS,CAAEsD,IAAD,IAAU,CAACA,IAAZ,CAAT;IACA9C,iBAAiB,CAACJ,UAAD,CAAjB;EACH,CApCQ,EAoCN,CAACA,UAAD,CApCM,CAAT;;EAsCA,MAAMmD,WAAW,GAAG,MAAM;IACtB;IACAtC,WAAW,CACPK,IAAI,CAACC,SAAL,CAAe;MACXC,IAAI,EAAE,cADK;MAEXC,OAAO,EAAE,IAFE;MAGXC,KAAK,EAAE;IAHI,CAAf,CADO,CAAX;EAOH,CATD;;EAWA,MAAM8B,QAAQ,GAAGrF,WAAW,EAA5B;;EAEA,MAAMsF,QAAQ,GAAG,MAAM;IACnB;IACAD,QAAQ,CAAC,OAAD,CAAR;EACH,CAHD;;EAKA,oBACI,QAAC,aAAD;IAAA,uBACI,QAAC,UAAD;MAAA,wBACI,QAAC,aAAD;QAAA,uBACI,QAAC,MAAD;UAAQ,MAAM,EAAE,kBAAhB;UAAoC,OAAO,EAAEC,QAA7C;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADJ,eAOI,QAAC,MAAD;QAAA,wBACI,QAAC,UAAD;UAAA,UAAanE;QAAb;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI,QAAC,WAAD;UAAA,UACKK,WAAW,CAACH,YAAD,CAAX,CAA0BkE,GAA1B,CAA8B,CAACC,SAAD,EAAYC,CAAZ,KAAkB;YAC7C,oBAAO;cAAa,GAAG,EAAED;YAAlB,GAAUC,CAAV;cAAA;cAAA;cAAA;YAAA,QAAP;UACH,CAFA;QADL;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAPJ,eAeI,QAAC,KAAD;QACI,UAAU,EAAExD,UADhB;QAEI,aAAa,EAAEC,aAFnB;QAGI,cAAc,EAAET,cAHpB;QAII,MAAM,EAAEG;MAJZ;QAAA;QAAA;QAAA;MAAA,QAfJ,eAqBI,QAAC,MAAD;QAAA,wBACI,QAAC,UAAD;UAAA,UAAaV;QAAb;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI,QAAC,WAAD;UAAA,UACKM,WAAW,CAACqB,cAAD,CAAX,CAA4B0C,GAA5B,CAAgC,CAACC,SAAD,EAAYC,CAAZ,KAAkB;YAC/C,oBAAO;cAAa,GAAG,EAAED;YAAlB,GAAUC,CAAV;cAAA;cAAA;cAAA;YAAA,QAAP;UACH,CAFA;QADL;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QArBJ,eA6BI,QAAC,QAAD;QACI,IAAI,EAAE3E,MAAM,KAAK,IADrB;QAEI,MAAM,EAAEA,MAFZ;QAGI,WAAW,EAAEsE,WAHjB;QAII,QAAQ,EAAEE;MAJd;QAAA;QAAA;QAAA;MAAA,QA7BJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAwCH,CA9RD;;GAAM1E,K;UACeb,W,EAqCmBF,Y,EAyMnBG,W;;;KA/OfY,K;AAgSN,eAAeA,KAAf;;AAEA,MAAMmB,gBAAgB,GAAIR,MAAD,IAAY;EACjC,IAAIA,MAAM,KAAK,OAAf,EAAwB,OAAO;IAAEG,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAAT;IAAiBC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;EAAxB,CAAP,CAAxB,KACK,IAAIJ,MAAM,KAAK,OAAf,EAAwB,OAAO;IAAEG,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAAT;IAAiBC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;EAAxB,CAAP;EAC7B,MAAM,+BAAN;AACH,CAJD;;AAMA,MAAMuC,SAAS,GAAIjC,UAAD,IAAgB;EAC9B,KAAK,MAAM,CAACyD,CAAD,EAAIzE,KAAJ,CAAX,IAAyBoD,MAAM,CAACC,OAAP,CAAerC,UAAf,CAAzB,EAAqD;IACjDhB,KAAK,CAAC0E,GAAN,GAAY,IAAI1E,KAAK,CAAC0E,GAAtB;IACA1E,KAAK,CAAC2D,OAAN,GAAgB,CAAC3D,KAAK,CAAC2D,OAAvB;EACH;;EACD,OAAO3C,UAAP;AACH,CAND;;AAQA,OAAO,MAAME,cAAc,GAAG,CAACH,OAAD,EAAUF,aAAV,KAA4B;EACtD,MAAM8D,UAAU,GAAG,CACf,YADe,EAEf,YAFe,EAGf,YAHe,EAIf,SAJe,EAKf,QALe,EAMf,YANe,EAOf,YAPe,EAQf,YARe,EASf,UATe,EAUf,UAVe,EAWf,UAXe,EAYf,UAZe,EAaf,UAbe,EAcf,UAde,EAef,UAfe,EAgBf,UAhBe,EAiBf,YAjBe,EAkBf,YAlBe,EAmBf,YAnBe,EAoBf,SApBe,EAqBf,QArBe,EAsBf,YAtBe,EAuBf,YAvBe,EAwBf,YAxBe,EAyBf,UAzBe,EA0Bf,UA1Be,EA2Bf,UA3Be,EA4Bf,UA5Be,EA6Bf,UA7Be,EA8Bf,UA9Be,EA+Bf,UA/Be,EAgCf,UAhCe,CAAnB;EAkCA,MAAM3D,UAAU,GAAG,EAAnB;;EACA,KAAK,IAAIwD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;IACzB;IACA;IACA,IAAIA,CAAC,GAAG,EAAR,EAAY;MACR,IAAIE,GAAJ;MACA,IAAIF,CAAC,GAAG,CAAR,EAAWE,GAAG,GAAG7D,aAAa,CAACJ,KAAd,CAAoB,CAApB,CAAN,CAAX,KACKiE,GAAG,GAAG7D,aAAa,CAACJ,KAAd,CAAoB,CAApB,CAAN;MACL,MAAMmE,UAAU,GAAG;QACfF,GAAG,EAAEA,GADU;QAEfG,GAAG,EAAEL,CAAC,GAAG,CAFM;QAGfM,QAAQ,EAAE,KAHK;QAIfnB,OAAO,EAAE5C,OAJM;QAKfuC,OAAO,EAAE;MALM,CAAnB;;MAOA,IAAIqB,UAAU,CAACH,CAAD,CAAV,KAAkB,QAAlB,IAA8BG,UAAU,CAACH,CAAD,CAAV,KAAkB,QAApD,EAA8D;QAC1DI,UAAU,CAAC,SAAD,CAAV,GAAwB,KAAxB;QACAA,UAAU,CAAC,gBAAD,CAAV;MACH;;MACD5D,UAAU,CAAC2D,UAAU,CAACH,CAAD,CAAX,CAAV,GAA4BI,UAA5B;IACH,CAhBD,MAgBO;MACH,IAAIF,GAAJ;MACA,IAAIF,CAAC,GAAG,EAAR,EAAYE,GAAG,GAAG7D,aAAa,CAACH,KAAd,CAAoB,CAApB,CAAN,CAAZ,KACKgE,GAAG,GAAG7D,aAAa,CAACH,KAAd,CAAoB,CAApB,CAAN;MACL,MAAMkE,UAAU,GAAG;QACfF,GAAG,EAAEA,GADU;QAEfG,GAAG,EAAEL,CAAC,GAAG,CAFM;QAGfM,QAAQ,EAAE,KAHK;QAIfnB,OAAO,EAAE,CAAC5C,OAJK;QAKfuC,OAAO,EAAE;MALM,CAAnB;;MAOA,IAAIqB,UAAU,CAACH,CAAD,CAAV,KAAkB,QAAlB,IAA8BG,UAAU,CAACH,CAAD,CAAV,KAAkB,QAApD,EAA8D;QAC1DI,UAAU,CAAC,SAAD,CAAV,GAAwB,KAAxB;MACH;;MACD5D,UAAU,CAAC2D,UAAU,CAACH,CAAD,CAAX,CAAV,GAA4BI,UAA5B;IACH;EACJ;;EACD,OAAO5D,UAAP;AACH,CAzEM"},"metadata":{},"sourceType":"module"}