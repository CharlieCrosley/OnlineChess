{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\charl\\\\Documents\\\\Code\\\\Web Dev\\\\Chess-Online\\\\chessproject\\\\frontend\\\\src\\\\pages\\\\Chess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { GameContainer, GamePlayer } from \"./GameElements\";\nimport Board from \"../components/Board\";\nimport { initBoardState } from \"../components/BoardState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chess = () => {\n  _s();\n\n  const [room, setRoom] = useState(1);\n  const [playerColour, setColour] = useState(\"white\");\n  const {\n    readyState\n  } = useWebSocket(\"ws://127.0.0.1:8000/ws/\" + room + \"/\", {\n    onOpen: () => {\n      console.log(\"Connected!\");\n    },\n    onClose: () => {\n      console.log(\"Disconnected!\");\n    },\n    onMessage: e => {\n      const dataFromServer = JSON.parse(e.data);\n      console.log(dataFromServer);\n    }\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: \"Connecting\",\n    [ReadyState.OPEN]: \"Open\",\n    [ReadyState.CLOSING]: \"Closing\",\n    [ReadyState.CLOSED]: \"Closed\",\n    [ReadyState.UNINSTANTIATED]: \"Uninstantiated\"\n  }[readyState];\n\n  const getBoardRotation = colour => {\n    if (colour === \"white\") return {\n      white: [7, 6],\n      black: [0, 1]\n    };else if (colour === \"black\") return {\n      white: [0, 1],\n      black: [7, 6]\n    };\n    throw \"Colour must be black or white\";\n  };\n\n  const boardRotation = getBoardRotation(playerColour);\n  const isWhite = playerColour === \"white\"; // Sets initial piece positions ensuring that players colour is always at bottom\n\n  const [boardState, setBoardState] = useState(initBoardState(isWhite, boardRotation));\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    children: [/*#__PURE__*/_jsxDEV(PlayerScore, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GamePlayer, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"The WebSocket is currently \", connectionStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        boardState: boardState,\n        setBoardState: setBoardState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PlayerScore, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chess, \"IJzhR36scMBk3jQWIncxmAzoPCA=\", false, function () {\n  return [useWebSocket];\n});\n\n_c = Chess;\nexport default Chess;\n/* var roomCode = document.getElementById(\"game_board\").getAttribute(\"room_code\");\r\nvar char_choice = document\r\n    .getElementById(\"game_board\")\r\n    .getAttribute(\"char_choice\");\r\n\r\nvar connectionString =\r\n    \"ws://\" + window.location.host + \"/ws/play/\" + roomCode + \"/\";\r\nvar gameSocket = new WebSocket(connectionString);\r\n\r\nlet myturn = true;\r\n\r\nfunction make_move(index, player) {\r\n    index = parseInt(index);\r\n    let data = {\r\n        event: \"MOVE\",\r\n        message: {\r\n            index: index,\r\n            player: player,\r\n        },\r\n    };\r\n\r\n    if (gameBoard[index] == -1) {\r\n        moveCount++;\r\n        if (player == \"X\") gameBoard[index] = 1;\r\n        else if (player == \"O\") gameBoard[index] = 0;\r\n        else {\r\n            alert(\"Invalid character choice\");\r\n            return false;\r\n        }\r\n        gameSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    elementArray[index].innerHTML = player;\r\n    const win = checkWinner();\r\n    if (myturn) {\r\n        if (win) {\r\n            data = {\r\n                event: \"END\",\r\n                message: `${player} is a winner. Play again?`,\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        } else if (!win && moveCount == 9) {\r\n            data = {\r\n                event: \"END\",\r\n                message: \"It's a draw. Play again?\",\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        }\r\n    }\r\n}\r\n\r\nfunction connect() {\r\n    gameSocket.onopen = function open() {\r\n        console.log(\"WebSockets connection created.\");\r\n        gameSocket.send(\r\n            JSON.stringify({\r\n                event: \"START\",\r\n                message: \"\",\r\n            })\r\n        );\r\n    };\r\n\r\n    gameSocket.onclose = function (e) {\r\n        console.log(\r\n            \"Socket is closed. Reconnect will be attempted in 1 second.\",\r\n            e.reason\r\n        );\r\n        setTimeout(function () {\r\n            connect();\r\n        }, 1000);\r\n    };\r\n    // Sending the info about the room\r\n    gameSocket.onmessage = function (e) {\r\n        let data = JSON.parse(e.data);\r\n        data = data[\"payload\"];\r\n        let message = data[\"message\"];\r\n        let event = data[\"event\"];\r\n        switch (event) {\r\n            case \"START\":\r\n                //reset();\r\n                break;\r\n            case \"END\":\r\n                alert(message);\r\n                //reset();\r\n                break;\r\n            case \"MOVE\":\r\n                if (message[\"player\"] != char_choice) {\r\n                    make_move(message[\"index\"], message[\"player\"]);\r\n                    myturn = true;\r\n                    document.getElementById(\"alert_move\").style.display =\r\n                        \"inline\";\r\n                }\r\n                break;\r\n            default:\r\n                console.log(\"No event\");\r\n        }\r\n    };\r\n\r\n    if (gameSocket.readyState == WebSocket.OPEN) {\r\n        gameSocket.onopen();\r\n    }\r\n}\r\n\r\nconnect(); */\n\nvar _c;\n\n$RefreshReg$(_c, \"Chess\");","map":{"version":3,"names":["React","useState","useWebSocket","ReadyState","GameContainer","GamePlayer","Board","initBoardState","Chess","room","setRoom","playerColour","setColour","readyState","onOpen","console","log","onClose","onMessage","e","dataFromServer","JSON","parse","data","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","getBoardRotation","colour","white","black","boardRotation","isWhite","boardState","setBoardState"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/pages/Chess.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport { GameContainer, GamePlayer } from \"./GameElements\";\r\nimport Board from \"../components/Board\";\r\nimport { initBoardState } from \"../components/BoardState\";\r\n\r\nconst Chess = () => {\r\n    const [room, setRoom] = useState(1);\r\n    const [playerColour, setColour] = useState(\"white\");\r\n\r\n    const { readyState } = useWebSocket(\r\n        \"ws://127.0.0.1:8000/ws/\" + room + \"/\",\r\n        {\r\n            onOpen: () => {\r\n                console.log(\"Connected!\");\r\n            },\r\n            onClose: () => {\r\n                console.log(\"Disconnected!\");\r\n            },\r\n            onMessage: (e) => {\r\n                const dataFromServer = JSON.parse(e.data);\r\n                console.log(dataFromServer);\r\n            },\r\n        }\r\n    );\r\n\r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: \"Connecting\",\r\n        [ReadyState.OPEN]: \"Open\",\r\n        [ReadyState.CLOSING]: \"Closing\",\r\n        [ReadyState.CLOSED]: \"Closed\",\r\n        [ReadyState.UNINSTANTIATED]: \"Uninstantiated\",\r\n    }[readyState];\r\n\r\n    const getBoardRotation = (colour) => {\r\n        if (colour === \"white\") return { white: [7, 6], black: [0, 1] };\r\n        else if (colour === \"black\") return { white: [0, 1], black: [7, 6] };\r\n        throw \"Colour must be black or white\";\r\n    };\r\n\r\n    const boardRotation = getBoardRotation(playerColour);\r\n    const isWhite = playerColour === \"white\";\r\n\r\n    // Sets initial piece positions ensuring that players colour is always at bottom\r\n    const [boardState, setBoardState] = useState(\r\n        initBoardState(isWhite, boardRotation)\r\n    );\r\n\r\n    return (\r\n        <GameContainer>\r\n            <PlayerScore></PlayerScore>\r\n            <GamePlayer>\r\n                <div>The WebSocket is currently {connectionStatus}</div>\r\n                <Board boardState={boardState} setBoardState={setBoardState} />\r\n            </GamePlayer>\r\n            <PlayerScore></PlayerScore>\r\n        </GameContainer>\r\n    );\r\n};\r\n\r\nexport default Chess;\r\n\r\n/* var roomCode = document.getElementById(\"game_board\").getAttribute(\"room_code\");\r\nvar char_choice = document\r\n    .getElementById(\"game_board\")\r\n    .getAttribute(\"char_choice\");\r\n\r\nvar connectionString =\r\n    \"ws://\" + window.location.host + \"/ws/play/\" + roomCode + \"/\";\r\nvar gameSocket = new WebSocket(connectionString);\r\n\r\nlet myturn = true;\r\n\r\nfunction make_move(index, player) {\r\n    index = parseInt(index);\r\n    let data = {\r\n        event: \"MOVE\",\r\n        message: {\r\n            index: index,\r\n            player: player,\r\n        },\r\n    };\r\n\r\n    if (gameBoard[index] == -1) {\r\n        moveCount++;\r\n        if (player == \"X\") gameBoard[index] = 1;\r\n        else if (player == \"O\") gameBoard[index] = 0;\r\n        else {\r\n            alert(\"Invalid character choice\");\r\n            return false;\r\n        }\r\n        gameSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    elementArray[index].innerHTML = player;\r\n    const win = checkWinner();\r\n    if (myturn) {\r\n        if (win) {\r\n            data = {\r\n                event: \"END\",\r\n                message: `${player} is a winner. Play again?`,\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        } else if (!win && moveCount == 9) {\r\n            data = {\r\n                event: \"END\",\r\n                message: \"It's a draw. Play again?\",\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        }\r\n    }\r\n}\r\n\r\nfunction connect() {\r\n    gameSocket.onopen = function open() {\r\n        console.log(\"WebSockets connection created.\");\r\n        gameSocket.send(\r\n            JSON.stringify({\r\n                event: \"START\",\r\n                message: \"\",\r\n            })\r\n        );\r\n    };\r\n\r\n    gameSocket.onclose = function (e) {\r\n        console.log(\r\n            \"Socket is closed. Reconnect will be attempted in 1 second.\",\r\n            e.reason\r\n        );\r\n        setTimeout(function () {\r\n            connect();\r\n        }, 1000);\r\n    };\r\n    // Sending the info about the room\r\n    gameSocket.onmessage = function (e) {\r\n        let data = JSON.parse(e.data);\r\n        data = data[\"payload\"];\r\n        let message = data[\"message\"];\r\n        let event = data[\"event\"];\r\n        switch (event) {\r\n            case \"START\":\r\n                //reset();\r\n                break;\r\n            case \"END\":\r\n                alert(message);\r\n                //reset();\r\n                break;\r\n            case \"MOVE\":\r\n                if (message[\"player\"] != char_choice) {\r\n                    make_move(message[\"index\"], message[\"player\"]);\r\n                    myturn = true;\r\n                    document.getElementById(\"alert_move\").style.display =\r\n                        \"inline\";\r\n                }\r\n                break;\r\n            default:\r\n                console.log(\"No event\");\r\n        }\r\n    };\r\n\r\n    if (gameSocket.readyState == WebSocket.OPEN) {\r\n        gameSocket.onopen();\r\n    }\r\n}\r\n\r\nconnect(); */\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,IAAuBC,UAAvB,QAAyC,qBAAzC;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,gBAA1C;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,cAAT,QAA+B,0BAA/B;;;AAEA,MAAMC,KAAK,GAAG,MAAM;EAAA;;EAChB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,CAAD,CAAhC;EACA,MAAM,CAACU,YAAD,EAAeC,SAAf,IAA4BX,QAAQ,CAAC,OAAD,CAA1C;EAEA,MAAM;IAAEY;EAAF,IAAiBX,YAAY,CAC/B,4BAA4BO,IAA5B,GAAmC,GADJ,EAE/B;IACIK,MAAM,EAAE,MAAM;MACVC,OAAO,CAACC,GAAR,CAAY,YAAZ;IACH,CAHL;IAIIC,OAAO,EAAE,MAAM;MACXF,OAAO,CAACC,GAAR,CAAY,eAAZ;IACH,CANL;IAOIE,SAAS,EAAGC,CAAD,IAAO;MACd,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,IAAb,CAAvB;MACAR,OAAO,CAACC,GAAR,CAAYI,cAAZ;IACH;EAVL,CAF+B,CAAnC;EAgBA,MAAMI,gBAAgB,GAAG;IACrB,CAACrB,UAAU,CAACsB,UAAZ,GAAyB,YADJ;IAErB,CAACtB,UAAU,CAACuB,IAAZ,GAAmB,MAFE;IAGrB,CAACvB,UAAU,CAACwB,OAAZ,GAAsB,SAHD;IAIrB,CAACxB,UAAU,CAACyB,MAAZ,GAAqB,QAJA;IAKrB,CAACzB,UAAU,CAAC0B,cAAZ,GAA6B;EALR,EAMvBhB,UANuB,CAAzB;;EAQA,MAAMiB,gBAAgB,GAAIC,MAAD,IAAY;IACjC,IAAIA,MAAM,KAAK,OAAf,EAAwB,OAAO;MAAEC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAAT;MAAiBC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;IAAxB,CAAP,CAAxB,KACK,IAAIF,MAAM,KAAK,OAAf,EAAwB,OAAO;MAAEC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAAT;MAAiBC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;IAAxB,CAAP;IAC7B,MAAM,+BAAN;EACH,CAJD;;EAMA,MAAMC,aAAa,GAAGJ,gBAAgB,CAACnB,YAAD,CAAtC;EACA,MAAMwB,OAAO,GAAGxB,YAAY,KAAK,OAAjC,CAnCgB,CAqChB;;EACA,MAAM,CAACyB,UAAD,EAAaC,aAAb,IAA8BpC,QAAQ,CACxCM,cAAc,CAAC4B,OAAD,EAAUD,aAAV,CAD0B,CAA5C;EAIA,oBACI,QAAC,aAAD;IAAA,wBACI,QAAC,WAAD;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI,QAAC,UAAD;MAAA,wBACI;QAAA,0CAAiCV,gBAAjC;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,KAAD;QAAO,UAAU,EAAEY,UAAnB;QAA+B,aAAa,EAAEC;MAA9C;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eAMI,QAAC,WAAD;MAAA;MAAA;MAAA;IAAA,QANJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAUH,CApDD;;GAAM7B,K;UAIqBN,Y;;;KAJrBM,K;AAsDN,eAAeA,KAAf},"metadata":{},"sourceType":"module"}