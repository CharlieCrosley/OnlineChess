{"ast":null,"code":"import _defineProperty from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _slicedToArray from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";import useWebSocket,{ReadyState}from\"react-use-websocket\";import{GameContainer,GamePlayer,Player,TakenPieces}from\"./GameElements\";import Board from\"../components/Board\";import{initBoardState}from\"../components/BoardState\";import{useEffect}from\"react\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var Chess=function Chess(){var _ReadyState$CONNECTIN;var _useState=useState(1),_useState2=_slicedToArray(_useState,2),room=_useState2[0],setRoom=_useState2[1];var _useState3=useState(\"white\"),_useState4=_slicedToArray(_useState3,2),playerColour=_useState4[0],setColour=_useState4[1];var _useState5=useState({white:[],black:[]}),_useState6=_slicedToArray(_useState5,2),takenPieces=_useState6[0],setTakenPieces=_useState6[1];var _useWebSocket=useWebSocket(\"ws://127.0.0.1:8000/ws/\"+room+\"/\",{onOpen:function onOpen(){console.log(\"Connected!\");},onClose:function onClose(){console.log(\"Disconnected!\");},onMessage:function onMessage(e){//console.log(e);\nvar dataFromServer=JSON.parse(e.data);console.log(dataFromServer);}}),sendMessage=_useWebSocket.sendMessage,lastMessage=_useWebSocket.lastMessage,readyState=_useWebSocket.readyState;var connectionStatus=(_ReadyState$CONNECTIN={},_defineProperty(_ReadyState$CONNECTIN,ReadyState.CONNECTING,\"Connecting\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.OPEN,\"Open\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.CLOSING,\"Closing\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.CLOSED,\"Closed\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.UNINSTANTIATED,\"Uninstantiated\"),_ReadyState$CONNECTIN)[readyState];var getBoardRotation=function getBoardRotation(colour){if(colour===\"white\")return{white:[7,6],black:[0,1]};else if(colour===\"black\")return{white:[0,1],black:[7,6]};throw\"Colour must be black or white\";};var boardRotation=getBoardRotation(playerColour);var isWhite=playerColour===\"white\";// Sets initial piece positions ensuring that players colour is always at bottom\nvar _useState7=useState(initBoardState(isWhite,boardRotation)),_useState8=_slicedToArray(_useState7,2),boardState=_useState8[0],setBoardState=_useState8[1];useEffect(function(){//console.log(boardState);\n//console.log(JSON.stringify(boardState));\nsendMessage(JSON.stringify({type:\"send_message\",message:boardState,event:\"MOVE\"}));},[boardState]);var opponentColour=playerColour===\"white\"?\"black\":\"white\";return/*#__PURE__*/_jsx(GameContainer,{children:/*#__PURE__*/_jsxs(GamePlayer,{children:[/*#__PURE__*/_jsxs(\"div\",{style:{color:\"white\"},children:[\"The WebSocket is currently \",connectionStatus]}),/*#__PURE__*/_jsxs(Player,{children:[/*#__PURE__*/_jsx(\"div\",{children:\"Name\"}),/*#__PURE__*/_jsx(TakenPieces,{})]}),/*#__PURE__*/_jsx(Board,{boardState:boardState,setBoardState:setBoardState,setTakenPieces:setTakenPieces}),/*#__PURE__*/_jsxs(Player,{children:[/*#__PURE__*/_jsx(\"div\",{children:\"Name\"}),/*#__PURE__*/_jsx(TakenPieces,{children:takenPieces[opponentColour].map(function(piecePath,i){return/*#__PURE__*/_jsx(\"img\",{src:piecePath});})})]})]})});};export default Chess;/* var roomCode = document.getElementById(\"game_board\").getAttribute(\"room_code\");\r\nvar char_choice = document\r\n    .getElementById(\"game_board\")\r\n    .getAttribute(\"char_choice\");\r\n\r\nvar connectionString =\r\n    \"ws://\" + window.location.host + \"/ws/play/\" + roomCode + \"/\";\r\nvar gameSocket = new WebSocket(connectionString);\r\n\r\nlet myturn = true;\r\n\r\nfunction make_move(index, player) {\r\n    index = parseInt(index);\r\n    let data = {\r\n        event: \"MOVE\",\r\n        message: {\r\n            index: index,\r\n            player: player,\r\n        },\r\n    };\r\n\r\n    if (gameBoard[index] == -1) {\r\n        moveCount++;\r\n        if (player == \"X\") gameBoard[index] = 1;\r\n        else if (player == \"O\") gameBoard[index] = 0;\r\n        else {\r\n            alert(\"Invalid character choice\");\r\n            return false;\r\n        }\r\n        gameSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    elementArray[index].innerHTML = player;\r\n    const win = checkWinner();\r\n    if (myturn) {\r\n        if (win) {\r\n            data = {\r\n                event: \"END\",\r\n                message: `${player} is a winner. Play again?`,\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        } else if (!win && moveCount == 9) {\r\n            data = {\r\n                event: \"END\",\r\n                message: \"It's a draw. Play again?\",\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        }\r\n    }\r\n}\r\n\r\nfunction connect() {\r\n    gameSocket.onopen = function open() {\r\n        console.log(\"WebSockets connection created.\");\r\n        gameSocket.send(\r\n            JSON.stringify({\r\n                event: \"START\",\r\n                message: \"\",\r\n            })\r\n        );\r\n    };\r\n\r\n    gameSocket.onclose = function (e) {\r\n        console.log(\r\n            \"Socket is closed. Reconnect will be attempted in 1 second.\",\r\n            e.reason\r\n        );\r\n        setTimeout(function () {\r\n            connect();\r\n        }, 1000);\r\n    };\r\n    // Sending the info about the room\r\n    gameSocket.onmessage = function (e) {\r\n        let data = JSON.parse(e.data);\r\n        data = data[\"payload\"];\r\n        let message = data[\"message\"];\r\n        let event = data[\"event\"];\r\n        switch (event) {\r\n            case \"START\":\r\n                //reset();\r\n                break;\r\n            case \"END\":\r\n                alert(message);\r\n                //reset();\r\n                break;\r\n            case \"MOVE\":\r\n                if (message[\"player\"] != char_choice) {\r\n                    make_move(message[\"index\"], message[\"player\"]);\r\n                    myturn = true;\r\n                    document.getElementById(\"alert_move\").style.display =\r\n                        \"inline\";\r\n                }\r\n                break;\r\n            default:\r\n                console.log(\"No event\");\r\n        }\r\n    };\r\n\r\n    if (gameSocket.readyState == WebSocket.OPEN) {\r\n        gameSocket.onopen();\r\n    }\r\n}\r\n\r\nconnect(); */","map":{"version":3,"names":["React","useState","useWebSocket","ReadyState","GameContainer","GamePlayer","Player","TakenPieces","Board","initBoardState","useEffect","Chess","room","setRoom","playerColour","setColour","white","black","takenPieces","setTakenPieces","onOpen","console","log","onClose","onMessage","e","dataFromServer","JSON","parse","data","sendMessage","lastMessage","readyState","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","getBoardRotation","colour","boardRotation","isWhite","boardState","setBoardState","stringify","type","message","event","opponentColour","color","map","piecePath","i"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/pages/Chess.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport { GameContainer, GamePlayer, Player, TakenPieces } from \"./GameElements\";\r\nimport Board from \"../components/Board\";\r\nimport { initBoardState } from \"../components/BoardState\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Chess = () => {\r\n    const [room, setRoom] = useState(1);\r\n    const [playerColour, setColour] = useState(\"white\");\r\n    const [takenPieces, setTakenPieces] = useState({ white: [], black: [] });\r\n\r\n    const { sendMessage, lastMessage, readyState } = useWebSocket(\r\n        \"ws://127.0.0.1:8000/ws/\" + room + \"/\",\r\n        {\r\n            onOpen: () => {\r\n                console.log(\"Connected!\");\r\n            },\r\n            onClose: () => {\r\n                console.log(\"Disconnected!\");\r\n            },\r\n            onMessage: (e) => {\r\n                //console.log(e);\r\n                const dataFromServer = JSON.parse(e.data);\r\n                console.log(dataFromServer);\r\n            },\r\n        }\r\n    );\r\n\r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: \"Connecting\",\r\n        [ReadyState.OPEN]: \"Open\",\r\n        [ReadyState.CLOSING]: \"Closing\",\r\n        [ReadyState.CLOSED]: \"Closed\",\r\n        [ReadyState.UNINSTANTIATED]: \"Uninstantiated\",\r\n    }[readyState];\r\n\r\n    const getBoardRotation = (colour) => {\r\n        if (colour === \"white\") return { white: [7, 6], black: [0, 1] };\r\n        else if (colour === \"black\") return { white: [0, 1], black: [7, 6] };\r\n        throw \"Colour must be black or white\";\r\n    };\r\n\r\n    const boardRotation = getBoardRotation(playerColour);\r\n    const isWhite = playerColour === \"white\";\r\n\r\n    // Sets initial piece positions ensuring that players colour is always at bottom\r\n    const [boardState, setBoardState] = useState(\r\n        initBoardState(isWhite, boardRotation)\r\n    );\r\n\r\n    useEffect(() => {\r\n        //console.log(boardState);\r\n        //console.log(JSON.stringify(boardState));\r\n        sendMessage(\r\n            JSON.stringify({\r\n                type: \"send_message\",\r\n                message: boardState,\r\n                event: \"MOVE\",\r\n            })\r\n        );\r\n    }, [boardState]);\r\n\r\n    const opponentColour = playerColour === \"white\" ? \"black\" : \"white\";\r\n\r\n    return (\r\n        <GameContainer>\r\n            <GamePlayer>\r\n                <div style={{ color: \"white\" }}>\r\n                    The WebSocket is currently {connectionStatus}\r\n                </div>\r\n                <Player>\r\n                    <div>Name</div>\r\n                    <TakenPieces></TakenPieces>\r\n                </Player>\r\n                <Board\r\n                    boardState={boardState}\r\n                    setBoardState={setBoardState}\r\n                    setTakenPieces={setTakenPieces}\r\n                />\r\n                <Player>\r\n                    <div>Name</div>\r\n                    <TakenPieces>\r\n                        {takenPieces[opponentColour].map((piecePath, i) => {\r\n                            return <img src={piecePath} />;\r\n                        })}\r\n                    </TakenPieces>\r\n                </Player>\r\n            </GamePlayer>\r\n        </GameContainer>\r\n    );\r\n};\r\n\r\nexport default Chess;\r\n\r\n/* var roomCode = document.getElementById(\"game_board\").getAttribute(\"room_code\");\r\nvar char_choice = document\r\n    .getElementById(\"game_board\")\r\n    .getAttribute(\"char_choice\");\r\n\r\nvar connectionString =\r\n    \"ws://\" + window.location.host + \"/ws/play/\" + roomCode + \"/\";\r\nvar gameSocket = new WebSocket(connectionString);\r\n\r\nlet myturn = true;\r\n\r\nfunction make_move(index, player) {\r\n    index = parseInt(index);\r\n    let data = {\r\n        event: \"MOVE\",\r\n        message: {\r\n            index: index,\r\n            player: player,\r\n        },\r\n    };\r\n\r\n    if (gameBoard[index] == -1) {\r\n        moveCount++;\r\n        if (player == \"X\") gameBoard[index] = 1;\r\n        else if (player == \"O\") gameBoard[index] = 0;\r\n        else {\r\n            alert(\"Invalid character choice\");\r\n            return false;\r\n        }\r\n        gameSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    elementArray[index].innerHTML = player;\r\n    const win = checkWinner();\r\n    if (myturn) {\r\n        if (win) {\r\n            data = {\r\n                event: \"END\",\r\n                message: `${player} is a winner. Play again?`,\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        } else if (!win && moveCount == 9) {\r\n            data = {\r\n                event: \"END\",\r\n                message: \"It's a draw. Play again?\",\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        }\r\n    }\r\n}\r\n\r\nfunction connect() {\r\n    gameSocket.onopen = function open() {\r\n        console.log(\"WebSockets connection created.\");\r\n        gameSocket.send(\r\n            JSON.stringify({\r\n                event: \"START\",\r\n                message: \"\",\r\n            })\r\n        );\r\n    };\r\n\r\n    gameSocket.onclose = function (e) {\r\n        console.log(\r\n            \"Socket is closed. Reconnect will be attempted in 1 second.\",\r\n            e.reason\r\n        );\r\n        setTimeout(function () {\r\n            connect();\r\n        }, 1000);\r\n    };\r\n    // Sending the info about the room\r\n    gameSocket.onmessage = function (e) {\r\n        let data = JSON.parse(e.data);\r\n        data = data[\"payload\"];\r\n        let message = data[\"message\"];\r\n        let event = data[\"event\"];\r\n        switch (event) {\r\n            case \"START\":\r\n                //reset();\r\n                break;\r\n            case \"END\":\r\n                alert(message);\r\n                //reset();\r\n                break;\r\n            case \"MOVE\":\r\n                if (message[\"player\"] != char_choice) {\r\n                    make_move(message[\"index\"], message[\"player\"]);\r\n                    myturn = true;\r\n                    document.getElementById(\"alert_move\").style.display =\r\n                        \"inline\";\r\n                }\r\n                break;\r\n            default:\r\n                console.log(\"No event\");\r\n        }\r\n    };\r\n\r\n    if (gameSocket.readyState == WebSocket.OPEN) {\r\n        gameSocket.onopen();\r\n    }\r\n}\r\n\r\nconnect(); */\r\n"],"mappings":"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},"metadata":{},"sourceType":"module"}