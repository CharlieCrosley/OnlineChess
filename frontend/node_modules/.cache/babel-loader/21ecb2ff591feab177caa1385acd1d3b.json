{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\charl\\\\Documents\\\\Code\\\\Web Dev\\\\Chess-Online\\\\chessproject\\\\frontend\\\\src\\\\pages\\\\Chess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { useLocation } from \"react-router-dom\";\nimport { GameContainer, GamePlayer, Player, TakenPieces } from \"./GameElements\";\nimport Board from \"../components/Board\";\nimport { checkIfOpponentInCheck } from \"../components/Game\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chess = () => {\n  _s();\n\n  const location = useLocation();\n  const [room] = useState(location.state.room);\n  const [name] = useState(location.state.name);\n  const [opponentName, setOpponentName] = useState(null);\n  const [playerColour] = useState(location.state.colour);\n  const [takenPieces, setTakenPieces] = useState({\n    white: [],\n    black: []\n  });\n  const boardRotation = getBoardRotation(playerColour);\n  const isWhite = playerColour === \"white\"; // Sets initial piece positions ensuring that players colour is always at bottom\n\n  const [boardState, setBoardState] = useState(initBoardState(isWhite, boardRotation));\n  const [prevBoardState, setPrevBoardState] = useState(null);\n  const [audio] = useState({\n    check: new Audio(require(\"../assets/sounds/check.mp3\"))\n  });\n  const {\n    sendMessage,\n    readyState\n  } = useWebSocket(\"ws://127.0.0.1:8000/ws/\" + room + \"/\", {\n    onOpen: () => {\n      console.log(\"Connected!\");\n      sendMessage(JSON.stringify({\n        type: \"send_message\",\n        message: {\n          opponentName: name\n        },\n        event: \"START\"\n      }));\n    },\n    onClose: () => {\n      console.log(\"Disconnected!\");\n    },\n    onMessage: e => {\n      const dataFromServer = JSON.parse(e.data);\n\n      switch (dataFromServer.payload.event) {\n        case \"START\":\n          if (opponentName === null && dataFromServer.payload.message.opponentName !== name) {\n            //\n            console.log(dataFromServer.payload.message.opponentName);\n            setOpponentName(dataFromServer.payload.message.opponentName);\n            sendMessage(JSON.stringify({\n              type: \"send_message\",\n              message: {\n                opponentName: name\n              },\n              event: \"START\"\n            }));\n          }\n\n        case \"MOVE\":\n          if (dataFromServer.payload.message.opponent.colour !== playerColour) {\n            setBoardState(flipBoard(dataFromServer.payload.message.boardState));\n            setTakenPieces(dataFromServer.payload.message.takenPieces);\n            setOpponentName(dataFromServer.payload.message.opponent.name);\n          }\n\n      }\n    }\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: \"Connecting\",\n    [ReadyState.OPEN]: \"Open\",\n    [ReadyState.CLOSING]: \"Closing\",\n    [ReadyState.CLOSED]: \"Closed\",\n    [ReadyState.UNINSTANTIATED]: \"Uninstantiated\"\n  }[readyState];\n  useEffect(() => {\n    // Send the current board state to the websocket group\n    // Only send message if the board state has changed to avoid infintite loop of sending\n    if (JSON.stringify(prevBoardState) !== JSON.stringify(boardState)) {\n      // Update the kings check state before sending\n      let opponentKing, playerKing;\n\n      if (boardState[\"king_w\"].isOwner) {\n        opponentKing = boardState[\"king_b\"];\n        playerKing = boardState[\"king_w\"];\n      } else {\n        opponentKing = boardState[\"king_w\"];\n        playerKing = boardState[\"king_b\"];\n      }\n\n      if (checkIfOpponentInCheck(boardState, opponentKing)) {\n        audio.check.play();\n        opponentKing.inCheck = true;\n      } else {\n        opponentKing.inCheck = false;\n      } // This state will be updated when on the opponents side and sent to the player\n\n\n      if (playerKing.inCheck) {\n        audio.check.play();\n      }\n\n      setPrevBoardState(boardState);\n      sendMessage(JSON.stringify({\n        type: \"send_message\",\n        message: {\n          boardState,\n          takenPieces,\n          opponent: {\n            name: name,\n            colour: playerColour\n          }\n        },\n        event: \"MOVE\"\n      }));\n    }\n  }, [boardState]);\n  const opponentColour = playerColour === \"white\" ? \"black\" : \"white\";\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    children: /*#__PURE__*/_jsxDEV(GamePlayer, {\n      children: [/*#__PURE__*/_jsxDEV(Player, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: opponentName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TakenPieces, {\n          children: takenPieces[playerColour].map((piecePath, i) => {\n            return /*#__PURE__*/_jsxDEV(\"img\", {\n              src: piecePath\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        boardState: boardState,\n        setBoardState: setBoardState,\n        setTakenPieces: setTakenPieces\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Player, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TakenPieces, {\n          children: takenPieces[opponentColour].map((piecePath, i) => {\n            return /*#__PURE__*/_jsxDEV(\"img\", {\n              src: piecePath\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chess, \"9ckkPDyuk7+GgPlNmxwIneCAlf0=\", false, function () {\n  return [useLocation, useWebSocket];\n});\n\n_c = Chess;\nexport default Chess;\n\nconst getBoardRotation = colour => {\n  if (colour === \"white\") return {\n    white: [7, 6],\n    black: [0, 1]\n  };else if (colour === \"black\") return {\n    white: [0, 1],\n    black: [7, 6]\n  };\n  throw \"Colour must be black or white\";\n};\n\nconst flipBoard = boardState => {\n  for (const [_, state] of Object.entries(boardState)) {\n    state.row = 7 - state.row;\n    state.col = 7 - state.col;\n    state.isOwner = !state.isOwner;\n  }\n\n  return boardState;\n};\n\nexport const initBoardState = (isWhite, boardRotation) => {\n  const pieceNames = [\"castle_w_1\", \"knight_w_1\", \"bishop_w_1\", \"queen_w\", \"king_w\", \"bishop_w_2\", \"knight_w_2\", \"castle_w_2\", \"pawn_w_1\", \"pawn_w_2\", \"pawn_w_3\", \"pawn_w_4\", \"pawn_w_5\", \"pawn_w_6\", \"pawn_w_7\", \"pawn_w_8\", \"castle_b_1\", \"knight_b_1\", \"bishop_b_1\", \"queen_b\", \"king_b\", \"bishop_b_2\", \"knight_b_2\", \"castle_b_2\", \"pawn_b_1\", \"pawn_b_2\", \"pawn_b_3\", \"pawn_b_4\", \"pawn_b_5\", \"pawn_b_6\", \"pawn_b_7\", \"pawn_b_8\"];\n  const boardState = {};\n\n  for (let i = 0; i < 32; i++) {\n    // First 16 elements in  pieces array are white rest are black\n    // Each 8 elements in array is a row\n    if (i < 16) {\n      let row;\n      if (i < 8) row = boardRotation.white[0];else row = boardRotation.white[1];\n      const properties = {\n        row: row,\n        col: i % 8,\n        hasMoved: false,\n        isOwner: isWhite,\n        isAlive: true\n      };\n\n      if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\n        properties[\"inCheck\"] = false;\n      }\n\n      boardState[pieceNames[i]] = properties;\n    } else {\n      let row;\n      if (i < 24) row = boardRotation.black[0];else row = boardRotation.black[1];\n      const properties = {\n        row: row,\n        col: i % 8,\n        hasMoved: false,\n        isOwner: !isWhite,\n        isAlive: true\n      };\n\n      if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\n        properties[\"inCheck\"] = false;\n      }\n\n      boardState[pieceNames[i]] = properties;\n    }\n  }\n\n  return boardState;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Chess\");","map":{"version":3,"names":["React","useState","useEffect","useWebSocket","ReadyState","useLocation","GameContainer","GamePlayer","Player","TakenPieces","Board","checkIfOpponentInCheck","Chess","location","room","state","name","opponentName","setOpponentName","playerColour","colour","takenPieces","setTakenPieces","white","black","boardRotation","getBoardRotation","isWhite","boardState","setBoardState","initBoardState","prevBoardState","setPrevBoardState","audio","check","Audio","require","sendMessage","readyState","onOpen","console","log","JSON","stringify","type","message","event","onClose","onMessage","e","dataFromServer","parse","data","payload","opponent","flipBoard","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","opponentKing","playerKing","isOwner","play","inCheck","opponentColour","map","piecePath","i","_","Object","entries","row","col","pieceNames","properties","hasMoved","isAlive"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/pages/Chess.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { GameContainer, GamePlayer, Player, TakenPieces } from \"./GameElements\";\r\nimport Board from \"../components/Board\";\r\nimport { checkIfOpponentInCheck } from \"../components/Game\";\r\n\r\nconst Chess = () => {\r\n    const location = useLocation();\r\n\r\n    const [room] = useState(location.state.room);\r\n    const [name] = useState(location.state.name);\r\n    const [opponentName, setOpponentName] = useState(null);\r\n    const [playerColour] = useState(location.state.colour);\r\n    const [takenPieces, setTakenPieces] = useState({\r\n        white: [],\r\n        black: [],\r\n    });\r\n\r\n    const boardRotation = getBoardRotation(playerColour);\r\n    const isWhite = playerColour === \"white\";\r\n    // Sets initial piece positions ensuring that players colour is always at bottom\r\n    const [boardState, setBoardState] = useState(\r\n        initBoardState(isWhite, boardRotation)\r\n    );\r\n    const [prevBoardState, setPrevBoardState] = useState(null);\r\n\r\n    const [audio] = useState({\r\n        check: new Audio(require(\"../assets/sounds/check.mp3\")),\r\n    });\r\n\r\n    const { sendMessage, readyState } = useWebSocket(\r\n        \"ws://127.0.0.1:8000/ws/\" + room + \"/\",\r\n        {\r\n            onOpen: () => {\r\n                console.log(\"Connected!\");\r\n                sendMessage(\r\n                    JSON.stringify({\r\n                        type: \"send_message\",\r\n                        message: { opponentName: name },\r\n                        event: \"START\",\r\n                    })\r\n                );\r\n            },\r\n            onClose: () => {\r\n                console.log(\"Disconnected!\");\r\n            },\r\n            onMessage: (e) => {\r\n                const dataFromServer = JSON.parse(e.data);\r\n                switch (dataFromServer.payload.event) {\r\n                    case \"START\":\r\n                        if (\r\n                            opponentName === null &&\r\n                            dataFromServer.payload.message.opponentName !== name\r\n                        ) {\r\n                            //\r\n                            console.log(\r\n                                dataFromServer.payload.message.opponentName\r\n                            );\r\n                            setOpponentName(\r\n                                dataFromServer.payload.message.opponentName\r\n                            );\r\n                            sendMessage(\r\n                                JSON.stringify({\r\n                                    type: \"send_message\",\r\n                                    message: { opponentName: name },\r\n                                    event: \"START\",\r\n                                })\r\n                            );\r\n                        }\r\n\r\n                    case \"MOVE\":\r\n                        if (\r\n                            dataFromServer.payload.message.opponent.colour !==\r\n                            playerColour\r\n                        ) {\r\n                            setBoardState(\r\n                                flipBoard(\r\n                                    dataFromServer.payload.message.boardState\r\n                                )\r\n                            );\r\n\r\n                            setTakenPieces(\r\n                                dataFromServer.payload.message.takenPieces\r\n                            );\r\n                            setOpponentName(\r\n                                dataFromServer.payload.message.opponent.name\r\n                            );\r\n                        }\r\n                }\r\n            },\r\n        }\r\n    );\r\n\r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: \"Connecting\",\r\n        [ReadyState.OPEN]: \"Open\",\r\n        [ReadyState.CLOSING]: \"Closing\",\r\n        [ReadyState.CLOSED]: \"Closed\",\r\n        [ReadyState.UNINSTANTIATED]: \"Uninstantiated\",\r\n    }[readyState];\r\n\r\n    useEffect(() => {\r\n        // Send the current board state to the websocket group\r\n        // Only send message if the board state has changed to avoid infintite loop of sending\r\n        if (JSON.stringify(prevBoardState) !== JSON.stringify(boardState)) {\r\n            // Update the kings check state before sending\r\n            let opponentKing, playerKing;\r\n            if (boardState[\"king_w\"].isOwner) {\r\n                opponentKing = boardState[\"king_b\"];\r\n                playerKing = boardState[\"king_w\"];\r\n            } else {\r\n                opponentKing = boardState[\"king_w\"];\r\n                playerKing = boardState[\"king_b\"];\r\n            }\r\n            if (checkIfOpponentInCheck(boardState, opponentKing)) {\r\n                audio.check.play();\r\n                opponentKing.inCheck = true;\r\n            } else {\r\n                opponentKing.inCheck = false;\r\n            }\r\n            // This state will be updated when on the opponents side and sent to the player\r\n            if (playerKing.inCheck) {\r\n                audio.check.play();\r\n            }\r\n\r\n            setPrevBoardState(boardState);\r\n            sendMessage(\r\n                JSON.stringify({\r\n                    type: \"send_message\",\r\n                    message: {\r\n                        boardState,\r\n                        takenPieces,\r\n                        opponent: { name: name, colour: playerColour },\r\n                    },\r\n                    event: \"MOVE\",\r\n                })\r\n            );\r\n        }\r\n    }, [boardState]);\r\n\r\n    const opponentColour = playerColour === \"white\" ? \"black\" : \"white\";\r\n\r\n    return (\r\n        <GameContainer>\r\n            <GamePlayer>\r\n                {/* <div style={{ color: \"white\" }}>\r\n                    The WebSocket is currently {connectionStatus}\r\n                </div> */}\r\n                <Player>\r\n                    <div>{opponentName}</div>\r\n                    <TakenPieces>\r\n                        {takenPieces[playerColour].map((piecePath, i) => {\r\n                            return <img key={i} src={piecePath} />;\r\n                        })}\r\n                    </TakenPieces>\r\n                </Player>\r\n                <Board\r\n                    boardState={boardState}\r\n                    setBoardState={setBoardState}\r\n                    setTakenPieces={setTakenPieces}\r\n                />\r\n                <Player>\r\n                    <div>{name}</div>\r\n                    <TakenPieces>\r\n                        {takenPieces[opponentColour].map((piecePath, i) => {\r\n                            return <img key={i} src={piecePath} />;\r\n                        })}\r\n                    </TakenPieces>\r\n                </Player>\r\n            </GamePlayer>\r\n        </GameContainer>\r\n    );\r\n};\r\n\r\nexport default Chess;\r\n\r\nconst getBoardRotation = (colour) => {\r\n    if (colour === \"white\") return { white: [7, 6], black: [0, 1] };\r\n    else if (colour === \"black\") return { white: [0, 1], black: [7, 6] };\r\n    throw \"Colour must be black or white\";\r\n};\r\n\r\nconst flipBoard = (boardState) => {\r\n    for (const [_, state] of Object.entries(boardState)) {\r\n        state.row = 7 - state.row;\r\n        state.col = 7 - state.col;\r\n        state.isOwner = !state.isOwner;\r\n    }\r\n    return boardState;\r\n};\r\n\r\nexport const initBoardState = (isWhite, boardRotation) => {\r\n    const pieceNames = [\r\n        \"castle_w_1\",\r\n        \"knight_w_1\",\r\n        \"bishop_w_1\",\r\n        \"queen_w\",\r\n        \"king_w\",\r\n        \"bishop_w_2\",\r\n        \"knight_w_2\",\r\n        \"castle_w_2\",\r\n        \"pawn_w_1\",\r\n        \"pawn_w_2\",\r\n        \"pawn_w_3\",\r\n        \"pawn_w_4\",\r\n        \"pawn_w_5\",\r\n        \"pawn_w_6\",\r\n        \"pawn_w_7\",\r\n        \"pawn_w_8\",\r\n        \"castle_b_1\",\r\n        \"knight_b_1\",\r\n        \"bishop_b_1\",\r\n        \"queen_b\",\r\n        \"king_b\",\r\n        \"bishop_b_2\",\r\n        \"knight_b_2\",\r\n        \"castle_b_2\",\r\n        \"pawn_b_1\",\r\n        \"pawn_b_2\",\r\n        \"pawn_b_3\",\r\n        \"pawn_b_4\",\r\n        \"pawn_b_5\",\r\n        \"pawn_b_6\",\r\n        \"pawn_b_7\",\r\n        \"pawn_b_8\",\r\n    ];\r\n    const boardState = {};\r\n    for (let i = 0; i < 32; i++) {\r\n        // First 16 elements in  pieces array are white rest are black\r\n        // Each 8 elements in array is a row\r\n        if (i < 16) {\r\n            let row;\r\n            if (i < 8) row = boardRotation.white[0];\r\n            else row = boardRotation.white[1];\r\n            const properties = {\r\n                row: row,\r\n                col: i % 8,\r\n                hasMoved: false,\r\n                isOwner: isWhite,\r\n                isAlive: true,\r\n            };\r\n            if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\r\n                properties[\"inCheck\"] = false;\r\n            }\r\n            boardState[pieceNames[i]] = properties;\r\n        } else {\r\n            let row;\r\n            if (i < 24) row = boardRotation.black[0];\r\n            else row = boardRotation.black[1];\r\n            const properties = {\r\n                row: row,\r\n                col: i % 8,\r\n                hasMoved: false,\r\n                isOwner: !isWhite,\r\n                isAlive: true,\r\n            };\r\n            if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\r\n                properties[\"inCheck\"] = false;\r\n            }\r\n            boardState[pieceNames[i]] = properties;\r\n        }\r\n    }\r\n    return boardState;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,IAAuBC,UAAvB,QAAyC,qBAAzC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,MAApC,EAA4CC,WAA5C,QAA+D,gBAA/D;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,sBAAT,QAAuC,oBAAvC;;;AAEA,MAAMC,KAAK,GAAG,MAAM;EAAA;;EAChB,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;EAEA,MAAM,CAACS,IAAD,IAASb,QAAQ,CAACY,QAAQ,CAACE,KAAT,CAAeD,IAAhB,CAAvB;EACA,MAAM,CAACE,IAAD,IAASf,QAAQ,CAACY,QAAQ,CAACE,KAAT,CAAeC,IAAhB,CAAvB;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,IAAD,CAAhD;EACA,MAAM,CAACkB,YAAD,IAAiBlB,QAAQ,CAACY,QAAQ,CAACE,KAAT,CAAeK,MAAhB,CAA/B;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,CAAC;IAC3CsB,KAAK,EAAE,EADoC;IAE3CC,KAAK,EAAE;EAFoC,CAAD,CAA9C;EAKA,MAAMC,aAAa,GAAGC,gBAAgB,CAACP,YAAD,CAAtC;EACA,MAAMQ,OAAO,GAAGR,YAAY,KAAK,OAAjC,CAbgB,CAchB;;EACA,MAAM,CAACS,UAAD,EAAaC,aAAb,IAA8B5B,QAAQ,CACxC6B,cAAc,CAACH,OAAD,EAAUF,aAAV,CAD0B,CAA5C;EAGA,MAAM,CAACM,cAAD,EAAiBC,iBAAjB,IAAsC/B,QAAQ,CAAC,IAAD,CAApD;EAEA,MAAM,CAACgC,KAAD,IAAUhC,QAAQ,CAAC;IACrBiC,KAAK,EAAE,IAAIC,KAAJ,CAAUC,OAAO,CAAC,4BAAD,CAAjB;EADc,CAAD,CAAxB;EAIA,MAAM;IAAEC,WAAF;IAAeC;EAAf,IAA8BnC,YAAY,CAC5C,4BAA4BW,IAA5B,GAAmC,GADS,EAE5C;IACIyB,MAAM,EAAE,MAAM;MACVC,OAAO,CAACC,GAAR,CAAY,YAAZ;MACAJ,WAAW,CACPK,IAAI,CAACC,SAAL,CAAe;QACXC,IAAI,EAAE,cADK;QAEXC,OAAO,EAAE;UAAE5B,YAAY,EAAED;QAAhB,CAFE;QAGX8B,KAAK,EAAE;MAHI,CAAf,CADO,CAAX;IAOH,CAVL;IAWIC,OAAO,EAAE,MAAM;MACXP,OAAO,CAACC,GAAR,CAAY,eAAZ;IACH,CAbL;IAcIO,SAAS,EAAGC,CAAD,IAAO;MACd,MAAMC,cAAc,GAAGR,IAAI,CAACS,KAAL,CAAWF,CAAC,CAACG,IAAb,CAAvB;;MACA,QAAQF,cAAc,CAACG,OAAf,CAAuBP,KAA/B;QACI,KAAK,OAAL;UACI,IACI7B,YAAY,KAAK,IAAjB,IACAiC,cAAc,CAACG,OAAf,CAAuBR,OAAvB,CAA+B5B,YAA/B,KAAgDD,IAFpD,EAGE;YACE;YACAwB,OAAO,CAACC,GAAR,CACIS,cAAc,CAACG,OAAf,CAAuBR,OAAvB,CAA+B5B,YADnC;YAGAC,eAAe,CACXgC,cAAc,CAACG,OAAf,CAAuBR,OAAvB,CAA+B5B,YADpB,CAAf;YAGAoB,WAAW,CACPK,IAAI,CAACC,SAAL,CAAe;cACXC,IAAI,EAAE,cADK;cAEXC,OAAO,EAAE;gBAAE5B,YAAY,EAAED;cAAhB,CAFE;cAGX8B,KAAK,EAAE;YAHI,CAAf,CADO,CAAX;UAOH;;QAEL,KAAK,MAAL;UACI,IACII,cAAc,CAACG,OAAf,CAAuBR,OAAvB,CAA+BS,QAA/B,CAAwClC,MAAxC,KACAD,YAFJ,EAGE;YACEU,aAAa,CACT0B,SAAS,CACLL,cAAc,CAACG,OAAf,CAAuBR,OAAvB,CAA+BjB,UAD1B,CADA,CAAb;YAMAN,cAAc,CACV4B,cAAc,CAACG,OAAf,CAAuBR,OAAvB,CAA+BxB,WADrB,CAAd;YAGAH,eAAe,CACXgC,cAAc,CAACG,OAAf,CAAuBR,OAAvB,CAA+BS,QAA/B,CAAwCtC,IAD7B,CAAf;UAGH;;MAvCT;IAyCH;EAzDL,CAF4C,CAAhD;EA+DA,MAAMwC,gBAAgB,GAAG;IACrB,CAACpD,UAAU,CAACqD,UAAZ,GAAyB,YADJ;IAErB,CAACrD,UAAU,CAACsD,IAAZ,GAAmB,MAFE;IAGrB,CAACtD,UAAU,CAACuD,OAAZ,GAAsB,SAHD;IAIrB,CAACvD,UAAU,CAACwD,MAAZ,GAAqB,QAJA;IAKrB,CAACxD,UAAU,CAACyD,cAAZ,GAA6B;EALR,EAMvBvB,UANuB,CAAzB;EAQApC,SAAS,CAAC,MAAM;IACZ;IACA;IACA,IAAIwC,IAAI,CAACC,SAAL,CAAeZ,cAAf,MAAmCW,IAAI,CAACC,SAAL,CAAef,UAAf,CAAvC,EAAmE;MAC/D;MACA,IAAIkC,YAAJ,EAAkBC,UAAlB;;MACA,IAAInC,UAAU,CAAC,QAAD,CAAV,CAAqBoC,OAAzB,EAAkC;QAC9BF,YAAY,GAAGlC,UAAU,CAAC,QAAD,CAAzB;QACAmC,UAAU,GAAGnC,UAAU,CAAC,QAAD,CAAvB;MACH,CAHD,MAGO;QACHkC,YAAY,GAAGlC,UAAU,CAAC,QAAD,CAAzB;QACAmC,UAAU,GAAGnC,UAAU,CAAC,QAAD,CAAvB;MACH;;MACD,IAAIjB,sBAAsB,CAACiB,UAAD,EAAakC,YAAb,CAA1B,EAAsD;QAClD7B,KAAK,CAACC,KAAN,CAAY+B,IAAZ;QACAH,YAAY,CAACI,OAAb,GAAuB,IAAvB;MACH,CAHD,MAGO;QACHJ,YAAY,CAACI,OAAb,GAAuB,KAAvB;MACH,CAf8D,CAgB/D;;;MACA,IAAIH,UAAU,CAACG,OAAf,EAAwB;QACpBjC,KAAK,CAACC,KAAN,CAAY+B,IAAZ;MACH;;MAEDjC,iBAAiB,CAACJ,UAAD,CAAjB;MACAS,WAAW,CACPK,IAAI,CAACC,SAAL,CAAe;QACXC,IAAI,EAAE,cADK;QAEXC,OAAO,EAAE;UACLjB,UADK;UAELP,WAFK;UAGLiC,QAAQ,EAAE;YAAEtC,IAAI,EAAEA,IAAR;YAAcI,MAAM,EAAED;UAAtB;QAHL,CAFE;QAOX2B,KAAK,EAAE;MAPI,CAAf,CADO,CAAX;IAWH;EACJ,CArCQ,EAqCN,CAAClB,UAAD,CArCM,CAAT;EAuCA,MAAMuC,cAAc,GAAGhD,YAAY,KAAK,OAAjB,GAA2B,OAA3B,GAAqC,OAA5D;EAEA,oBACI,QAAC,aAAD;IAAA,uBACI,QAAC,UAAD;MAAA,wBAII,QAAC,MAAD;QAAA,wBACI;UAAA,UAAMF;QAAN;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI,QAAC,WAAD;UAAA,UACKI,WAAW,CAACF,YAAD,CAAX,CAA0BiD,GAA1B,CAA8B,CAACC,SAAD,EAAYC,CAAZ,KAAkB;YAC7C,oBAAO;cAAa,GAAG,EAAED;YAAlB,GAAUC,CAAV;cAAA;cAAA;cAAA;YAAA,QAAP;UACH,CAFA;QADL;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAJJ,eAYI,QAAC,KAAD;QACI,UAAU,EAAE1C,UADhB;QAEI,aAAa,EAAEC,aAFnB;QAGI,cAAc,EAAEP;MAHpB;QAAA;QAAA;QAAA;MAAA,QAZJ,eAiBI,QAAC,MAAD;QAAA,wBACI;UAAA,UAAMN;QAAN;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI,QAAC,WAAD;UAAA,UACKK,WAAW,CAAC8C,cAAD,CAAX,CAA4BC,GAA5B,CAAgC,CAACC,SAAD,EAAYC,CAAZ,KAAkB;YAC/C,oBAAO;cAAa,GAAG,EAAED;YAAlB,GAAUC,CAAV;cAAA;cAAA;cAAA;YAAA,QAAP;UACH,CAFA;QADL;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAjBJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AA8BH,CAtKD;;GAAM1D,K;UACeP,W,EAuBmBF,Y;;;KAxBlCS,K;AAwKN,eAAeA,KAAf;;AAEA,MAAMc,gBAAgB,GAAIN,MAAD,IAAY;EACjC,IAAIA,MAAM,KAAK,OAAf,EAAwB,OAAO;IAAEG,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAAT;IAAiBC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;EAAxB,CAAP,CAAxB,KACK,IAAIJ,MAAM,KAAK,OAAf,EAAwB,OAAO;IAAEG,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAAT;IAAiBC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;EAAxB,CAAP;EAC7B,MAAM,+BAAN;AACH,CAJD;;AAMA,MAAM+B,SAAS,GAAI3B,UAAD,IAAgB;EAC9B,KAAK,MAAM,CAAC2C,CAAD,EAAIxD,KAAJ,CAAX,IAAyByD,MAAM,CAACC,OAAP,CAAe7C,UAAf,CAAzB,EAAqD;IACjDb,KAAK,CAAC2D,GAAN,GAAY,IAAI3D,KAAK,CAAC2D,GAAtB;IACA3D,KAAK,CAAC4D,GAAN,GAAY,IAAI5D,KAAK,CAAC4D,GAAtB;IACA5D,KAAK,CAACiD,OAAN,GAAgB,CAACjD,KAAK,CAACiD,OAAvB;EACH;;EACD,OAAOpC,UAAP;AACH,CAPD;;AASA,OAAO,MAAME,cAAc,GAAG,CAACH,OAAD,EAAUF,aAAV,KAA4B;EACtD,MAAMmD,UAAU,GAAG,CACf,YADe,EAEf,YAFe,EAGf,YAHe,EAIf,SAJe,EAKf,QALe,EAMf,YANe,EAOf,YAPe,EAQf,YARe,EASf,UATe,EAUf,UAVe,EAWf,UAXe,EAYf,UAZe,EAaf,UAbe,EAcf,UAde,EAef,UAfe,EAgBf,UAhBe,EAiBf,YAjBe,EAkBf,YAlBe,EAmBf,YAnBe,EAoBf,SApBe,EAqBf,QArBe,EAsBf,YAtBe,EAuBf,YAvBe,EAwBf,YAxBe,EAyBf,UAzBe,EA0Bf,UA1Be,EA2Bf,UA3Be,EA4Bf,UA5Be,EA6Bf,UA7Be,EA8Bf,UA9Be,EA+Bf,UA/Be,EAgCf,UAhCe,CAAnB;EAkCA,MAAMhD,UAAU,GAAG,EAAnB;;EACA,KAAK,IAAI0C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;IACzB;IACA;IACA,IAAIA,CAAC,GAAG,EAAR,EAAY;MACR,IAAII,GAAJ;MACA,IAAIJ,CAAC,GAAG,CAAR,EAAWI,GAAG,GAAGjD,aAAa,CAACF,KAAd,CAAoB,CAApB,CAAN,CAAX,KACKmD,GAAG,GAAGjD,aAAa,CAACF,KAAd,CAAoB,CAApB,CAAN;MACL,MAAMsD,UAAU,GAAG;QACfH,GAAG,EAAEA,GADU;QAEfC,GAAG,EAAEL,CAAC,GAAG,CAFM;QAGfQ,QAAQ,EAAE,KAHK;QAIfd,OAAO,EAAErC,OAJM;QAKfoD,OAAO,EAAE;MALM,CAAnB;;MAOA,IAAIH,UAAU,CAACN,CAAD,CAAV,KAAkB,QAAlB,IAA8BM,UAAU,CAACN,CAAD,CAAV,KAAkB,QAApD,EAA8D;QAC1DO,UAAU,CAAC,SAAD,CAAV,GAAwB,KAAxB;MACH;;MACDjD,UAAU,CAACgD,UAAU,CAACN,CAAD,CAAX,CAAV,GAA4BO,UAA5B;IACH,CAfD,MAeO;MACH,IAAIH,GAAJ;MACA,IAAIJ,CAAC,GAAG,EAAR,EAAYI,GAAG,GAAGjD,aAAa,CAACD,KAAd,CAAoB,CAApB,CAAN,CAAZ,KACKkD,GAAG,GAAGjD,aAAa,CAACD,KAAd,CAAoB,CAApB,CAAN;MACL,MAAMqD,UAAU,GAAG;QACfH,GAAG,EAAEA,GADU;QAEfC,GAAG,EAAEL,CAAC,GAAG,CAFM;QAGfQ,QAAQ,EAAE,KAHK;QAIfd,OAAO,EAAE,CAACrC,OAJK;QAKfoD,OAAO,EAAE;MALM,CAAnB;;MAOA,IAAIH,UAAU,CAACN,CAAD,CAAV,KAAkB,QAAlB,IAA8BM,UAAU,CAACN,CAAD,CAAV,KAAkB,QAApD,EAA8D;QAC1DO,UAAU,CAAC,SAAD,CAAV,GAAwB,KAAxB;MACH;;MACDjD,UAAU,CAACgD,UAAU,CAACN,CAAD,CAAX,CAAV,GAA4BO,UAA5B;IACH;EACJ;;EACD,OAAOjD,UAAP;AACH,CAxEM"},"metadata":{},"sourceType":"module"}