{"ast":null,"code":"/**\r\n * Callback for setting the board state\r\n *\r\n * @callback setBoardState\r\n * @param {Object} board An dictionary representing the current board state\r\n */\n\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {setBoardState} setBoardState sets a new state of the board\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\nexport function movePiece(toX, toY, setBoardState, setTakenPieces, item, boardState) {\n  const square = squareIsEmpty(toX, toY, boardState);\n\n  if (square != null) {\n    if (!square.isOwner) {\n      boardState[square.piece].isAlive = false; // Track what pieces are taken so that they can be rendered under player name\n\n      const pieceNameSplit = square.piece.split(\"_\");\n      const piecePathName = pieceNameSplit[0] + \"_\" + pieceNameSplit[1];\n\n      const pieceImgPath = require(\"../assets/images/pieces/\" + piecePathName + \".png\");\n\n      let colour;\n      if (pieceNameSplit[1] === \"w\") colour = \"white\";else colour = \"black\"; // Sort the array of pieces so that matching pieces appear next to eachother\n\n      setTakenPieces(prevState => ({ ...prevState,\n        [colour]: [...prevState[colour], pieceImgPath].sort()\n      }));\n    }\n  } // Update state of the moved piece\n\n\n  setBoardState(prevState => ({ ...prevState,\n    [item.pieceName]: {\n      row: toY,\n      col: toX,\n      hasMoved: true,\n      isOwner: true,\n      isAlive: true\n    }\n  }));\n}\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\n\nexport function canMovePiece(toX, toY, item, boardState, draggedPiece) {\n  const square = squareIsEmpty(toX, toY, boardState);\n  if (square && square.state.isOwner && square.state.isAlive) return false;\n  var dx = Math.abs(toX - item.pieceState.col);\n  var dy = Math.abs(toY - item.pieceState.row);\n  const pieceName = item.pieceName.split(\"_\")[0];\n  const straightCollisions = checkStraightCollisions(toX, toY, boardState, draggedPiece).collision;\n  const diagCollisions = checkDiagCollisions(toX, toY, boardState, draggedPiece).collision;\n\n  switch (pieceName) {\n    case \"castle\":\n      return (dx === 0 && dy > 0 || dx > 0 && dy === 0) && !straightCollisions;\n\n    case \"knight\":\n      return dx === 2 && dy === 1 || dx === 1 && dy === 2;\n\n    case \"bishop\":\n      return !(dx === 0 && dy > 0) && !(dx > 0 && dy === 0) && (dx === dy || dx === dy) && !diagCollisions;\n\n    case \"queen\":\n      return (dx === 0 && dy > 0 || dx > 0 && dy === 0) && !straightCollisions || (dx === dy || dx === dy) && !diagCollisions;\n\n    case \"king\":\n      const moveNotInCheck = checkIfMoveInCheck(toX, toY, boardState, draggedPiece);\n      return (dx === 1 || dx === 0) && (dy === 1 || dy === 0) && moveNotInCheck;\n\n    case \"pawn\":\n      // Recalculate dx/dy with direction\n      dx = toX - item.pieceState.col;\n      dy = toY - item.pieceState.row; // Allow pawn to move 2 squares on first move\n\n      if (!item.pieceState.hasMoved) {\n        // Negative direction moves up the board (player always at bottom)\n        if (dx === 0 && (dy === -1 || dy === -2) && !straightCollisions) {\n          return square === null;\n        }\n      } // Allow pawn to take opponents pieces diagonal by 1 square\n\n\n      if ((dx === 1 || dx === -1) && dy === -1 && square !== null) return true; // Allow pawn to move forward by 1 square\n\n      return dx === 0 && dy === -1 && square === null;\n\n    default:\n      return false;\n  }\n}\n/**\r\n * Checks if the current square is empty\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @returns piece name and state if square is not empty, null otherwise\r\n */\n\nfunction squareIsEmpty(x, y, boardState) {\n  for (const [piece, state] of Object.entries(boardState)) {\n    if (x === state.col && y === state.row) {\n      return {\n        piece,\n        state\n      };\n    }\n  }\n\n  return null;\n}\n/**\r\n * Checks if there is a piece in the diagonal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\n\n\nfunction checkDiagCollisions(x, y, boardState, draggedPiece) {\n  // Get row and col of dragged piece\n  const row = draggedPiece.pieceState.row;\n  const col = draggedPiece.pieceState.col;\n  const dirX = Math.sign(x - col);\n  const dirY = Math.sign(y - row);\n\n  for (let i = 1; i < Math.abs(x - col) + 1; i++) {\n    for (const [piece, state] of Object.entries(boardState)) {\n      if (col + i * dirX === state.col && row + i * dirY === state.row && state.isAlive) {\n        if (i !== Math.abs(x - col)) {\n          // Stops opponents pieces from being taken when hidden behind each other\n          return {\n            piece: piece,\n            collision: true\n          };\n        }\n\n        return {\n          piece: piece,\n          collision: state.isOwner\n        };\n      }\n    }\n  }\n\n  return {\n    piece: null,\n    collision: false\n  };\n}\n/**\r\n * Checks if there is a piece in the vertical and horizontal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\n\n\nfunction checkStraightCollisions(x, y, boardState, draggedPiece) {\n  // Get row and col of dragged piece\n  const row = draggedPiece.pieceState.row;\n  const col = draggedPiece.pieceState.col; // Get change in x and y between dragged piece and square\n\n  const dx = Math.abs(x - col);\n  const dy = Math.abs(y - row);\n  if (dx > 0 && dy > 0) return true;\n  const dirX = Math.sign(x - col);\n  const dirY = Math.sign(y - row);\n\n  for (let i = 1; i < Math.max(dx, dy) + 1; i++) {\n    for (const [piece, state] of Object.entries(boardState)) {\n      if (state.isAlive) {\n        // Move is horizontal if dy = 0, otherwise vertical\n        if (dy === 0) {\n          if (col + i * dirX === state.col && row === state.row) {\n            if (i !== Math.abs(x - col)) {\n              // Stops opponents pieces from being taken when hidden behind each other\n              return {\n                piece: piece,\n                collision: true\n              };\n            }\n\n            return {\n              piece: piece,\n              collision: state.isOwner\n            };\n          }\n        } else {\n          if (row + i * dirY === state.row && col === state.col) {\n            if (i !== Math.abs(y - row)) {\n              // Stops opponents pieces from being taken when hidden behind each other\n              return {\n                piece: piece,\n                collision: true\n              };\n            }\n\n            return {\n              piece: piece,\n              collision: state.isOwner\n            };\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    piece: null,\n    collision: false\n  };\n}\n\nfunction checkIfMoveInCheck(x, y, boardState, draggedPiece) {\n  //\n  const row = draggedPiece.pieceState.row;\n  const col = draggedPiece.pieceState.col;\n\n  for (const [piece, state] of Object.entries(boardState)) {\n    let straightCollisions = checkStraightCollisions(state.col, state.row, boardState, {\n      pieceState: {\n        col: x,\n        row: y\n      }\n    });\n\n    if (straightCollisions.piece) {\n      const pieceName = straightCollisions.piece.split(\"_\")[0];\n\n      if (pieceName === \"queen\" || pieceName === \"castle\") {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}","map":{"version":3,"names":["movePiece","toX","toY","setBoardState","setTakenPieces","item","boardState","square","squareIsEmpty","isOwner","piece","isAlive","pieceNameSplit","split","piecePathName","pieceImgPath","require","colour","prevState","sort","pieceName","row","col","hasMoved","canMovePiece","draggedPiece","state","dx","Math","abs","pieceState","dy","straightCollisions","checkStraightCollisions","collision","diagCollisions","checkDiagCollisions","moveNotInCheck","checkIfMoveInCheck","x","y","Object","entries","dirX","sign","dirY","i","max"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/components/Game.js"],"sourcesContent":["/**\r\n * Callback for setting the board state\r\n *\r\n * @callback setBoardState\r\n * @param {Object} board An dictionary representing the current board state\r\n */\r\n\r\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {setBoardState} setBoardState sets a new state of the board\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\r\nexport function movePiece(\r\n    toX,\r\n    toY,\r\n    setBoardState,\r\n    setTakenPieces,\r\n    item,\r\n    boardState\r\n) {\r\n    const square = squareIsEmpty(toX, toY, boardState);\r\n    if (square != null) {\r\n        if (!square.isOwner) {\r\n            boardState[square.piece].isAlive = false;\r\n\r\n            // Track what pieces are taken so that they can be rendered under player name\r\n            const pieceNameSplit = square.piece.split(\"_\");\r\n            const piecePathName = pieceNameSplit[0] + \"_\" + pieceNameSplit[1];\r\n            const pieceImgPath = require(\"../assets/images/pieces/\" +\r\n                piecePathName +\r\n                \".png\");\r\n\r\n            let colour;\r\n            if (pieceNameSplit[1] === \"w\") colour = \"white\";\r\n            else colour = \"black\";\r\n            // Sort the array of pieces so that matching pieces appear next to eachother\r\n            setTakenPieces((prevState) => ({\r\n                ...prevState,\r\n                [colour]: [...prevState[colour], pieceImgPath].sort(),\r\n            }));\r\n        }\r\n    }\r\n\r\n    // Update state of the moved piece\r\n    setBoardState((prevState) => ({\r\n        ...prevState,\r\n        [item.pieceName]: {\r\n            row: toY,\r\n            col: toX,\r\n            hasMoved: true,\r\n            isOwner: true,\r\n            isAlive: true,\r\n        },\r\n    }));\r\n}\r\n\r\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\r\nexport function canMovePiece(toX, toY, item, boardState, draggedPiece) {\r\n    const square = squareIsEmpty(toX, toY, boardState);\r\n\r\n    if (square && square.state.isOwner && square.state.isAlive) return false;\r\n\r\n    var dx = Math.abs(toX - item.pieceState.col);\r\n    var dy = Math.abs(toY - item.pieceState.row);\r\n\r\n    const pieceName = item.pieceName.split(\"_\")[0];\r\n\r\n    const straightCollisions = checkStraightCollisions(\r\n        toX,\r\n        toY,\r\n        boardState,\r\n        draggedPiece\r\n    ).collision;\r\n\r\n    const diagCollisions = checkDiagCollisions(\r\n        toX,\r\n        toY,\r\n        boardState,\r\n        draggedPiece\r\n    ).collision;\r\n\r\n    switch (pieceName) {\r\n        case \"castle\":\r\n            return (\r\n                ((dx === 0 && dy > 0) || (dx > 0 && dy === 0)) &&\r\n                !straightCollisions\r\n            );\r\n\r\n        case \"knight\":\r\n            return (dx === 2 && dy === 1) || (dx === 1 && dy === 2);\r\n\r\n        case \"bishop\":\r\n            return (\r\n                !(dx === 0 && dy > 0) &&\r\n                !(dx > 0 && dy === 0) &&\r\n                (dx === dy || dx === dy) &&\r\n                !diagCollisions\r\n            );\r\n\r\n        case \"queen\":\r\n            return (\r\n                (((dx === 0 && dy > 0) || (dx > 0 && dy === 0)) &&\r\n                    !straightCollisions) ||\r\n                ((dx === dy || dx === dy) && !diagCollisions)\r\n            );\r\n\r\n        case \"king\":\r\n            const moveNotInCheck = checkIfMoveInCheck(\r\n                toX,\r\n                toY,\r\n                boardState,\r\n                draggedPiece\r\n            );\r\n            return (\r\n                (dx === 1 || dx === 0) &&\r\n                (dy === 1 || dy === 0) &&\r\n                moveNotInCheck\r\n            );\r\n\r\n        case \"pawn\":\r\n            // Recalculate dx/dy with direction\r\n            dx = toX - item.pieceState.col;\r\n            dy = toY - item.pieceState.row;\r\n            // Allow pawn to move 2 squares on first move\r\n            if (!item.pieceState.hasMoved) {\r\n                // Negative direction moves up the board (player always at bottom)\r\n                if (\r\n                    dx === 0 &&\r\n                    (dy === -1 || dy === -2) &&\r\n                    !straightCollisions\r\n                ) {\r\n                    return square === null;\r\n                }\r\n            }\r\n            // Allow pawn to take opponents pieces diagonal by 1 square\r\n            if ((dx === 1 || dx === -1) && dy === -1 && square !== null)\r\n                return true;\r\n\r\n            // Allow pawn to move forward by 1 square\r\n            return dx === 0 && dy === -1 && square === null;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if the current square is empty\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @returns piece name and state if square is not empty, null otherwise\r\n */\r\nfunction squareIsEmpty(x, y, boardState) {\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        if (x === state.col && y === state.row) {\r\n            return { piece, state };\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Checks if there is a piece in the diagonal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\r\nfunction checkDiagCollisions(x, y, boardState, draggedPiece) {\r\n    // Get row and col of dragged piece\r\n    const row = draggedPiece.pieceState.row;\r\n    const col = draggedPiece.pieceState.col;\r\n\r\n    const dirX = Math.sign(x - col);\r\n    const dirY = Math.sign(y - row);\r\n    for (let i = 1; i < Math.abs(x - col) + 1; i++) {\r\n        for (const [piece, state] of Object.entries(boardState)) {\r\n            if (\r\n                col + i * dirX === state.col &&\r\n                row + i * dirY === state.row &&\r\n                state.isAlive\r\n            ) {\r\n                if (i !== Math.abs(x - col)) {\r\n                    // Stops opponents pieces from being taken when hidden behind each other\r\n                    return { piece: piece, collision: true };\r\n                }\r\n                return { piece: piece, collision: state.isOwner };\r\n            }\r\n        }\r\n    }\r\n    return { piece: null, collision: false };\r\n}\r\n\r\n/**\r\n * Checks if there is a piece in the vertical and horizontal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\r\nfunction checkStraightCollisions(x, y, boardState, draggedPiece) {\r\n    // Get row and col of dragged piece\r\n    const row = draggedPiece.pieceState.row;\r\n    const col = draggedPiece.pieceState.col;\r\n    // Get change in x and y between dragged piece and square\r\n    const dx = Math.abs(x - col);\r\n    const dy = Math.abs(y - row);\r\n\r\n    if (dx > 0 && dy > 0) return true;\r\n    const dirX = Math.sign(x - col);\r\n    const dirY = Math.sign(y - row);\r\n\r\n    for (let i = 1; i < Math.max(dx, dy) + 1; i++) {\r\n        for (const [piece, state] of Object.entries(boardState)) {\r\n            if (state.isAlive) {\r\n                // Move is horizontal if dy = 0, otherwise vertical\r\n                if (dy === 0) {\r\n                    if (col + i * dirX === state.col && row === state.row) {\r\n                        if (i !== Math.abs(x - col)) {\r\n                            // Stops opponents pieces from being taken when hidden behind each other\r\n                            return { piece: piece, collision: true };\r\n                        }\r\n                        return { piece: piece, collision: state.isOwner };\r\n                    }\r\n                } else {\r\n                    if (row + i * dirY === state.row && col === state.col) {\r\n                        if (i !== Math.abs(y - row)) {\r\n                            // Stops opponents pieces from being taken when hidden behind each other\r\n                            return { piece: piece, collision: true };\r\n                        }\r\n                        return { piece: piece, collision: state.isOwner };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return { piece: null, collision: false };\r\n}\r\n\r\nfunction checkIfMoveInCheck(x, y, boardState, draggedPiece) {\r\n    //\r\n    const row = draggedPiece.pieceState.row;\r\n    const col = draggedPiece.pieceState.col;\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        let straightCollisions = checkStraightCollisions(\r\n            state.col,\r\n            state.row,\r\n            boardState,\r\n            {\r\n                pieceState: { col: x, row: y },\r\n            }\r\n        );\r\n        if (straightCollisions.piece) {\r\n            const pieceName = straightCollisions.piece.split(\"_\")[0];\r\n            if (pieceName === \"queen\" || pieceName === \"castle\") {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}