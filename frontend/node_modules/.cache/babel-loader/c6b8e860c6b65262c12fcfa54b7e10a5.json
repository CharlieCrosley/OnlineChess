{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\charl\\\\Documents\\\\Code\\\\Web Dev\\\\Chess-Online\\\\chessproject\\\\frontend\\\\src\\\\pages\\\\Chess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { useLocation } from \"react-router-dom\";\nimport { GameContainer, GamePlayer, Player, TakenPieces } from \"./GameElements\";\nimport Board from \"../components/Board\";\nimport { checkIfOpponentInCheck } from \"../components/Game\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chess = () => {\n  _s();\n\n  const location = useLocation();\n  const [room] = useState(location.state.room);\n  const [name] = useState(location.state.name);\n  const [opponentName, setOpponentName] = useState(null);\n  const [playerColour] = useState(location.state.colour);\n  const [takenPieces, setTakenPieces] = useState({\n    white: [],\n    black: []\n  });\n  const [isTurn, setIsTurn] = useState(location.state.colour === \"white\" ? true : false);\n  /* require(\"../assets/images/pieces/pawn_b.png\"),\r\n  require(\"../assets/images/pieces/queen_b.png\"),\r\n  require(\"../assets/images/pieces/bishop_b.png\"),\r\n  require(\"../assets/images/pieces/king_b.png\"), */\n\n  const boardRotation = getBoardRotation(playerColour);\n  const isWhite = playerColour === \"white\"; // Sets initial piece positions ensuring that players colour is always at bottom\n\n  const [boardState, setBoardState] = useState(initBoardState(isWhite, boardRotation));\n  const [prevBoardState, setPrevBoardState] = useState(null);\n  const [audio] = useState({\n    check: new Audio(require(\"../assets/sounds/check.mp3\")),\n    move: new Audio(require(\"../assets/sounds/move.mp3\")),\n    capture: new Audio(require(\"../assets/sounds/capture.ogg\")),\n    end: new Audio(require(\"../assets/sounds/game_end.mp3\"))\n  });\n  const {\n    sendMessage,\n    readyState\n  } = useWebSocket(\"ws://127.0.0.1:8000/ws/\" + room + \"/\", {\n    onOpen: () => {\n      console.log(\"Connected!\");\n      sendMessage(JSON.stringify({\n        type: \"send_message\",\n        message: {\n          opponentName: name\n        },\n        event: \"START\"\n      }));\n    },\n    onClose: () => {\n      console.log(\"Disconnected!\");\n    },\n    onMessage: e => {\n      const dataFromServer = JSON.parse(e.data);\n\n      switch (dataFromServer.payload.event) {\n        case \"START\":\n          if (opponentName === null && dataFromServer.payload.message.opponentName !== name) {\n            //\n            console.log(dataFromServer.payload.message.opponentName);\n            setOpponentName(dataFromServer.payload.message.opponentName);\n            sendMessage(JSON.stringify({\n              type: \"send_message\",\n              message: {\n                opponentName: name\n              },\n              event: \"START\"\n            }));\n          }\n\n        case \"MOVE\":\n          // Ensure that the message is not from self\n          const senderColour = dataFromServer.payload.message.opponent.colour;\n\n          if (senderColour && senderColour !== playerColour) {\n            const flippedBoard = flipBoard(dataFromServer.payload.message.boardState);\n\n            if (JSON.stringify(flippedBoard) !== JSON.stringify(boardState)) {\n              setBoardState(flippedBoard);\n              setTakenPieces(dataFromServer.payload.message.takenPieces);\n              setOpponentName(dataFromServer.payload.message.opponent.name);\n            }\n          }\n\n      }\n    }\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: \"Connecting\",\n    [ReadyState.OPEN]: \"Open\",\n    [ReadyState.CLOSING]: \"Closing\",\n    [ReadyState.CLOSED]: \"Closed\",\n    [ReadyState.UNINSTANTIATED]: \"Uninstantiated\"\n  }[readyState];\n\n  const playMoveAudio = () => {\n    if (prevBoardState === null) return;\n\n    for (const [piece] of Object.entries(boardState)) {\n      // Check if any piece has been taken by comparing the new and old board states\n      if (boardState[piece].isAlive !== prevBoardState[piece].isAlive) {\n        audio.capture.play();\n        return;\n      }\n    } // If no piece has been taken, play the normal move sound\n\n\n    audio.move.play();\n  };\n\n  useEffect(() => {\n    // Send the current board state to the websocket group\n    // Only send message if the board state has changed to avoid infintite loop of sending\n    playMoveAudio();\n    console.log(\"audio\"); // Update the kings check state before sending\n\n    let opponentKing, playerKing;\n\n    if (boardState[\"king_w\"].isOwner) {\n      opponentKing = boardState[\"king_b\"];\n      playerKing = boardState[\"king_w\"];\n    } else {\n      opponentKing = boardState[\"king_w\"];\n      playerKing = boardState[\"king_b\"];\n    }\n\n    if (checkIfOpponentInCheck(boardState, opponentKing)) {\n      audio.check.play();\n      opponentKing.inCheck = true;\n    } else {\n      opponentKing.inCheck = false;\n    } // This state will be updated when on the opponents side and sent to the player\n\n\n    if (playerKing.inCheck) {\n      audio.check.play();\n    } // Swap turns\n\n\n    setIsTurn(prev => !prev);\n    setPrevBoardState(boardState);\n    sendMessage(JSON.stringify({\n      type: \"send_message\",\n      message: {\n        boardState,\n        takenPieces,\n        opponent: {\n          name: name,\n          colour: playerColour\n        }\n      },\n      event: \"MOVE\"\n    }));\n  }, [boardState]);\n  const opponentColour = playerColour === \"white\" ? \"black\" : \"white\";\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    children: /*#__PURE__*/_jsxDEV(GamePlayer, {\n      children: [/*#__PURE__*/_jsxDEV(Player, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: opponentName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TakenPieces, {\n          children: takenPieces[playerColour].map((piecePath, i) => {\n            return /*#__PURE__*/_jsxDEV(\"img\", {\n              src: piecePath\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        boardState: boardState,\n        setBoardState: setBoardState,\n        setTakenPieces: setTakenPieces,\n        isTurn: isTurn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Player, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TakenPieces, {\n          children: takenPieces[opponentColour].map((piecePath, i) => {\n            return /*#__PURE__*/_jsxDEV(\"img\", {\n              src: piecePath\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chess, \"fG5ynBjGam/ES2Ai+HvrzyLBZOY=\", false, function () {\n  return [useLocation, useWebSocket];\n});\n\n_c = Chess;\nexport default Chess;\n\nconst getBoardRotation = colour => {\n  if (colour === \"white\") return {\n    white: [7, 6],\n    black: [0, 1]\n  };else if (colour === \"black\") return {\n    white: [0, 1],\n    black: [7, 6]\n  };\n  throw \"Colour must be black or white\";\n};\n\nconst flipBoard = boardState => {\n  for (const [_, state] of Object.entries(boardState)) {\n    state.row = 7 - state.row;\n    state.col = 7 - state.col;\n    state.isOwner = !state.isOwner;\n  }\n\n  return boardState;\n};\n\nexport const initBoardState = (isWhite, boardRotation) => {\n  const pieceNames = [\"castle_w_1\", \"knight_w_1\", \"bishop_w_1\", \"queen_w\", \"king_w\", \"bishop_w_2\", \"knight_w_2\", \"castle_w_2\", \"pawn_w_1\", \"pawn_w_2\", \"pawn_w_3\", \"pawn_w_4\", \"pawn_w_5\", \"pawn_w_6\", \"pawn_w_7\", \"pawn_w_8\", \"castle_b_1\", \"knight_b_1\", \"bishop_b_1\", \"queen_b\", \"king_b\", \"bishop_b_2\", \"knight_b_2\", \"castle_b_2\", \"pawn_b_1\", \"pawn_b_2\", \"pawn_b_3\", \"pawn_b_4\", \"pawn_b_5\", \"pawn_b_6\", \"pawn_b_7\", \"pawn_b_8\"];\n  const boardState = {};\n\n  for (let i = 0; i < 32; i++) {\n    // First 16 elements in  pieces array are white rest are black\n    // Each 8 elements in array is a row\n    if (i < 16) {\n      let row;\n      if (i < 8) row = boardRotation.white[0];else row = boardRotation.white[1];\n      const properties = {\n        row: row,\n        col: i % 8,\n        hasMoved: false,\n        isOwner: isWhite,\n        isAlive: true\n      };\n\n      if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\n        properties[\"inCheck\"] = false;\n      }\n\n      boardState[pieceNames[i]] = properties;\n    } else {\n      let row;\n      if (i < 24) row = boardRotation.black[0];else row = boardRotation.black[1];\n      const properties = {\n        row: row,\n        col: i % 8,\n        hasMoved: false,\n        isOwner: !isWhite,\n        isAlive: true\n      };\n\n      if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\n        properties[\"inCheck\"] = false;\n      }\n\n      boardState[pieceNames[i]] = properties;\n    }\n  }\n\n  return boardState;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Chess\");","map":{"version":3,"names":["React","useState","useEffect","useWebSocket","ReadyState","useLocation","GameContainer","GamePlayer","Player","TakenPieces","Board","checkIfOpponentInCheck","Chess","location","room","state","name","opponentName","setOpponentName","playerColour","colour","takenPieces","setTakenPieces","white","black","isTurn","setIsTurn","boardRotation","getBoardRotation","isWhite","boardState","setBoardState","initBoardState","prevBoardState","setPrevBoardState","audio","check","Audio","require","move","capture","end","sendMessage","readyState","onOpen","console","log","JSON","stringify","type","message","event","onClose","onMessage","e","dataFromServer","parse","data","payload","senderColour","opponent","flippedBoard","flipBoard","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","playMoveAudio","piece","Object","entries","isAlive","play","opponentKing","playerKing","isOwner","inCheck","prev","opponentColour","map","piecePath","i","_","row","col","pieceNames","properties","hasMoved"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/pages/Chess.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { GameContainer, GamePlayer, Player, TakenPieces } from \"./GameElements\";\r\nimport Board from \"../components/Board\";\r\nimport { checkIfOpponentInCheck } from \"../components/Game\";\r\n\r\nconst Chess = () => {\r\n    const location = useLocation();\r\n\r\n    const [room] = useState(location.state.room);\r\n    const [name] = useState(location.state.name);\r\n    const [opponentName, setOpponentName] = useState(null);\r\n    const [playerColour] = useState(location.state.colour);\r\n    const [takenPieces, setTakenPieces] = useState({\r\n        white: [],\r\n        black: [],\r\n    });\r\n    const [isTurn, setIsTurn] = useState(\r\n        location.state.colour === \"white\" ? true : false\r\n    );\r\n\r\n    /* require(\"../assets/images/pieces/pawn_b.png\"),\r\n    require(\"../assets/images/pieces/queen_b.png\"),\r\n    require(\"../assets/images/pieces/bishop_b.png\"),\r\n    require(\"../assets/images/pieces/king_b.png\"), */\r\n\r\n    const boardRotation = getBoardRotation(playerColour);\r\n    const isWhite = playerColour === \"white\";\r\n    // Sets initial piece positions ensuring that players colour is always at bottom\r\n    const [boardState, setBoardState] = useState(\r\n        initBoardState(isWhite, boardRotation)\r\n    );\r\n    const [prevBoardState, setPrevBoardState] = useState(null);\r\n\r\n    const [audio] = useState({\r\n        check: new Audio(require(\"../assets/sounds/check.mp3\")),\r\n        move: new Audio(require(\"../assets/sounds/move.mp3\")),\r\n        capture: new Audio(require(\"../assets/sounds/capture.ogg\")),\r\n        end: new Audio(require(\"../assets/sounds/game_end.mp3\")),\r\n    });\r\n\r\n    const { sendMessage, readyState } = useWebSocket(\r\n        \"ws://127.0.0.1:8000/ws/\" + room + \"/\",\r\n        {\r\n            onOpen: () => {\r\n                console.log(\"Connected!\");\r\n                sendMessage(\r\n                    JSON.stringify({\r\n                        type: \"send_message\",\r\n                        message: { opponentName: name },\r\n                        event: \"START\",\r\n                    })\r\n                );\r\n            },\r\n            onClose: () => {\r\n                console.log(\"Disconnected!\");\r\n            },\r\n            onMessage: (e) => {\r\n                const dataFromServer = JSON.parse(e.data);\r\n                switch (dataFromServer.payload.event) {\r\n                    case \"START\":\r\n                        if (\r\n                            opponentName === null &&\r\n                            dataFromServer.payload.message.opponentName !== name\r\n                        ) {\r\n                            //\r\n                            console.log(\r\n                                dataFromServer.payload.message.opponentName\r\n                            );\r\n                            setOpponentName(\r\n                                dataFromServer.payload.message.opponentName\r\n                            );\r\n                            sendMessage(\r\n                                JSON.stringify({\r\n                                    type: \"send_message\",\r\n                                    message: { opponentName: name },\r\n                                    event: \"START\",\r\n                                })\r\n                            );\r\n                        }\r\n\r\n                    case \"MOVE\":\r\n                        // Ensure that the message is not from self\r\n                        const senderColour =\r\n                            dataFromServer.payload.message.opponent.colour;\r\n                        if (senderColour && senderColour !== playerColour) {\r\n                            const flippedBoard = flipBoard(\r\n                                dataFromServer.payload.message.boardState\r\n                            );\r\n                            if (\r\n                                JSON.stringify(flippedBoard) !==\r\n                                JSON.stringify(boardState)\r\n                            ) {\r\n                                setBoardState(flippedBoard);\r\n\r\n                                setTakenPieces(\r\n                                    dataFromServer.payload.message.takenPieces\r\n                                );\r\n                                setOpponentName(\r\n                                    dataFromServer.payload.message.opponent.name\r\n                                );\r\n                            }\r\n                        }\r\n                }\r\n            },\r\n        }\r\n    );\r\n\r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: \"Connecting\",\r\n        [ReadyState.OPEN]: \"Open\",\r\n        [ReadyState.CLOSING]: \"Closing\",\r\n        [ReadyState.CLOSED]: \"Closed\",\r\n        [ReadyState.UNINSTANTIATED]: \"Uninstantiated\",\r\n    }[readyState];\r\n\r\n    const playMoveAudio = () => {\r\n        if (prevBoardState === null) return;\r\n        for (const [piece] of Object.entries(boardState)) {\r\n            // Check if any piece has been taken by comparing the new and old board states\r\n            if (boardState[piece].isAlive !== prevBoardState[piece].isAlive) {\r\n                audio.capture.play();\r\n                return;\r\n            }\r\n        }\r\n        // If no piece has been taken, play the normal move sound\r\n        audio.move.play();\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Send the current board state to the websocket group\r\n        // Only send message if the board state has changed to avoid infintite loop of sending\r\n        playMoveAudio();\r\n        console.log(\"audio\");\r\n        // Update the kings check state before sending\r\n        let opponentKing, playerKing;\r\n        if (boardState[\"king_w\"].isOwner) {\r\n            opponentKing = boardState[\"king_b\"];\r\n            playerKing = boardState[\"king_w\"];\r\n        } else {\r\n            opponentKing = boardState[\"king_w\"];\r\n            playerKing = boardState[\"king_b\"];\r\n        }\r\n\r\n        if (checkIfOpponentInCheck(boardState, opponentKing)) {\r\n            audio.check.play();\r\n            opponentKing.inCheck = true;\r\n        } else {\r\n            opponentKing.inCheck = false;\r\n        }\r\n        // This state will be updated when on the opponents side and sent to the player\r\n        if (playerKing.inCheck) {\r\n            audio.check.play();\r\n        }\r\n\r\n        // Swap turns\r\n        setIsTurn((prev) => !prev);\r\n\r\n        setPrevBoardState(boardState);\r\n        sendMessage(\r\n            JSON.stringify({\r\n                type: \"send_message\",\r\n                message: {\r\n                    boardState,\r\n                    takenPieces,\r\n                    opponent: { name: name, colour: playerColour },\r\n                },\r\n                event: \"MOVE\",\r\n            })\r\n        );\r\n    }, [boardState]);\r\n\r\n    const opponentColour = playerColour === \"white\" ? \"black\" : \"white\";\r\n\r\n    return (\r\n        <GameContainer>\r\n            <GamePlayer>\r\n                {/* <div style={{ color: \"white\" }}>\r\n                    The WebSocket is currently {connectionStatus}\r\n                </div> */}\r\n                <Player>\r\n                    <div>{opponentName}</div>\r\n                    <TakenPieces>\r\n                        {takenPieces[playerColour].map((piecePath, i) => {\r\n                            return <img key={i} src={piecePath} />;\r\n                        })}\r\n                    </TakenPieces>\r\n                </Player>\r\n                <Board\r\n                    boardState={boardState}\r\n                    setBoardState={setBoardState}\r\n                    setTakenPieces={setTakenPieces}\r\n                    isTurn={isTurn}\r\n                />\r\n                <Player>\r\n                    <div>{name}</div>\r\n                    <TakenPieces>\r\n                        {takenPieces[opponentColour].map((piecePath, i) => {\r\n                            return <img key={i} src={piecePath} />;\r\n                        })}\r\n                    </TakenPieces>\r\n                </Player>\r\n            </GamePlayer>\r\n        </GameContainer>\r\n    );\r\n};\r\n\r\nexport default Chess;\r\n\r\nconst getBoardRotation = (colour) => {\r\n    if (colour === \"white\") return { white: [7, 6], black: [0, 1] };\r\n    else if (colour === \"black\") return { white: [0, 1], black: [7, 6] };\r\n    throw \"Colour must be black or white\";\r\n};\r\n\r\nconst flipBoard = (boardState) => {\r\n    for (const [_, state] of Object.entries(boardState)) {\r\n        state.row = 7 - state.row;\r\n        state.col = 7 - state.col;\r\n        state.isOwner = !state.isOwner;\r\n    }\r\n    return boardState;\r\n};\r\n\r\nexport const initBoardState = (isWhite, boardRotation) => {\r\n    const pieceNames = [\r\n        \"castle_w_1\",\r\n        \"knight_w_1\",\r\n        \"bishop_w_1\",\r\n        \"queen_w\",\r\n        \"king_w\",\r\n        \"bishop_w_2\",\r\n        \"knight_w_2\",\r\n        \"castle_w_2\",\r\n        \"pawn_w_1\",\r\n        \"pawn_w_2\",\r\n        \"pawn_w_3\",\r\n        \"pawn_w_4\",\r\n        \"pawn_w_5\",\r\n        \"pawn_w_6\",\r\n        \"pawn_w_7\",\r\n        \"pawn_w_8\",\r\n        \"castle_b_1\",\r\n        \"knight_b_1\",\r\n        \"bishop_b_1\",\r\n        \"queen_b\",\r\n        \"king_b\",\r\n        \"bishop_b_2\",\r\n        \"knight_b_2\",\r\n        \"castle_b_2\",\r\n        \"pawn_b_1\",\r\n        \"pawn_b_2\",\r\n        \"pawn_b_3\",\r\n        \"pawn_b_4\",\r\n        \"pawn_b_5\",\r\n        \"pawn_b_6\",\r\n        \"pawn_b_7\",\r\n        \"pawn_b_8\",\r\n    ];\r\n    const boardState = {};\r\n    for (let i = 0; i < 32; i++) {\r\n        // First 16 elements in  pieces array are white rest are black\r\n        // Each 8 elements in array is a row\r\n        if (i < 16) {\r\n            let row;\r\n            if (i < 8) row = boardRotation.white[0];\r\n            else row = boardRotation.white[1];\r\n            const properties = {\r\n                row: row,\r\n                col: i % 8,\r\n                hasMoved: false,\r\n                isOwner: isWhite,\r\n                isAlive: true,\r\n            };\r\n            if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\r\n                properties[\"inCheck\"] = false;\r\n            }\r\n            boardState[pieceNames[i]] = properties;\r\n        } else {\r\n            let row;\r\n            if (i < 24) row = boardRotation.black[0];\r\n            else row = boardRotation.black[1];\r\n            const properties = {\r\n                row: row,\r\n                col: i % 8,\r\n                hasMoved: false,\r\n                isOwner: !isWhite,\r\n                isAlive: true,\r\n            };\r\n            if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\r\n                properties[\"inCheck\"] = false;\r\n            }\r\n            boardState[pieceNames[i]] = properties;\r\n        }\r\n    }\r\n    return boardState;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}