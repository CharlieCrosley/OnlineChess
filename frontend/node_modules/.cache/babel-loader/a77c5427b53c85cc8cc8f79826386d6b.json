{"ast":null,"code":"export function movePiece(toX, toY, posHandler, item, boardState, pieceName, pieceState) {\n  const square = squareIsEmpty(toX, toY, boardState);\n  if (!item.pieceState.isAlive) return;\n\n  if (square != null) {\n    if (!square.isOwner) {\n      boardState[square.piece].isAlive = false;\n    }\n  }\n\n  posHandler(prevState => ({ ...prevState,\n    [item.pieceName]: {\n      row: toY,\n      col: toX,\n      hasMoved: true,\n      isOwner: true,\n      isAlive: true\n    }\n  }));\n}\nexport function canMovePiece(toX, toY, item, boardState) {\n  const dx = toX - item.pieceState.col;\n  const dy = toY - item.pieceState.row;\n  const pieceName = item.pieceName.split(\"_\")[0];\n\n  switch (pieceName) {\n    case \"castle\":\n      return Math.abs(dx) === 0 && Math.abs(dy) > 0 || Math.abs(dx) > 0 && Math.abs(dy) === 0;\n\n    case \"knight\":\n      return Math.abs(dx) === 2 && Math.abs(dy) === 1 || Math.abs(dx) === 1 && Math.abs(dy) === 2;\n\n    case \"bishop\":\n      return !(Math.abs(dx) === 0 && Math.abs(dy) > 0) && !(Math.abs(dx) > 0 && Math.abs(dy) === 0) && (Math.abs(dx) === Math.abs(dy) || Math.abs(dx) === Math.abs(dy));\n\n    case \"queen\":\n      return Math.abs(dx) === 0 && Math.abs(dy) > 0 || Math.abs(dx) > 0 && Math.abs(dy) === 0 || Math.abs(dx) === Math.abs(dy) || Math.abs(dx) === Math.abs(dy);\n\n    case \"king\":\n      return (Math.abs(dx) === 1 || Math.abs(dx) === 0) && (Math.abs(dy) === 1 || Math.abs(dy) === 0);\n\n    case \"pawn\":\n      if (!item.pieceState.hasMoved) // Negative direction moves up the board (player always at bottom)\n        return Math.abs(dx) === 0 && (dy === -1 || dy === -2);\n      return dx === 0 && dy === -1;\n\n    default:\n      break;\n  }\n}\n\nfunction squareIsEmpty(x, y, boardState) {\n  for (const [piece, state] of Object.entries(boardState)) {\n    if (x === state.col && y === state.row) {\n      return {\n        piece,\n        state\n      };\n    }\n  }\n\n  return null;\n}","map":{"version":3,"names":["movePiece","toX","toY","posHandler","item","boardState","pieceName","pieceState","square","squareIsEmpty","isAlive","isOwner","piece","prevState","row","col","hasMoved","canMovePiece","dx","dy","split","Math","abs","x","y","state","Object","entries"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/components/Game.js"],"sourcesContent":["export function movePiece(\r\n    toX,\r\n    toY,\r\n    posHandler,\r\n    item,\r\n    boardState,\r\n    pieceName,\r\n    pieceState\r\n) {\r\n    const square = squareIsEmpty(toX, toY, boardState);\r\n\r\n    if (!item.pieceState.isAlive) return;\r\n\r\n    if (square != null) {\r\n        if (!square.isOwner) {\r\n            boardState[square.piece].isAlive = false;\r\n        }\r\n    }\r\n\r\n    posHandler((prevState) => ({\r\n        ...prevState,\r\n        [item.pieceName]: {\r\n            row: toY,\r\n            col: toX,\r\n            hasMoved: true,\r\n            isOwner: true,\r\n            isAlive: true,\r\n        },\r\n    }));\r\n}\r\n\r\nexport function canMovePiece(toX, toY, item, boardState) {\r\n    const dx = toX - item.pieceState.col;\r\n    const dy = toY - item.pieceState.row;\r\n\r\n    const pieceName = item.pieceName.split(\"_\")[0];\r\n\r\n    switch (pieceName) {\r\n        case \"castle\":\r\n            return (\r\n                (Math.abs(dx) === 0 && Math.abs(dy) > 0) ||\r\n                (Math.abs(dx) > 0 && Math.abs(dy) === 0)\r\n            );\r\n\r\n        case \"knight\":\r\n            return (\r\n                (Math.abs(dx) === 2 && Math.abs(dy) === 1) ||\r\n                (Math.abs(dx) === 1 && Math.abs(dy) === 2)\r\n            );\r\n\r\n        case \"bishop\":\r\n            return (\r\n                !(Math.abs(dx) === 0 && Math.abs(dy) > 0) &&\r\n                !(Math.abs(dx) > 0 && Math.abs(dy) === 0) &&\r\n                (Math.abs(dx) === Math.abs(dy) || Math.abs(dx) === Math.abs(dy))\r\n            );\r\n\r\n        case \"queen\":\r\n            return (\r\n                (Math.abs(dx) === 0 && Math.abs(dy) > 0) ||\r\n                (Math.abs(dx) > 0 && Math.abs(dy) === 0) ||\r\n                Math.abs(dx) === Math.abs(dy) ||\r\n                Math.abs(dx) === Math.abs(dy)\r\n            );\r\n\r\n        case \"king\":\r\n            return (\r\n                (Math.abs(dx) === 1 || Math.abs(dx) === 0) &&\r\n                (Math.abs(dy) === 1 || Math.abs(dy) === 0)\r\n            );\r\n\r\n        case \"pawn\":\r\n            if (!item.pieceState.hasMoved)\r\n                // Negative direction moves up the board (player always at bottom)\r\n                return Math.abs(dx) === 0 && (dy === -1 || dy === -2);\r\n            return dx === 0 && dy === -1;\r\n\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nfunction squareIsEmpty(x, y, boardState) {\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        if (x === state.col && y === state.row) {\r\n            return { piece, state };\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}