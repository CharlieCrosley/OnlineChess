{"ast":null,"code":"import _objectSpread from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import useWebSocket from\"react-use-websocket\";import{useLocation,useNavigate}from\"react-router-dom\";import{Container,GameContainer,GamePlayer,Player,TakenPieces,Buttons,PlayerName,PlayerData,RoomNumber,Timer}from\"./GameElements\";import Board from\"../components/Board\";import{CheckIfOpponentInCheck,CanMovePiece}from\"../components/Game\";import GameOver from\"../components/GameOver\";import{Button}from\"../components/GameOverElements\";import{useTimer}from\"react-timer-hook\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Chess=function Chess(){var location=useLocation();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),start=_useState2[0],setStart=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),winner=_useState4[0],setWinner=_useState4[1];var _useState5=useState(location.state.room),_useState6=_slicedToArray(_useState5,1),room=_useState6[0];// Capitalise name\nvar _useState7=useState(location.state.name.charAt(0).toUpperCase()+location.state.name.slice(1)),_useState8=_slicedToArray(_useState7,1),name=_useState8[0];var _useState9=useState(null),_useState10=_slicedToArray(_useState9,2),opponentName=_useState10[0],setOpponentName=_useState10[1];var _useState11=useState(\"white\"),_useState12=_slicedToArray(_useState11,2),playerColour=_useState12[0],setPlayerColour=_useState12[1];var _useState13=useState({white:[require(\"../assets/images/pieces/queen_b.png\"),require(\"../assets/images/pieces/king_b.png\"),require(\"../assets/images/pieces/pawn_b.png\")],black:[require(\"../assets/images/pieces/queen_w.png\"),require(\"../assets/images/pieces/king_w.png\"),require(\"../assets/images/pieces/pawn_w.png\")]}),_useState14=_slicedToArray(_useState13,2),takenPieces=_useState14[0],setTakenPieces=_useState14[1];var _useState15=useState(true),_useState16=_slicedToArray(_useState15,2),isTurn=_useState16[0],setIsTurn=_useState16[1];// Sets initial piece positions ensuring that players colour is always at bottom\nvar _useState17=useState(initBoardState(playerColour===\"white\",getBoardRotation(playerColour))),_useState18=_slicedToArray(_useState17,2),boardState=_useState18[0],setBoardState=_useState18[1];var _useState19=useState(null),_useState20=_slicedToArray(_useState19,2),prevBoardState=_useState20[0],setPrevBoardState=_useState20[1];var _useState21=useState({check:new Audio(require(\"../assets/sounds/check.mp3\")),move:new Audio(require(\"../assets/sounds/move.mp3\")),capture:new Audio(require(\"../assets/sounds/capture.ogg\")),end:new Audio(require(\"../assets/sounds/game_end.mp3\"))}),_useState22=_slicedToArray(_useState21,1),audio=_useState22[0];var opponentColour=playerColour===\"white\"?\"black\":\"white\";var time=new Date();//time.setSeconds(time.getSeconds() + 600);\ntime.setSeconds(time.getSeconds()+20);var timer=useTimer({expiryTimestamp:time,autoStart:false,onExpire:function onExpire(){outOfTime(playerColour===\"white\"?\"black\":\"white\");timer.pause();}});var opponentTime=new Date();//time.setSeconds(time.getSeconds() + 600);\nopponentTime.setSeconds(time.getSeconds()+20);var opponentTimer=useTimer({expiryTimestamp:opponentTime,autoStart:false,onExpire:function onExpire(){outOfTime(playerColour);opponentTimer.pause();}});var outOfTime=function outOfTime(winnerColour){sendMessage(JSON.stringify({type:\"send_message\",message:{winnerColour:winnerColour},event:\"END\"}));};var _useWebSocket=useWebSocket(\"ws://127.0.0.1:8000/ws/\"+room+\"/\",{onOpen:function onOpen(){sendMessage(JSON.stringify({type:\"send_message\",message:{opponentName:name},event:\"JOIN\"}));},onMessage:function onMessage(e){var dataFromServer=JSON.parse(e.data);switch(dataFromServer.payload.event){case\"JOIN\":if(dataFromServer.payload.message.opponentName===name)break;setOpponentName(dataFromServer.payload.message.opponentName);sendMessage(JSON.stringify({type:\"send_message\",message:{opponentName:name,opponentColour:playerColour},event:\"JOIN_RESPONSE\"}));break;// Message received from player already in the room after joining\ncase\"JOIN_RESPONSE\":setStart(true);// Start whites timer\nif(playerColour===\"white\")timer.start();else opponentTimer.start();if(dataFromServer.payload.message.opponentName===name)break;setPlayerColour(\"black\");setIsTurn(false);setOpponentName(dataFromServer.payload.message.opponentName);break;case\"END\":// If a player receives the end message, they won\nsetWinner(dataFromServer.payload.message.winnerColour===playerColour);break;case\"MOVE\":// Ensure that the message is not from self\nif(dataFromServer.payload.message.opponent&&dataFromServer.payload.message.opponent.colour!==playerColour){var flippedBoard=flipBoard(dataFromServer.payload.message.boardState);// Make sure that the board state has changed\n// Board must be flipped since the opponent sees it from the other side\nif(JSON.stringify(flippedBoard)!==JSON.stringify(boardState)){playMoveAudio(flippedBoard);setBoardState(flippedBoard);setTakenPieces(dataFromServer.payload.message.takenPieces);}}break;case\"RESTART\":// Reset state and swap colour\nsetWinner(null);setTakenPieces({white:[],black:[]});setPlayerColour(opponentColour);setIsTurn(opponentColour===\"white\");break;}}}),sendMessage=_useWebSocket.sendMessage;useEffect(function(){// Reset the board the the colour is swapped\n// Dont do this when first joining a room\nif(prevBoardState!==null){setPrevBoardState(null);setBoardState(initBoardState(playerColour===\"white\",getBoardRotation(playerColour)));}},[playerColour]);var playMoveAudio=function playMoveAudio(newBoard){if(prevBoardState===null)return;// Pieces are removed from board state when taken\n// If there is a change in the number of pieces, one has been taken\nif(Object.keys(newBoard).length!==Object.keys(prevBoardState).length)audio.capture.play();// If no piece has been taken, play the normal move sound\nelse audio.move.play();};var handleCheckmate=function handleCheckmate(){// Update the kings check state\nvar opponentKing,playerKing;if(boardState[\"king_w\"].isOwner){opponentKing=boardState[\"king_b\"];playerKing=boardState[\"king_w\"];}else{opponentKing=boardState[\"king_w\"];playerKing=boardState[\"king_b\"];}if(CheckIfOpponentInCheck(boardState,opponentKing)){audio.check.play();opponentKing.inCheck=true;// disables castling after check\nopponentKing.hasBeenInCheck=true;}else{opponentKing.inCheck=false;}// This state will be updated when on the opponents side and sent to the player\nif(playerKing.inCheck){audio.check.play();}};var checkForGameOver=function checkForGameOver(){for(var y=0;y<8;y++){for(var x=0;x<8;x++){for(var _i=0,_Object$entries=Object.entries(boardState);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),piece=_Object$entries$_i[0],state=_Object$entries$_i[1];// If a piece can be moved, the game is not over\nif(state.isOwner&&state.isAlive&&CanMovePiece(x,y,{pieceName:piece,pieceState:state},boardState))return false;}}}return true;};useEffect(function(){// Send the current board state to the websocket group\n// Only send message if the board state has changed to avoid infintite loop of sending\nplayMoveAudio(boardState);handleCheckmate();if(prevBoardState){sendMessage(JSON.stringify({type:\"send_message\",message:{boardState:boardState,takenPieces:takenPieces,opponent:{name:name,colour:playerColour}},event:\"MOVE\"}));// True if there are no possible moves, meaning the opponent won\nif(checkForGameOver()){// Tell the other player that they won\nsendMessage(JSON.stringify({type:\"send_message\",message:{winnerColour:opponentColour},event:\"END\"}));}}// Swap turns\nsetIsTurn(function(prev){return!prev;});// Toggle timers\nif(start){if(isTurn){timer.start();opponentTimer.pause();}else{opponentTimer.start();timer.pause();}}setPrevBoardState(_objectSpread({},boardState));},[boardState]);var restartGame=function restartGame(){// Tell the group to restart game and switch sides\nsendMessage(JSON.stringify({type:\"send_message\",message:null,event:\"RESTART\"}));};var navigate=useNavigate();var exitRoom=function exitRoom(){// Return to room join page\nnavigate(\"/join\");};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsxs(Buttons,{children:[/*#__PURE__*/_jsx(Button,{style:{marginBottom:\"20px\"},colour:\"rgb(120, 210, 33)\",onClick:restartGame,children:\"Swap\"}),/*#__PURE__*/_jsx(Button,{colour:\"rgb(198, 34, 34)\",onClick:exitRoom,children:\"Exit\"})]}),/*#__PURE__*/_jsxs(GameContainer,{children:[/*#__PURE__*/_jsxs(RoomNumber,{children:[\"Room \",room]}),/*#__PURE__*/_jsxs(Player,{children:[/*#__PURE__*/_jsxs(PlayerData,{children:[/*#__PURE__*/_jsx(PlayerName,{children:opponentName}),/*#__PURE__*/_jsx(TakenPieces,{children:takenPieces[playerColour].map(function(piecePath,i){return/*#__PURE__*/_jsx(\"img\",{src:piecePath},i);})})]}),/*#__PURE__*/_jsxs(Timer,{children:[/*#__PURE__*/_jsx(\"span\",{children:opponentTimer.minutes}),\":\",/*#__PURE__*/_jsx(\"span\",{children:opponentTimer.seconds})]})]}),/*#__PURE__*/_jsxs(GamePlayer,{children:[/*#__PURE__*/_jsx(Board,{boardState:boardState,setBoardState:setBoardState,setTakenPieces:setTakenPieces,isTurn:isTurn}),/*#__PURE__*/_jsx(GameOver,{show:winner!==null,winner:winner,restartGame:restartGame,exitRoom:exitRoom})]}),/*#__PURE__*/_jsxs(Player,{children:[/*#__PURE__*/_jsxs(PlayerData,{children:[/*#__PURE__*/_jsx(PlayerName,{children:name}),/*#__PURE__*/_jsx(TakenPieces,{children:takenPieces[opponentColour].map(function(piecePath,i){return/*#__PURE__*/_jsx(\"img\",{src:piecePath},i);})})]}),/*#__PURE__*/_jsxs(Timer,{children:[/*#__PURE__*/_jsx(\"span\",{children:timer.minutes}),\":\",/*#__PURE__*/_jsx(\"span\",{children:timer.seconds})]})]})]})]});};export default Chess;var getBoardRotation=function getBoardRotation(colour){if(colour===\"white\")return{white:[7,6],black:[0,1]};else if(colour===\"black\")return{white:[0,1],black:[7,6]};throw\"Colour must be black or white\";};var flipBoard=function flipBoard(boardState){for(var _i2=0,_Object$entries2=Object.entries(boardState);_i2<_Object$entries2.length;_i2++){var _Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),key=_Object$entries2$_i[0],state=_Object$entries2$_i[1];if(key!==\"turn\"){state.row=7-state.row;state.isOwner=!state.isOwner;}}return boardState;};export var initBoardState=function initBoardState(isWhite,boardRotation){var pieceNames=[\"castle_w_1\",\"knight_w_1\",\"bishop_w_1\",\"queen_w\",\"king_w\",\"bishop_w_2\",\"knight_w_2\",\"castle_w_2\",\"pawn_w_1\",\"pawn_w_2\",\"pawn_w_3\",\"pawn_w_4\",\"pawn_w_5\",\"pawn_w_6\",\"pawn_w_7\",\"pawn_w_8\",\"castle_b_1\",\"knight_b_1\",\"bishop_b_1\",\"queen_b\",\"king_b\",\"bishop_b_2\",\"knight_b_2\",\"castle_b_2\",\"pawn_b_1\",\"pawn_b_2\",\"pawn_b_3\",\"pawn_b_4\",\"pawn_b_5\",\"pawn_b_6\",\"pawn_b_7\",\"pawn_b_8\"];var boardState={};for(var i=0;i<32;i++){var pieceName=pieceNames[i].split(\"_\")[0];// First 16 elements in  pieces array are white rest are black\n// Each 8 elements in array is a row\nif(i<16){var row=void 0;if(i<8)row=boardRotation.white[0];else row=boardRotation.white[1];var properties={row:row,col:i%8,isOwner:isWhite,isAlive:true};if(pieceName===\"king\"){properties[\"inCheck\"]=false;// Used to disable castling\nproperties[\"hasBeenInCheck\"]=false;properties[\"hasMoved\"]=false;}else if(pieceName===\"castle\"){properties[\"hasMoved\"]=false;}else if(pieceName===\"pawn\"){// Used for en passant since en passant can only happen on the same turn\nproperties[\"movedTwoSquaresTurn\"]=null;properties[\"hasMoved\"]=false;}boardState[pieceNames[i]]=properties;}else{var _row=void 0;if(i<24)_row=boardRotation.black[0];else _row=boardRotation.black[1];var _properties={row:_row,col:i%8,isOwner:!isWhite,isAlive:true};if(pieceName===\"king\"){_properties[\"inCheck\"]=false;// Used to disable castling\n_properties[\"hasBeenInCheck\"]=false;_properties[\"hasMoved\"]=false;}else if(pieceName===\"castle\"||pieceName===\"pawn\"){_properties[\"hasMoved\"]=false;}boardState[pieceNames[i]]=_properties;}}boardState[\"turn\"]=0;return boardState;};","map":{"version":3,"names":["React","useState","useEffect","useWebSocket","useLocation","useNavigate","Container","GameContainer","GamePlayer","Player","TakenPieces","Buttons","PlayerName","PlayerData","RoomNumber","Timer","Board","CheckIfOpponentInCheck","CanMovePiece","GameOver","Button","useTimer","Chess","location","start","setStart","winner","setWinner","state","room","name","charAt","toUpperCase","slice","opponentName","setOpponentName","playerColour","setPlayerColour","white","require","black","takenPieces","setTakenPieces","isTurn","setIsTurn","initBoardState","getBoardRotation","boardState","setBoardState","prevBoardState","setPrevBoardState","check","Audio","move","capture","end","audio","opponentColour","time","Date","setSeconds","getSeconds","timer","expiryTimestamp","autoStart","onExpire","outOfTime","pause","opponentTime","opponentTimer","winnerColour","sendMessage","JSON","stringify","type","message","event","onOpen","onMessage","e","dataFromServer","parse","data","payload","opponent","colour","flippedBoard","flipBoard","playMoveAudio","newBoard","Object","keys","length","play","handleCheckmate","opponentKing","playerKing","isOwner","inCheck","hasBeenInCheck","checkForGameOver","y","x","entries","piece","isAlive","pieceName","pieceState","prev","restartGame","navigate","exitRoom","marginBottom","map","piecePath","i","minutes","seconds","key","row","isWhite","boardRotation","pieceNames","split","properties","col"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/pages/Chess.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useWebSocket from \"react-use-websocket\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport {\r\n    Container,\r\n    GameContainer,\r\n    GamePlayer,\r\n    Player,\r\n    TakenPieces,\r\n    Buttons,\r\n    PlayerName,\r\n    PlayerData,\r\n    RoomNumber,\r\n    Timer,\r\n} from \"./GameElements\";\r\nimport Board from \"../components/Board\";\r\nimport { CheckIfOpponentInCheck, CanMovePiece } from \"../components/Game\";\r\nimport GameOver from \"../components/GameOver\";\r\nimport { Button } from \"../components/GameOverElements\";\r\nimport { useTimer } from \"react-timer-hook\";\r\n\r\nconst Chess = () => {\r\n    const location = useLocation();\r\n\r\n    const [start, setStart] = useState(false);\r\n    const [winner, setWinner] = useState(null);\r\n    const [room] = useState(location.state.room);\r\n    // Capitalise name\r\n    const [name] = useState(\r\n        location.state.name.charAt(0).toUpperCase() +\r\n            location.state.name.slice(1)\r\n    );\r\n    const [opponentName, setOpponentName] = useState(null);\r\n    const [playerColour, setPlayerColour] = useState(\"white\");\r\n    const [takenPieces, setTakenPieces] = useState({\r\n        white: [\r\n            require(\"../assets/images/pieces/queen_b.png\"),\r\n            require(\"../assets/images/pieces/king_b.png\"),\r\n            require(\"../assets/images/pieces/pawn_b.png\"),\r\n        ],\r\n        black: [\r\n            require(\"../assets/images/pieces/queen_w.png\"),\r\n            require(\"../assets/images/pieces/king_w.png\"),\r\n            require(\"../assets/images/pieces/pawn_w.png\"),\r\n        ],\r\n    });\r\n    const [isTurn, setIsTurn] = useState(true);\r\n\r\n    // Sets initial piece positions ensuring that players colour is always at bottom\r\n    const [boardState, setBoardState] = useState(\r\n        initBoardState(playerColour === \"white\", getBoardRotation(playerColour))\r\n    );\r\n    const [prevBoardState, setPrevBoardState] = useState(null);\r\n\r\n    const [audio] = useState({\r\n        check: new Audio(require(\"../assets/sounds/check.mp3\")),\r\n        move: new Audio(require(\"../assets/sounds/move.mp3\")),\r\n        capture: new Audio(require(\"../assets/sounds/capture.ogg\")),\r\n        end: new Audio(require(\"../assets/sounds/game_end.mp3\")),\r\n    });\r\n\r\n    const opponentColour = playerColour === \"white\" ? \"black\" : \"white\";\r\n\r\n    const time = new Date();\r\n    //time.setSeconds(time.getSeconds() + 600);\r\n    time.setSeconds(time.getSeconds() + 20);\r\n\r\n    const timer = useTimer({\r\n        expiryTimestamp: time,\r\n        autoStart: false,\r\n        onExpire: () => {\r\n            outOfTime(playerColour === \"white\" ? \"black\" : \"white\");\r\n            timer.pause();\r\n        },\r\n    });\r\n\r\n    const opponentTime = new Date();\r\n    //time.setSeconds(time.getSeconds() + 600);\r\n    opponentTime.setSeconds(time.getSeconds() + 20);\r\n\r\n    const opponentTimer = useTimer({\r\n        expiryTimestamp: opponentTime,\r\n        autoStart: false,\r\n        onExpire: () => {\r\n            outOfTime(playerColour);\r\n            opponentTimer.pause();\r\n        },\r\n    });\r\n\r\n    const outOfTime = (winnerColour) => {\r\n        sendMessage(\r\n            JSON.stringify({\r\n                type: \"send_message\",\r\n                message: { winnerColour: winnerColour },\r\n                event: \"END\",\r\n            })\r\n        );\r\n    };\r\n\r\n    const { sendMessage } = useWebSocket(\r\n        \"ws://127.0.0.1:8000/ws/\" + room + \"/\",\r\n        {\r\n            onOpen: () => {\r\n                sendMessage(\r\n                    JSON.stringify({\r\n                        type: \"send_message\",\r\n                        message: {\r\n                            opponentName: name,\r\n                        },\r\n                        event: \"JOIN\",\r\n                    })\r\n                );\r\n            },\r\n            onMessage: (e) => {\r\n                const dataFromServer = JSON.parse(e.data);\r\n                switch (dataFromServer.payload.event) {\r\n                    case \"JOIN\":\r\n                        if (\r\n                            dataFromServer.payload.message.opponentName === name\r\n                        )\r\n                            break;\r\n                        setOpponentName(\r\n                            dataFromServer.payload.message.opponentName\r\n                        );\r\n\r\n                        sendMessage(\r\n                            JSON.stringify({\r\n                                type: \"send_message\",\r\n                                message: {\r\n                                    opponentName: name,\r\n                                    opponentColour: playerColour,\r\n                                },\r\n                                event: \"JOIN_RESPONSE\",\r\n                            })\r\n                        );\r\n\r\n                        break;\r\n\r\n                    // Message received from player already in the room after joining\r\n                    case \"JOIN_RESPONSE\":\r\n                        setStart(true);\r\n\r\n                        // Start whites timer\r\n                        if (playerColour === \"white\") timer.start();\r\n                        else opponentTimer.start();\r\n                        if (\r\n                            dataFromServer.payload.message.opponentName === name\r\n                        )\r\n                            break;\r\n\r\n                        setPlayerColour(\"black\");\r\n                        setIsTurn(false);\r\n                        setOpponentName(\r\n                            dataFromServer.payload.message.opponentName\r\n                        );\r\n                        break;\r\n\r\n                    case \"END\":\r\n                        // If a player receives the end message, they won\r\n                        setWinner(\r\n                            dataFromServer.payload.message.winnerColour ===\r\n                                playerColour\r\n                        );\r\n                        break;\r\n\r\n                    case \"MOVE\":\r\n                        // Ensure that the message is not from self\r\n                        if (\r\n                            dataFromServer.payload.message.opponent &&\r\n                            dataFromServer.payload.message.opponent.colour !==\r\n                                playerColour\r\n                        ) {\r\n                            const flippedBoard = flipBoard(\r\n                                dataFromServer.payload.message.boardState\r\n                            );\r\n                            // Make sure that the board state has changed\r\n                            // Board must be flipped since the opponent sees it from the other side\r\n                            if (\r\n                                JSON.stringify(flippedBoard) !==\r\n                                JSON.stringify(boardState)\r\n                            ) {\r\n                                playMoveAudio(flippedBoard);\r\n                                setBoardState(flippedBoard);\r\n\r\n                                setTakenPieces(\r\n                                    dataFromServer.payload.message.takenPieces\r\n                                );\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case \"RESTART\":\r\n                        // Reset state and swap colour\r\n                        setWinner(null);\r\n                        setTakenPieces({\r\n                            white: [],\r\n                            black: [],\r\n                        });\r\n                        setPlayerColour(opponentColour);\r\n                        setIsTurn(opponentColour === \"white\");\r\n                        break;\r\n                }\r\n            },\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Reset the board the the colour is swapped\r\n        // Dont do this when first joining a room\r\n        if (prevBoardState !== null) {\r\n            setPrevBoardState(null);\r\n            setBoardState(\r\n                initBoardState(\r\n                    playerColour === \"white\",\r\n                    getBoardRotation(playerColour)\r\n                )\r\n            );\r\n        }\r\n    }, [playerColour]);\r\n\r\n    const playMoveAudio = (newBoard) => {\r\n        if (prevBoardState === null) return;\r\n        // Pieces are removed from board state when taken\r\n        // If there is a change in the number of pieces, one has been taken\r\n        if (Object.keys(newBoard).length !== Object.keys(prevBoardState).length)\r\n            audio.capture.play();\r\n        // If no piece has been taken, play the normal move sound\r\n        else audio.move.play();\r\n    };\r\n\r\n    const handleCheckmate = () => {\r\n        // Update the kings check state\r\n        let opponentKing, playerKing;\r\n        if (boardState[\"king_w\"].isOwner) {\r\n            opponentKing = boardState[\"king_b\"];\r\n            playerKing = boardState[\"king_w\"];\r\n        } else {\r\n            opponentKing = boardState[\"king_w\"];\r\n            playerKing = boardState[\"king_b\"];\r\n        }\r\n\r\n        if (CheckIfOpponentInCheck(boardState, opponentKing)) {\r\n            audio.check.play();\r\n            opponentKing.inCheck = true;\r\n            // disables castling after check\r\n            opponentKing.hasBeenInCheck = true;\r\n        } else {\r\n            opponentKing.inCheck = false;\r\n        }\r\n        // This state will be updated when on the opponents side and sent to the player\r\n        if (playerKing.inCheck) {\r\n            audio.check.play();\r\n        }\r\n    };\r\n\r\n    const checkForGameOver = () => {\r\n        for (let y = 0; y < 8; y++) {\r\n            for (let x = 0; x < 8; x++) {\r\n                for (const [piece, state] of Object.entries(boardState)) {\r\n                    // If a piece can be moved, the game is not over\r\n                    if (\r\n                        state.isOwner &&\r\n                        state.isAlive &&\r\n                        CanMovePiece(\r\n                            x,\r\n                            y,\r\n                            { pieceName: piece, pieceState: state },\r\n                            boardState\r\n                        )\r\n                    )\r\n                        return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Send the current board state to the websocket group\r\n        // Only send message if the board state has changed to avoid infintite loop of sending\r\n        playMoveAudio(boardState);\r\n        handleCheckmate();\r\n\r\n        if (prevBoardState) {\r\n            sendMessage(\r\n                JSON.stringify({\r\n                    type: \"send_message\",\r\n                    message: {\r\n                        boardState,\r\n                        takenPieces,\r\n                        opponent: { name: name, colour: playerColour },\r\n                    },\r\n                    event: \"MOVE\",\r\n                })\r\n            );\r\n\r\n            // True if there are no possible moves, meaning the opponent won\r\n            if (checkForGameOver()) {\r\n                // Tell the other player that they won\r\n                sendMessage(\r\n                    JSON.stringify({\r\n                        type: \"send_message\",\r\n                        message: { winnerColour: opponentColour },\r\n                        event: \"END\",\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        // Swap turns\r\n        setIsTurn((prev) => !prev);\r\n        // Toggle timers\r\n        if (start) {\r\n            if (isTurn) {\r\n                timer.start();\r\n                opponentTimer.pause();\r\n            } else {\r\n                opponentTimer.start();\r\n                timer.pause();\r\n            }\r\n        }\r\n\r\n        setPrevBoardState({ ...boardState });\r\n    }, [boardState]);\r\n\r\n    const restartGame = () => {\r\n        // Tell the group to restart game and switch sides\r\n        sendMessage(\r\n            JSON.stringify({\r\n                type: \"send_message\",\r\n                message: null,\r\n                event: \"RESTART\",\r\n            })\r\n        );\r\n    };\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const exitRoom = () => {\r\n        // Return to room join page\r\n        navigate(\"/join\");\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Buttons>\r\n                <Button\r\n                    style={{ marginBottom: \"20px\" }}\r\n                    colour={\"rgb(120, 210, 33)\"}\r\n                    onClick={restartGame}\r\n                >\r\n                    Swap\r\n                </Button>\r\n                <Button colour={\"rgb(198, 34, 34)\"} onClick={exitRoom}>\r\n                    Exit\r\n                </Button>\r\n            </Buttons>\r\n            <GameContainer>\r\n                <RoomNumber>Room {room}</RoomNumber>\r\n\r\n                <Player>\r\n                    <PlayerData>\r\n                        <PlayerName>{opponentName}</PlayerName>\r\n                        <TakenPieces>\r\n                            {takenPieces[playerColour].map((piecePath, i) => {\r\n                                return <img key={i} src={piecePath} />;\r\n                            })}\r\n                        </TakenPieces>\r\n                    </PlayerData>\r\n                    <Timer>\r\n                        <span>{opponentTimer.minutes}</span>:\r\n                        <span>{opponentTimer.seconds}</span>\r\n                    </Timer>\r\n                </Player>\r\n                <GamePlayer>\r\n                    <Board\r\n                        boardState={boardState}\r\n                        setBoardState={setBoardState}\r\n                        setTakenPieces={setTakenPieces}\r\n                        isTurn={isTurn}\r\n                    />\r\n                    <GameOver\r\n                        show={winner !== null}\r\n                        winner={winner}\r\n                        restartGame={restartGame}\r\n                        exitRoom={exitRoom}\r\n                    />\r\n                </GamePlayer>\r\n                <Player>\r\n                    <PlayerData>\r\n                        <PlayerName>{name}</PlayerName>\r\n                        <TakenPieces>\r\n                            {takenPieces[opponentColour].map((piecePath, i) => {\r\n                                return <img key={i} src={piecePath} />;\r\n                            })}\r\n                        </TakenPieces>\r\n                    </PlayerData>\r\n\r\n                    <Timer>\r\n                        <span>{timer.minutes}</span>:\r\n                        <span>{timer.seconds}</span>\r\n                    </Timer>\r\n                </Player>\r\n            </GameContainer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Chess;\r\n\r\nconst getBoardRotation = (colour) => {\r\n    if (colour === \"white\") return { white: [7, 6], black: [0, 1] };\r\n    else if (colour === \"black\") return { white: [0, 1], black: [7, 6] };\r\n    throw \"Colour must be black or white\";\r\n};\r\n\r\nconst flipBoard = (boardState) => {\r\n    for (const [key, state] of Object.entries(boardState)) {\r\n        if (key !== \"turn\") {\r\n            state.row = 7 - state.row;\r\n            state.isOwner = !state.isOwner;\r\n        }\r\n    }\r\n    return boardState;\r\n};\r\n\r\nexport const initBoardState = (isWhite, boardRotation) => {\r\n    const pieceNames = [\r\n        \"castle_w_1\",\r\n        \"knight_w_1\",\r\n        \"bishop_w_1\",\r\n        \"queen_w\",\r\n        \"king_w\",\r\n        \"bishop_w_2\",\r\n        \"knight_w_2\",\r\n        \"castle_w_2\",\r\n        \"pawn_w_1\",\r\n        \"pawn_w_2\",\r\n        \"pawn_w_3\",\r\n        \"pawn_w_4\",\r\n        \"pawn_w_5\",\r\n        \"pawn_w_6\",\r\n        \"pawn_w_7\",\r\n        \"pawn_w_8\",\r\n        \"castle_b_1\",\r\n        \"knight_b_1\",\r\n        \"bishop_b_1\",\r\n        \"queen_b\",\r\n        \"king_b\",\r\n        \"bishop_b_2\",\r\n        \"knight_b_2\",\r\n        \"castle_b_2\",\r\n        \"pawn_b_1\",\r\n        \"pawn_b_2\",\r\n        \"pawn_b_3\",\r\n        \"pawn_b_4\",\r\n        \"pawn_b_5\",\r\n        \"pawn_b_6\",\r\n        \"pawn_b_7\",\r\n        \"pawn_b_8\",\r\n    ];\r\n    const boardState = {};\r\n    for (let i = 0; i < 32; i++) {\r\n        const pieceName = pieceNames[i].split(\"_\")[0];\r\n        // First 16 elements in  pieces array are white rest are black\r\n        // Each 8 elements in array is a row\r\n        if (i < 16) {\r\n            let row;\r\n            if (i < 8) row = boardRotation.white[0];\r\n            else row = boardRotation.white[1];\r\n            const properties = {\r\n                row: row,\r\n                col: i % 8,\r\n                isOwner: isWhite,\r\n                isAlive: true,\r\n            };\r\n            if (pieceName === \"king\") {\r\n                properties[\"inCheck\"] = false;\r\n                // Used to disable castling\r\n                properties[\"hasBeenInCheck\"] = false;\r\n                properties[\"hasMoved\"] = false;\r\n            } else if (pieceName === \"castle\") {\r\n                properties[\"hasMoved\"] = false;\r\n            } else if (pieceName === \"pawn\") {\r\n                // Used for en passant since en passant can only happen on the same turn\r\n                properties[\"movedTwoSquaresTurn\"] = null;\r\n                properties[\"hasMoved\"] = false;\r\n            }\r\n\r\n            boardState[pieceNames[i]] = properties;\r\n        } else {\r\n            let row;\r\n            if (i < 24) row = boardRotation.black[0];\r\n            else row = boardRotation.black[1];\r\n            const properties = {\r\n                row: row,\r\n                col: i % 8,\r\n                isOwner: !isWhite,\r\n                isAlive: true,\r\n            };\r\n            if (pieceName === \"king\") {\r\n                properties[\"inCheck\"] = false;\r\n                // Used to disable castling\r\n                properties[\"hasBeenInCheck\"] = false;\r\n                properties[\"hasMoved\"] = false;\r\n            } else if (pieceName === \"castle\" || pieceName === \"pawn\") {\r\n                properties[\"hasMoved\"] = false;\r\n            }\r\n\r\n            boardState[pieceNames[i]] = properties;\r\n        }\r\n    }\r\n    boardState[\"turn\"] = 0;\r\n    return boardState;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}