{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\charl\\\\Documents\\\\Code\\\\Web Dev\\\\Chess-Online\\\\chessproject\\\\frontend\\\\src\\\\pages\\\\Chess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { GameContainer, GamePlayer, GameWrap } from \"./GameElements\";\nimport Board from \"../components/Board\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chess = () => {\n  _s();\n\n  const [knightPosition, setPosition] = useState([0, 0]);\n  const [room, setRoom] = useState(1);\n  const {\n    readyState\n  } = useWebSocket(\"ws://127.0.0.1:8000/ws/\" + room + \"/\", {\n    onOpen: () => {\n      console.log(\"Connected!\");\n    },\n    onClose: () => {\n      console.log(\"Disconnected!\");\n    },\n    onMessage: e => {\n      const dataFromServer = JSON.parse(e.data);\n      console.log(dataFromServer);\n    }\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: \"Connecting\",\n    [ReadyState.OPEN]: \"Open\",\n    [ReadyState.CLOSING]: \"Closing\",\n    [ReadyState.CLOSED]: \"Closed\",\n    [ReadyState.UNINSTANTIATED]: \"Uninstantiated\"\n  }[readyState];\n  const [piecePositions, setPiecePosition] = useState({\n    castle_w_1: {\n      row: 0,\n      col: 0\n    },\n    knight_w_1: {\n      row: 0,\n      col: 1\n    },\n    bishop_w_1: {\n      row: 0,\n      col: 2\n    },\n    queen_w: {\n      row: 0,\n      col: 3\n    },\n    king_w: {\n      row: 0,\n      col: 4\n    },\n    castle_w_2: {\n      row: 0,\n      col: 7\n    },\n    knight_w_2: {\n      row: 0,\n      col: 6\n    },\n    bishop_w_2: {\n      row: 0,\n      col: 5\n    },\n    castle_b_1: {\n      row: 7,\n      col: 0\n    },\n    knight_b_1: {\n      row: 7,\n      col: 1\n    },\n    bishop_b_1: {\n      row: 7,\n      col: 2\n    },\n    queen_b: {\n      row: 7,\n      col: 3\n    },\n    king_b: {\n      row: 7,\n      col: 4\n    },\n    castle_b_2: {\n      row: 7,\n      col: 7\n    },\n    knight_b_2: {\n      row: 7,\n      col: 6\n    },\n    bishop_b_2: {\n      row: 7,\n      col: 5\n    }\n  });\n\n  const changePosition = (x, y) => {\n    setPosition([x, y]);\n    /* setPosition(previousState => {\r\n    return { ...previousState, piece: [x, y] }\r\n    }); */\n  };\n\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    children: /*#__PURE__*/_jsxDEV(GamePlayer, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"The WebSocket is currently \", connectionStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        knightPosition: knightPosition,\n        piecePositions: piecePositions,\n        posHandler: changePosition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chess, \"Kprd2BQKd7qymo8rKooJWzmpRso=\", false, function () {\n  return [useWebSocket];\n});\n\n_c = Chess;\nexport default Chess;\n/* var roomCode = document.getElementById(\"game_board\").getAttribute(\"room_code\");\r\nvar char_choice = document\r\n    .getElementById(\"game_board\")\r\n    .getAttribute(\"char_choice\");\r\n\r\nvar connectionString =\r\n    \"ws://\" + window.location.host + \"/ws/play/\" + roomCode + \"/\";\r\nvar gameSocket = new WebSocket(connectionString);\r\n\r\nlet myturn = true;\r\n\r\nfunction make_move(index, player) {\r\n    index = parseInt(index);\r\n    let data = {\r\n        event: \"MOVE\",\r\n        message: {\r\n            index: index,\r\n            player: player,\r\n        },\r\n    };\r\n\r\n    if (gameBoard[index] == -1) {\r\n        moveCount++;\r\n        if (player == \"X\") gameBoard[index] = 1;\r\n        else if (player == \"O\") gameBoard[index] = 0;\r\n        else {\r\n            alert(\"Invalid character choice\");\r\n            return false;\r\n        }\r\n        gameSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    elementArray[index].innerHTML = player;\r\n    const win = checkWinner();\r\n    if (myturn) {\r\n        if (win) {\r\n            data = {\r\n                event: \"END\",\r\n                message: `${player} is a winner. Play again?`,\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        } else if (!win && moveCount == 9) {\r\n            data = {\r\n                event: \"END\",\r\n                message: \"It's a draw. Play again?\",\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        }\r\n    }\r\n}\r\n\r\nfunction connect() {\r\n    gameSocket.onopen = function open() {\r\n        console.log(\"WebSockets connection created.\");\r\n        gameSocket.send(\r\n            JSON.stringify({\r\n                event: \"START\",\r\n                message: \"\",\r\n            })\r\n        );\r\n    };\r\n\r\n    gameSocket.onclose = function (e) {\r\n        console.log(\r\n            \"Socket is closed. Reconnect will be attempted in 1 second.\",\r\n            e.reason\r\n        );\r\n        setTimeout(function () {\r\n            connect();\r\n        }, 1000);\r\n    };\r\n    // Sending the info about the room\r\n    gameSocket.onmessage = function (e) {\r\n        let data = JSON.parse(e.data);\r\n        data = data[\"payload\"];\r\n        let message = data[\"message\"];\r\n        let event = data[\"event\"];\r\n        switch (event) {\r\n            case \"START\":\r\n                //reset();\r\n                break;\r\n            case \"END\":\r\n                alert(message);\r\n                //reset();\r\n                break;\r\n            case \"MOVE\":\r\n                if (message[\"player\"] != char_choice) {\r\n                    make_move(message[\"index\"], message[\"player\"]);\r\n                    myturn = true;\r\n                    document.getElementById(\"alert_move\").style.display =\r\n                        \"inline\";\r\n                }\r\n                break;\r\n            default:\r\n                console.log(\"No event\");\r\n        }\r\n    };\r\n\r\n    if (gameSocket.readyState == WebSocket.OPEN) {\r\n        gameSocket.onopen();\r\n    }\r\n}\r\n\r\nconnect(); */\n\nvar _c;\n\n$RefreshReg$(_c, \"Chess\");","map":{"version":3,"names":["React","useState","useWebSocket","ReadyState","GameContainer","GamePlayer","GameWrap","Board","Chess","knightPosition","setPosition","room","setRoom","readyState","onOpen","console","log","onClose","onMessage","e","dataFromServer","JSON","parse","data","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","piecePositions","setPiecePosition","castle_w_1","row","col","knight_w_1","bishop_w_1","queen_w","king_w","castle_w_2","knight_w_2","bishop_w_2","castle_b_1","knight_b_1","bishop_b_1","queen_b","king_b","castle_b_2","knight_b_2","bishop_b_2","changePosition","x","y"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/pages/Chess.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport { GameContainer, GamePlayer, GameWrap } from \"./GameElements\";\r\nimport Board from \"../components/Board\";\r\n\r\nconst Chess = () => {\r\n    const [knightPosition, setPosition] = useState([0, 0]);\r\n    const [room, setRoom] = useState(1);\r\n\r\n    const { readyState } = useWebSocket(\r\n        \"ws://127.0.0.1:8000/ws/\" + room + \"/\",\r\n        {\r\n            onOpen: () => {\r\n                console.log(\"Connected!\");\r\n            },\r\n            onClose: () => {\r\n                console.log(\"Disconnected!\");\r\n            },\r\n            onMessage: (e) => {\r\n                const dataFromServer = JSON.parse(e.data);\r\n                console.log(dataFromServer);\r\n            },\r\n        }\r\n    );\r\n\r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: \"Connecting\",\r\n        [ReadyState.OPEN]: \"Open\",\r\n        [ReadyState.CLOSING]: \"Closing\",\r\n        [ReadyState.CLOSED]: \"Closed\",\r\n        [ReadyState.UNINSTANTIATED]: \"Uninstantiated\",\r\n    }[readyState];\r\n\r\n    const [piecePositions, setPiecePosition] = useState({\r\n        castle_w_1: { row: 0, col: 0 },\r\n        knight_w_1: { row: 0, col: 1 },\r\n        bishop_w_1: { row: 0, col: 2 },\r\n        queen_w: { row: 0, col: 3 },\r\n        king_w: { row: 0, col: 4 },\r\n        castle_w_2: { row: 0, col: 7 },\r\n        knight_w_2: { row: 0, col: 6 },\r\n        bishop_w_2: { row: 0, col: 5 },\r\n\r\n        castle_b_1: { row: 7, col: 0 },\r\n        knight_b_1: { row: 7, col: 1 },\r\n        bishop_b_1: { row: 7, col: 2 },\r\n        queen_b: { row: 7, col: 3 },\r\n        king_b: { row: 7, col: 4 },\r\n        castle_b_2: { row: 7, col: 7 },\r\n        knight_b_2: { row: 7, col: 6 },\r\n        bishop_b_2: { row: 7, col: 5 },\r\n    });\r\n\r\n    const changePosition = (x, y) => {\r\n        setPosition([x, y]);\r\n        /* setPosition(previousState => {\r\n      return { ...previousState, piece: [x, y] }\r\n    }); */\r\n    };\r\n\r\n    return (\r\n        <GameContainer>\r\n            <GamePlayer>\r\n                <div>The WebSocket is currently {connectionStatus}</div>\r\n                <Board\r\n                    knightPosition={knightPosition}\r\n                    piecePositions={piecePositions}\r\n                    posHandler={changePosition}\r\n                />\r\n                {/* <Board piecePositions={piecePositions} posHandler={changePosition}/> */}\r\n            </GamePlayer>\r\n        </GameContainer>\r\n    );\r\n};\r\n\r\nexport default Chess;\r\n\r\n/* var roomCode = document.getElementById(\"game_board\").getAttribute(\"room_code\");\r\nvar char_choice = document\r\n    .getElementById(\"game_board\")\r\n    .getAttribute(\"char_choice\");\r\n\r\nvar connectionString =\r\n    \"ws://\" + window.location.host + \"/ws/play/\" + roomCode + \"/\";\r\nvar gameSocket = new WebSocket(connectionString);\r\n\r\nlet myturn = true;\r\n\r\nfunction make_move(index, player) {\r\n    index = parseInt(index);\r\n    let data = {\r\n        event: \"MOVE\",\r\n        message: {\r\n            index: index,\r\n            player: player,\r\n        },\r\n    };\r\n\r\n    if (gameBoard[index] == -1) {\r\n        moveCount++;\r\n        if (player == \"X\") gameBoard[index] = 1;\r\n        else if (player == \"O\") gameBoard[index] = 0;\r\n        else {\r\n            alert(\"Invalid character choice\");\r\n            return false;\r\n        }\r\n        gameSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    elementArray[index].innerHTML = player;\r\n    const win = checkWinner();\r\n    if (myturn) {\r\n        if (win) {\r\n            data = {\r\n                event: \"END\",\r\n                message: `${player} is a winner. Play again?`,\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        } else if (!win && moveCount == 9) {\r\n            data = {\r\n                event: \"END\",\r\n                message: \"It's a draw. Play again?\",\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        }\r\n    }\r\n}\r\n\r\nfunction connect() {\r\n    gameSocket.onopen = function open() {\r\n        console.log(\"WebSockets connection created.\");\r\n        gameSocket.send(\r\n            JSON.stringify({\r\n                event: \"START\",\r\n                message: \"\",\r\n            })\r\n        );\r\n    };\r\n\r\n    gameSocket.onclose = function (e) {\r\n        console.log(\r\n            \"Socket is closed. Reconnect will be attempted in 1 second.\",\r\n            e.reason\r\n        );\r\n        setTimeout(function () {\r\n            connect();\r\n        }, 1000);\r\n    };\r\n    // Sending the info about the room\r\n    gameSocket.onmessage = function (e) {\r\n        let data = JSON.parse(e.data);\r\n        data = data[\"payload\"];\r\n        let message = data[\"message\"];\r\n        let event = data[\"event\"];\r\n        switch (event) {\r\n            case \"START\":\r\n                //reset();\r\n                break;\r\n            case \"END\":\r\n                alert(message);\r\n                //reset();\r\n                break;\r\n            case \"MOVE\":\r\n                if (message[\"player\"] != char_choice) {\r\n                    make_move(message[\"index\"], message[\"player\"]);\r\n                    myturn = true;\r\n                    document.getElementById(\"alert_move\").style.display =\r\n                        \"inline\";\r\n                }\r\n                break;\r\n            default:\r\n                console.log(\"No event\");\r\n        }\r\n    };\r\n\r\n    if (gameSocket.readyState == WebSocket.OPEN) {\r\n        gameSocket.onopen();\r\n    }\r\n}\r\n\r\nconnect(); */\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,IAAuBC,UAAvB,QAAyC,qBAAzC;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,gBAApD;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;AAEA,MAAMC,KAAK,GAAG,MAAM;EAAA;;EAChB,MAAM,CAACC,cAAD,EAAiBC,WAAjB,IAAgCT,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,CAA9C;EACA,MAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,CAAD,CAAhC;EAEA,MAAM;IAAEY;EAAF,IAAiBX,YAAY,CAC/B,4BAA4BS,IAA5B,GAAmC,GADJ,EAE/B;IACIG,MAAM,EAAE,MAAM;MACVC,OAAO,CAACC,GAAR,CAAY,YAAZ;IACH,CAHL;IAIIC,OAAO,EAAE,MAAM;MACXF,OAAO,CAACC,GAAR,CAAY,eAAZ;IACH,CANL;IAOIE,SAAS,EAAGC,CAAD,IAAO;MACd,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,IAAb,CAAvB;MACAR,OAAO,CAACC,GAAR,CAAYI,cAAZ;IACH;EAVL,CAF+B,CAAnC;EAgBA,MAAMI,gBAAgB,GAAG;IACrB,CAACrB,UAAU,CAACsB,UAAZ,GAAyB,YADJ;IAErB,CAACtB,UAAU,CAACuB,IAAZ,GAAmB,MAFE;IAGrB,CAACvB,UAAU,CAACwB,OAAZ,GAAsB,SAHD;IAIrB,CAACxB,UAAU,CAACyB,MAAZ,GAAqB,QAJA;IAKrB,CAACzB,UAAU,CAAC0B,cAAZ,GAA6B;EALR,EAMvBhB,UANuB,CAAzB;EAQA,MAAM,CAACiB,cAAD,EAAiBC,gBAAjB,IAAqC9B,QAAQ,CAAC;IAChD+B,UAAU,EAAE;MAAEC,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CADoC;IAEhDC,UAAU,EAAE;MAAEF,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CAFoC;IAGhDE,UAAU,EAAE;MAAEH,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CAHoC;IAIhDG,OAAO,EAAE;MAAEJ,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CAJuC;IAKhDI,MAAM,EAAE;MAAEL,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CALwC;IAMhDK,UAAU,EAAE;MAAEN,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CANoC;IAOhDM,UAAU,EAAE;MAAEP,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CAPoC;IAQhDO,UAAU,EAAE;MAAER,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CARoC;IAUhDQ,UAAU,EAAE;MAAET,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CAVoC;IAWhDS,UAAU,EAAE;MAAEV,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CAXoC;IAYhDU,UAAU,EAAE;MAAEX,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CAZoC;IAahDW,OAAO,EAAE;MAAEZ,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CAbuC;IAchDY,MAAM,EAAE;MAAEb,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CAdwC;IAehDa,UAAU,EAAE;MAAEd,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CAfoC;IAgBhDc,UAAU,EAAE;MAAEf,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CAhBoC;IAiBhDe,UAAU,EAAE;MAAEhB,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf;EAjBoC,CAAD,CAAnD;;EAoBA,MAAMgB,cAAc,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;IAC7B1C,WAAW,CAAC,CAACyC,CAAD,EAAIC,CAAJ,CAAD,CAAX;IACA;AACR;AACA;EACK,CALD;;EAOA,oBACI,QAAC,aAAD;IAAA,uBACI,QAAC,UAAD;MAAA,wBACI;QAAA,0CAAiC5B,gBAAjC;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,KAAD;QACI,cAAc,EAAEf,cADpB;QAEI,cAAc,EAAEqB,cAFpB;QAGI,UAAU,EAAEoB;MAHhB;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAaH,CApED;;GAAM1C,K;UAIqBN,Y;;;KAJrBM,K;AAsEN,eAAeA,KAAf},"metadata":{},"sourceType":"module"}