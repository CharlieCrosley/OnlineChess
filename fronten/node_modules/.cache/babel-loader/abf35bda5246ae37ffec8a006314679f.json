{"ast":null,"code":"// Audio handler for game events\nconst audio = {\n  move: new Audio(require(\"../assets/sounds/move.mp3\")),\n  capture: new Audio(require(\"../assets/sounds/capture.ogg\")),\n  end: new Audio(require(\"../assets/sounds/game_end.mp3\"))\n};\n/**\r\n * Callback for setting the board state\r\n *\r\n * @callback setBoardState\r\n * @param {Object} board An dictionary representing the current board state\r\n */\n\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {setBoardState} setBoardState sets a new state of the board\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\n\nexport function movePiece(toX, toY, setBoardState, setTakenPieces, item, boardState) {\n  const square = squareIsEmpty(toX, toY, boardState);\n  const opponentKing = boardState[\"king_w\"].isOwner ? boardState[\"king_b\"] : boardState[\"king_w\"]; // check if piece on square\n  // Ensure piece on square is not owned and is alive before taking\n\n  if (square != null && !square.isOwner && boardState[square.piece].isAlive) {\n    if (checkIfMoveUnderAttack(toX, toY, boardState)) {\n      //audio.capture.play();\n      //audio.move.play();\n      console.log(true);\n    }\n\n    boardState[square.piece].isAlive = false; // Track what pieces are taken so that they can be rendered under player name\n\n    const pieceNameSplit = square.piece.split(\"_\");\n    const piecePathName = pieceNameSplit[0] + \"_\" + pieceNameSplit[1];\n\n    const pieceImgPath = require(\"../assets/images/pieces/\" + piecePathName + \".png\");\n\n    let colour;\n    if (pieceNameSplit[1] === \"w\") colour = \"white\";else colour = \"black\"; // Sort the array of pieces so that matching pieces appear next to eachother\n\n    setTakenPieces(prevState => ({ ...prevState,\n      [colour]: [...prevState[colour], pieceImgPath].sort()\n    })); // play sound effect when capturing a piece\n\n    audio.capture.play();\n  } else {\n    // play sound effect when moving a piece\n    audio.move.play();\n  } // Update state of the moved piece\n\n\n  setBoardState(prevState => ({ ...prevState,\n    [item.pieceName]: {\n      row: toY,\n      col: toX,\n      hasMoved: true,\n      isOwner: true,\n      isAlive: true\n    }\n  }));\n}\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\n\nexport function canMovePiece(toX, toY, draggedPiece, boardState) {\n  const square = squareIsEmpty(toX, toY, boardState); // if a friendly piece is in a square, don't allow this piece to be moved there\n\n  if (square && square.state.isOwner && square.state.isAlive) return false; // calculate the difference between the new square and the piece being dragged\n\n  var dx = Math.abs(toX - draggedPiece.pieceState.col);\n  var dy = Math.abs(toY - draggedPiece.pieceState.row);\n  const pieceName = draggedPiece.pieceName.split(\"_\")[0]; // Check the row and column of the piece to see if the movement should be blocked\n  // by another piece\n\n  const straightCollision = checkStraightCollisions(toX, toY, boardState, draggedPiece); // Check the diagonal of the piece to see if the movement should be blocked\n  // by another piece\n\n  const diagCollision = checkDiagCollisions(toX, toY, boardState, draggedPiece); // Check if the piece is currently under attack\n\n  const isPieceUnderAttack = checkIfMoveUnderAttack(draggedPiece.pieceState.col, draggedPiece.pieceState.row, boardState);\n  let pieceAttackingKing, isProtectingKing;\n\n  if (pieceName !== \"king\") {\n    // Check if the piece is defending the king\n    // Get the piece that is attacking the king if true\n    pieceAttackingKing = checkIfPieceIsProtectingKing(draggedPiece.pieceState.col, draggedPiece.pieceState.row, boardState, draggedPiece.pieceName);\n    isProtectingKing = pieceAttackingKing !== null && isPieceUnderAttack;\n  }\n\n  const canMoveWhilstProtecting = () => {\n    // Dont allow the pawn to move if its protecting king unless it can take the piece\n    // and ensure that the piece is alive before taking\n    if (isProtectingKing && (square !== null && pieceAttackingKing !== square.piece || square === null || square !== null && !square.state.isAlive)) return false;\n    return true;\n  };\n\n  switch (pieceName) {\n    case \"king\":\n      const moveNotInCheck = !checkIfMoveUnderAttack(toX, toY, boardState);\n      return (dx === 1 || dx === 0) && (dy === 1 || dy === 0) && moveNotInCheck;\n\n    case \"castle\":\n      if (!canMoveWhilstProtecting()) return;\n      return (dx === 0 && dy > 0 || dx > 0 && dy === 0) && !straightCollision.collision;\n\n    case \"knight\":\n      if (!canMoveWhilstProtecting()) return;\n      return dx === 2 && dy === 1 || dx === 1 && dy === 2;\n\n    case \"bishop\":\n      if (!canMoveWhilstProtecting()) return;\n      return !(dx === 0 && dy > 0) && !(dx > 0 && dy === 0) && (dx === dy || dx === dy) && !diagCollision.collision;\n\n    case \"queen\":\n      if (!canMoveWhilstProtecting()) return;\n      return (dx === 0 && dy > 0 || dx > 0 && dy === 0) && !straightCollision.collision || (dx === dy || dx === dy) && !diagCollision.collision;\n\n    case \"pawn\":\n      if (!canMoveWhilstProtecting()) return; // Recalculate dx/dy with direction\n\n      dx = toX - draggedPiece.pieceState.col;\n      dy = toY - draggedPiece.pieceState.row; // Allow pawn to move 2 squares on first move\n\n      if (!draggedPiece.pieceState.hasMoved) {\n        // Negative direction moves up the board (player always at bottom)\n        if (dx === 0 && (dy === -1 || dy === -2) && !straightCollision.collision) {\n          return square === null;\n        }\n      } // Allow pawn to take opponents pieces diagonal by 1 square\n\n\n      if ((dx === 1 || dx === -1) && dy === -1 && square !== null) return true; // Allow pawn to move forward by 1 square\n\n      return dx === 0 && dy === -1 && square === null;\n\n    default:\n      return false;\n  }\n}\n/**\r\n * Checks if the current square is empty\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @returns piece name and state if square is not empty, null otherwise\r\n */\n\nfunction squareIsEmpty(x, y, boardState) {\n  for (const [piece, state] of Object.entries(boardState)) {\n    if (x === state.col && y === state.row) {\n      return {\n        piece,\n        state\n      };\n    }\n  }\n\n  return null;\n}\n/**\r\n * Checks if there is a piece in the diagonal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\n\n\nfunction checkDiagCollisions(x, y, boardState, draggedPiece) {\n  // Get row and col of dragged piece\n  const row = draggedPiece.pieceState.row;\n  const col = draggedPiece.pieceState.col;\n  const dirX = Math.sign(x - col);\n  const dirY = Math.sign(y - row);\n\n  for (let i = 1; i < Math.abs(x - col) + 1; i++) {\n    for (const [piece, state] of Object.entries(boardState)) {\n      if (col + i * dirX === state.col && row + i * dirY === state.row && state.isAlive) {\n        if (i !== Math.abs(x - col)) {\n          // Stops opponents pieces from being taken when hidden behind each other\n          return {\n            piece: piece,\n            collision: true\n          };\n        }\n\n        return {\n          piece: piece,\n          collision: state.isOwner\n        };\n      }\n    }\n  }\n\n  return {\n    piece: null,\n    collision: false\n  };\n}\n/**\r\n * Checks if there is a piece in the vertical and horizontal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\n\n\nfunction checkStraightCollisions(x, y, boardState, draggedPiece) {\n  // Get row and col of dragged piece\n  const row = draggedPiece.pieceState.row;\n  const col = draggedPiece.pieceState.col; // Get change in x and y between dragged piece and square\n\n  const dx = Math.abs(x - col);\n  const dy = Math.abs(y - row);\n  if (dx > 0 && dy > 0) return true;\n  const dirX = Math.sign(x - col);\n  const dirY = Math.sign(y - row);\n\n  for (let i = 1; i < Math.max(dx, dy) + 1; i++) {\n    for (const [piece, state] of Object.entries(boardState)) {\n      if (state.isAlive) {\n        // Move is horizontal if dy = 0, otherwise vertical\n        if (dy === 0) {\n          if (col + i * dirX === state.col && row === state.row) {\n            if (i !== Math.abs(x - col)) {\n              // Stops opponents pieces from being taken when hidden behind each other\n              return {\n                piece: piece,\n                collision: true\n              };\n            }\n\n            return {\n              piece: piece,\n              collision: state.isOwner\n            };\n          }\n        } else {\n          if (row + i * dirY === state.row && col === state.col) {\n            if (i !== Math.abs(y - row)) {\n              // Stops opponents pieces from being taken when hidden behind each other\n              return {\n                piece: piece,\n                collision: true\n              };\n            }\n\n            return {\n              piece: piece,\n              collision: state.isOwner\n            };\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    piece: null,\n    collision: false\n  };\n}\n/**\r\n * Checks if a piece at (x,y) on the board is under attack by an opponents piece\r\n * @param {*} x x coordinate of the square currently being checked\r\n * @param {*} y y coordinate of the square currently being checked\r\n * @param {*} boardState current state of the board\r\n * @returns true if the piece is under attack, false otherwise\r\n */\n\n\nfunction checkIfMoveUnderAttack(x, y, boardState) {\n  for (const [piece, state] of Object.entries(boardState)) {\n    // King cannot be checked by its own pieces\n    if (!state.isOwner) {\n      const dx = Math.abs(x - state.col);\n      const dy = Math.abs(y - state.row); // Check if the square is under attack from an opponents piece via straight line\n\n      const straightCollisions = checkStraightCollisions(state.col, state.row, boardState, {\n        pieceState: {\n          col: x,\n          row: y\n        }\n      });\n\n      if (straightCollisions.piece && !straightCollisions.collision) {\n        const pieceName = straightCollisions.piece.split(\"_\")[0]; // If the piece can take pieces horizontally or vertically or king is in range,\n        // then the move is not valid\n\n        if (pieceName === \"queen\" || pieceName === \"castle\" || pieceName === \"king\" && (dx === 1 || dy === 1)) {\n          return true;\n        }\n      } // Check if the square is under attack from an opponents piece via diagonal line\n\n\n      const diagCollisions = checkDiagCollisions(state.col, state.row, boardState, {\n        pieceState: {\n          col: x,\n          row: y\n        }\n      });\n\n      if (diagCollisions.piece && !diagCollisions.collision) {\n        const pieceName = diagCollisions.piece.split(\"_\")[0]; // If the piece can move diagonally or the pawn is in range of square,\n        // then the move is not valid\n\n        if (pieceName === \"queen\" || pieceName === \"bishop\" || pieceName === \"king\" && dx === 1 && dy === 1 || pieceName === \"pawn\" && dx === 1 && y - state.row === 2) return true;\n      } // Check if square is under attack by a knight\n\n\n      if (piece.split(\"_\")[0] === \"knight\" && (dx === 2 && dy === 1 || dx === 1 && dy === 2)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/**\r\n * Check if the piece at (x,y) on the board is blocking an opponent piece from checking the king\r\n * @param {*} x x coordinate of the square currently being checked\r\n * @param {*} y y coordinate of the square currently being checked\r\n * @param {*} boardState current state of the board\r\n * @param {*} draggedPiece piece being dragged\r\n * @returns name of piece attacking king, if no such piece exists, return null\r\n */\n\n\nfunction checkIfPieceIsProtectingKing(x, y, boardState, draggedPiece) {\n  // Get players king\n  const king = boardState[\"king_w\"].isOwner ? boardState[\"king_w\"] : boardState[\"king_b\"]; // Direction from (x,y) to king\n\n  const dirX = Math.sign(x - king.col);\n  const dirY = Math.sign(y - king.row);\n  const dx = Math.abs(king.col - x);\n  const dy = Math.abs(king.row - y);\n\n  const getOppositeCoords = king => {\n    let oppositeX = king.col;\n    let oppositeY = king.row; // Get the x,y in the opposite direction to the king to the edge of the board\n\n    while (oppositeX <= 7 && oppositeX >= 0 && oppositeY <= 7 && oppositeY >= 0) {\n      oppositeX += dirX;\n      oppositeY += dirY;\n    }\n\n    return [oppositeX, oppositeY];\n  }; // Check pieces that are directly above or beside the king\n\n\n  if (dx === 0 || (dirX === 1 || dirX === -1) && dy === 0) {\n    // Check if piece is inbetween king and opponent piece that can attack king\n    const straightCollisions = checkStraightCollisions(x, y, boardState, {\n      pieceState: {\n        col: king.col,\n        row: king.row\n      }\n    }); // A piece is inbetween the dragged piece and the king,\n    // therefore, it is not protecting the king and can be moved\n\n    if (straightCollisions.collision && straightCollisions.piece !== draggedPiece) return null;\n    const [oppositeX, oppositeY] = getOppositeCoords(king);\n    const oppositeStraightCollisions = checkStraightCollisions(x, y, boardState, {\n      pieceState: {\n        col: oppositeX,\n        row: oppositeY\n      }\n    });\n\n    if (oppositeStraightCollisions.piece) {\n      const pieceName = oppositeStraightCollisions.piece.split(\"_\")[0]; // If the piece in opposite direction to king is able to attack the king\n      // once the dragged piece is moved, then don't allow the piece to be moved\n\n      if (pieceName === \"castle\" || pieceName === \"queen\") {\n        // the piece is protecting the king\n        return oppositeStraightCollisions.piece;\n      }\n    }\n  } else if (dx === dy) {\n    // Check the pieces directly diagonal to the king\n    // Check if piece is inbetween king and opponent piece that can attack king\n    const diagCollisions = checkDiagCollisions(x, y, boardState, {\n      pieceState: {\n        col: king.col,\n        row: king.row\n      }\n    }); // A piece is inbetween the dragged piece and the king,\n    // therefore, it is not protecting the king and can be moved\n\n    if (diagCollisions.collision && diagCollisions.piece !== draggedPiece) return null;\n    const [oppositeX, oppositeY] = getOppositeCoords(king);\n    const oppositeDiagCollisions = checkDiagCollisions(x, y, boardState, {\n      pieceState: {\n        col: oppositeX,\n        row: oppositeY\n      }\n    });\n\n    if (oppositeDiagCollisions.piece) {\n      const pieceName = oppositeDiagCollisions.piece.split(\"_\")[0]; // If the piece in opposite direction to king is able to attack the king\n      // once the dragged piece is moved, then don't allow the piece to be moved\n\n      if (pieceName === \"bishop\" || pieceName === \"queen\") {\n        // the piece is protecting the king\n        return oppositeDiagCollisions.piece;\n      }\n    }\n  }\n\n  return null;\n}","map":{"version":3,"names":["audio","move","Audio","require","capture","end","movePiece","toX","toY","setBoardState","setTakenPieces","item","boardState","square","squareIsEmpty","opponentKing","isOwner","piece","isAlive","checkIfMoveUnderAttack","console","log","pieceNameSplit","split","piecePathName","pieceImgPath","colour","prevState","sort","play","pieceName","row","col","hasMoved","canMovePiece","draggedPiece","state","dx","Math","abs","pieceState","dy","straightCollision","checkStraightCollisions","diagCollision","checkDiagCollisions","isPieceUnderAttack","pieceAttackingKing","isProtectingKing","checkIfPieceIsProtectingKing","canMoveWhilstProtecting","moveNotInCheck","collision","x","y","Object","entries","dirX","sign","dirY","i","max","straightCollisions","diagCollisions","king","getOppositeCoords","oppositeX","oppositeY","oppositeStraightCollisions","oppositeDiagCollisions"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/components/Game.js"],"sourcesContent":["// Audio handler for game events\r\nconst audio = {\r\n    move: new Audio(require(\"../assets/sounds/move.mp3\")),\r\n    capture: new Audio(require(\"../assets/sounds/capture.ogg\")),\r\n    end: new Audio(require(\"../assets/sounds/game_end.mp3\")),\r\n};\r\n\r\n/**\r\n * Callback for setting the board state\r\n *\r\n * @callback setBoardState\r\n * @param {Object} board An dictionary representing the current board state\r\n */\r\n\r\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {setBoardState} setBoardState sets a new state of the board\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\r\nexport function movePiece(\r\n    toX,\r\n    toY,\r\n    setBoardState,\r\n    setTakenPieces,\r\n    item,\r\n    boardState\r\n) {\r\n    const square = squareIsEmpty(toX, toY, boardState);\r\n    const opponentKing = boardState[\"king_w\"].isOwner\r\n        ? boardState[\"king_b\"]\r\n        : boardState[\"king_w\"];\r\n    // check if piece on square\r\n    // Ensure piece on square is not owned and is alive before taking\r\n    if (square != null && !square.isOwner && boardState[square.piece].isAlive) {\r\n        if (checkIfMoveUnderAttack(toX, toY, boardState)) {\r\n            //audio.capture.play();\r\n            //audio.move.play();\r\n            console.log(true);\r\n        }\r\n        boardState[square.piece].isAlive = false;\r\n\r\n        // Track what pieces are taken so that they can be rendered under player name\r\n        const pieceNameSplit = square.piece.split(\"_\");\r\n        const piecePathName = pieceNameSplit[0] + \"_\" + pieceNameSplit[1];\r\n        const pieceImgPath = require(\"../assets/images/pieces/\" +\r\n            piecePathName +\r\n            \".png\");\r\n\r\n        let colour;\r\n        if (pieceNameSplit[1] === \"w\") colour = \"white\";\r\n        else colour = \"black\";\r\n        // Sort the array of pieces so that matching pieces appear next to eachother\r\n        setTakenPieces((prevState) => ({\r\n            ...prevState,\r\n            [colour]: [...prevState[colour], pieceImgPath].sort(),\r\n        }));\r\n\r\n        // play sound effect when capturing a piece\r\n        audio.capture.play();\r\n    } else {\r\n        // play sound effect when moving a piece\r\n        audio.move.play();\r\n    }\r\n\r\n    // Update state of the moved piece\r\n    setBoardState((prevState) => ({\r\n        ...prevState,\r\n        [item.pieceName]: {\r\n            row: toY,\r\n            col: toX,\r\n            hasMoved: true,\r\n            isOwner: true,\r\n            isAlive: true,\r\n        },\r\n    }));\r\n}\r\n\r\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\r\nexport function canMovePiece(toX, toY, draggedPiece, boardState) {\r\n    const square = squareIsEmpty(toX, toY, boardState);\r\n\r\n    // if a friendly piece is in a square, don't allow this piece to be moved there\r\n    if (square && square.state.isOwner && square.state.isAlive) return false;\r\n\r\n    // calculate the difference between the new square and the piece being dragged\r\n    var dx = Math.abs(toX - draggedPiece.pieceState.col);\r\n    var dy = Math.abs(toY - draggedPiece.pieceState.row);\r\n\r\n    const pieceName = draggedPiece.pieceName.split(\"_\")[0];\r\n\r\n    // Check the row and column of the piece to see if the movement should be blocked\r\n    // by another piece\r\n    const straightCollision = checkStraightCollisions(\r\n        toX,\r\n        toY,\r\n        boardState,\r\n        draggedPiece\r\n    );\r\n    // Check the diagonal of the piece to see if the movement should be blocked\r\n    // by another piece\r\n    const diagCollision = checkDiagCollisions(\r\n        toX,\r\n        toY,\r\n        boardState,\r\n        draggedPiece\r\n    );\r\n\r\n    // Check if the piece is currently under attack\r\n    const isPieceUnderAttack = checkIfMoveUnderAttack(\r\n        draggedPiece.pieceState.col,\r\n        draggedPiece.pieceState.row,\r\n        boardState\r\n    );\r\n\r\n    let pieceAttackingKing, isProtectingKing;\r\n    if (pieceName !== \"king\") {\r\n        // Check if the piece is defending the king\r\n        // Get the piece that is attacking the king if true\r\n        pieceAttackingKing = checkIfPieceIsProtectingKing(\r\n            draggedPiece.pieceState.col,\r\n            draggedPiece.pieceState.row,\r\n            boardState,\r\n            draggedPiece.pieceName\r\n        );\r\n        isProtectingKing = pieceAttackingKing !== null && isPieceUnderAttack;\r\n    }\r\n\r\n    const canMoveWhilstProtecting = () => {\r\n        // Dont allow the pawn to move if its protecting king unless it can take the piece\r\n        // and ensure that the piece is alive before taking\r\n        if (\r\n            isProtectingKing &&\r\n            ((square !== null && pieceAttackingKing !== square.piece) ||\r\n                square === null ||\r\n                (square !== null && !square.state.isAlive))\r\n        )\r\n            return false;\r\n        return true;\r\n    };\r\n\r\n    switch (pieceName) {\r\n        case \"king\":\r\n            const moveNotInCheck = !checkIfMoveUnderAttack(\r\n                toX,\r\n                toY,\r\n                boardState\r\n            );\r\n            return (\r\n                (dx === 1 || dx === 0) &&\r\n                (dy === 1 || dy === 0) &&\r\n                moveNotInCheck\r\n            );\r\n\r\n        case \"castle\":\r\n            if (!canMoveWhilstProtecting()) return;\r\n            return (\r\n                ((dx === 0 && dy > 0) || (dx > 0 && dy === 0)) &&\r\n                !straightCollision.collision\r\n            );\r\n\r\n        case \"knight\":\r\n            if (!canMoveWhilstProtecting()) return;\r\n            return (dx === 2 && dy === 1) || (dx === 1 && dy === 2);\r\n\r\n        case \"bishop\":\r\n            if (!canMoveWhilstProtecting()) return;\r\n            return (\r\n                !(dx === 0 && dy > 0) &&\r\n                !(dx > 0 && dy === 0) &&\r\n                (dx === dy || dx === dy) &&\r\n                !diagCollision.collision\r\n            );\r\n\r\n        case \"queen\":\r\n            if (!canMoveWhilstProtecting()) return;\r\n            return (\r\n                (((dx === 0 && dy > 0) || (dx > 0 && dy === 0)) &&\r\n                    !straightCollision.collision) ||\r\n                ((dx === dy || dx === dy) && !diagCollision.collision)\r\n            );\r\n\r\n        case \"pawn\":\r\n            if (!canMoveWhilstProtecting()) return;\r\n            // Recalculate dx/dy with direction\r\n            dx = toX - draggedPiece.pieceState.col;\r\n            dy = toY - draggedPiece.pieceState.row;\r\n            // Allow pawn to move 2 squares on first move\r\n            if (!draggedPiece.pieceState.hasMoved) {\r\n                // Negative direction moves up the board (player always at bottom)\r\n                if (\r\n                    dx === 0 &&\r\n                    (dy === -1 || dy === -2) &&\r\n                    !straightCollision.collision\r\n                ) {\r\n                    return square === null;\r\n                }\r\n            }\r\n            // Allow pawn to take opponents pieces diagonal by 1 square\r\n            if ((dx === 1 || dx === -1) && dy === -1 && square !== null)\r\n                return true;\r\n\r\n            // Allow pawn to move forward by 1 square\r\n            return dx === 0 && dy === -1 && square === null;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if the current square is empty\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @returns piece name and state if square is not empty, null otherwise\r\n */\r\nfunction squareIsEmpty(x, y, boardState) {\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        if (x === state.col && y === state.row) {\r\n            return { piece, state };\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Checks if there is a piece in the diagonal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\r\nfunction checkDiagCollisions(x, y, boardState, draggedPiece) {\r\n    // Get row and col of dragged piece\r\n    const row = draggedPiece.pieceState.row;\r\n    const col = draggedPiece.pieceState.col;\r\n\r\n    const dirX = Math.sign(x - col);\r\n    const dirY = Math.sign(y - row);\r\n    for (let i = 1; i < Math.abs(x - col) + 1; i++) {\r\n        for (const [piece, state] of Object.entries(boardState)) {\r\n            if (\r\n                col + i * dirX === state.col &&\r\n                row + i * dirY === state.row &&\r\n                state.isAlive\r\n            ) {\r\n                if (i !== Math.abs(x - col)) {\r\n                    // Stops opponents pieces from being taken when hidden behind each other\r\n                    return {\r\n                        piece: piece,\r\n                        collision: true,\r\n                    };\r\n                }\r\n                return {\r\n                    piece: piece,\r\n                    collision: state.isOwner,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return { piece: null, collision: false };\r\n}\r\n\r\n/**\r\n * Checks if there is a piece in the vertical and horizontal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\r\nfunction checkStraightCollisions(x, y, boardState, draggedPiece) {\r\n    // Get row and col of dragged piece\r\n    const row = draggedPiece.pieceState.row;\r\n    const col = draggedPiece.pieceState.col;\r\n    // Get change in x and y between dragged piece and square\r\n    const dx = Math.abs(x - col);\r\n    const dy = Math.abs(y - row);\r\n\r\n    if (dx > 0 && dy > 0) return true;\r\n    const dirX = Math.sign(x - col);\r\n    const dirY = Math.sign(y - row);\r\n\r\n    for (let i = 1; i < Math.max(dx, dy) + 1; i++) {\r\n        for (const [piece, state] of Object.entries(boardState)) {\r\n            if (state.isAlive) {\r\n                // Move is horizontal if dy = 0, otherwise vertical\r\n                if (dy === 0) {\r\n                    if (col + i * dirX === state.col && row === state.row) {\r\n                        if (i !== Math.abs(x - col)) {\r\n                            // Stops opponents pieces from being taken when hidden behind each other\r\n                            return {\r\n                                piece: piece,\r\n                                collision: true,\r\n                            };\r\n                        }\r\n                        return {\r\n                            piece: piece,\r\n                            collision: state.isOwner,\r\n                        };\r\n                    }\r\n                } else {\r\n                    if (row + i * dirY === state.row && col === state.col) {\r\n                        if (i !== Math.abs(y - row)) {\r\n                            // Stops opponents pieces from being taken when hidden behind each other\r\n                            return {\r\n                                piece: piece,\r\n                                collision: true,\r\n                            };\r\n                        }\r\n                        return {\r\n                            piece: piece,\r\n                            collision: state.isOwner,\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return { piece: null, collision: false };\r\n}\r\n\r\n/**\r\n * Checks if a piece at (x,y) on the board is under attack by an opponents piece\r\n * @param {*} x x coordinate of the square currently being checked\r\n * @param {*} y y coordinate of the square currently being checked\r\n * @param {*} boardState current state of the board\r\n * @returns true if the piece is under attack, false otherwise\r\n */\r\nfunction checkIfMoveUnderAttack(x, y, boardState) {\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        // King cannot be checked by its own pieces\r\n        if (!state.isOwner) {\r\n            const dx = Math.abs(x - state.col);\r\n            const dy = Math.abs(y - state.row);\r\n\r\n            // Check if the square is under attack from an opponents piece via straight line\r\n            const straightCollisions = checkStraightCollisions(\r\n                state.col,\r\n                state.row,\r\n                boardState,\r\n                {\r\n                    pieceState: { col: x, row: y },\r\n                }\r\n            );\r\n\r\n            if (straightCollisions.piece && !straightCollisions.collision) {\r\n                const pieceName = straightCollisions.piece.split(\"_\")[0];\r\n                // If the piece can take pieces horizontally or vertically or king is in range,\r\n                // then the move is not valid\r\n                if (\r\n                    pieceName === \"queen\" ||\r\n                    pieceName === \"castle\" ||\r\n                    (pieceName === \"king\" && (dx === 1 || dy === 1))\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n            // Check if the square is under attack from an opponents piece via diagonal line\r\n            const diagCollisions = checkDiagCollisions(\r\n                state.col,\r\n                state.row,\r\n                boardState,\r\n                {\r\n                    pieceState: { col: x, row: y },\r\n                }\r\n            );\r\n            if (diagCollisions.piece && !diagCollisions.collision) {\r\n                const pieceName = diagCollisions.piece.split(\"_\")[0];\r\n\r\n                // If the piece can move diagonally or the pawn is in range of square,\r\n                // then the move is not valid\r\n                if (\r\n                    pieceName === \"queen\" ||\r\n                    pieceName === \"bishop\" ||\r\n                    (pieceName === \"king\" && dx === 1 && dy === 1) ||\r\n                    (pieceName === \"pawn\" && dx === 1 && y - state.row === 2)\r\n                )\r\n                    return true;\r\n            }\r\n\r\n            // Check if square is under attack by a knight\r\n            if (\r\n                piece.split(\"_\")[0] === \"knight\" &&\r\n                ((dx === 2 && dy === 1) || (dx === 1 && dy === 2))\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Check if the piece at (x,y) on the board is blocking an opponent piece from checking the king\r\n * @param {*} x x coordinate of the square currently being checked\r\n * @param {*} y y coordinate of the square currently being checked\r\n * @param {*} boardState current state of the board\r\n * @param {*} draggedPiece piece being dragged\r\n * @returns name of piece attacking king, if no such piece exists, return null\r\n */\r\nfunction checkIfPieceIsProtectingKing(x, y, boardState, draggedPiece) {\r\n    // Get players king\r\n    const king = boardState[\"king_w\"].isOwner\r\n        ? boardState[\"king_w\"]\r\n        : boardState[\"king_b\"];\r\n\r\n    // Direction from (x,y) to king\r\n    const dirX = Math.sign(x - king.col);\r\n    const dirY = Math.sign(y - king.row);\r\n\r\n    const dx = Math.abs(king.col - x);\r\n    const dy = Math.abs(king.row - y);\r\n\r\n    const getOppositeCoords = (king) => {\r\n        let oppositeX = king.col;\r\n        let oppositeY = king.row;\r\n        // Get the x,y in the opposite direction to the king to the edge of the board\r\n        while (\r\n            oppositeX <= 7 &&\r\n            oppositeX >= 0 &&\r\n            oppositeY <= 7 &&\r\n            oppositeY >= 0\r\n        ) {\r\n            oppositeX += dirX;\r\n            oppositeY += dirY;\r\n        }\r\n        return [oppositeX, oppositeY];\r\n    };\r\n\r\n    // Check pieces that are directly above or beside the king\r\n    if (dx === 0 || ((dirX === 1 || dirX === -1) && dy === 0)) {\r\n        // Check if piece is inbetween king and opponent piece that can attack king\r\n        const straightCollisions = checkStraightCollisions(x, y, boardState, {\r\n            pieceState: { col: king.col, row: king.row },\r\n        });\r\n\r\n        // A piece is inbetween the dragged piece and the king,\r\n        // therefore, it is not protecting the king and can be moved\r\n        if (\r\n            straightCollisions.collision &&\r\n            straightCollisions.piece !== draggedPiece\r\n        )\r\n            return null;\r\n\r\n        const [oppositeX, oppositeY] = getOppositeCoords(king);\r\n\r\n        const oppositeStraightCollisions = checkStraightCollisions(\r\n            x,\r\n            y,\r\n            boardState,\r\n            {\r\n                pieceState: { col: oppositeX, row: oppositeY },\r\n            }\r\n        );\r\n\r\n        if (oppositeStraightCollisions.piece) {\r\n            const pieceName = oppositeStraightCollisions.piece.split(\"_\")[0];\r\n            // If the piece in opposite direction to king is able to attack the king\r\n            // once the dragged piece is moved, then don't allow the piece to be moved\r\n            if (pieceName === \"castle\" || pieceName === \"queen\") {\r\n                // the piece is protecting the king\r\n                return oppositeStraightCollisions.piece;\r\n            }\r\n        }\r\n    } else if (dx === dy) {\r\n        // Check the pieces directly diagonal to the king\r\n        // Check if piece is inbetween king and opponent piece that can attack king\r\n        const diagCollisions = checkDiagCollisions(x, y, boardState, {\r\n            pieceState: { col: king.col, row: king.row },\r\n        });\r\n\r\n        // A piece is inbetween the dragged piece and the king,\r\n        // therefore, it is not protecting the king and can be moved\r\n        if (diagCollisions.collision && diagCollisions.piece !== draggedPiece)\r\n            return null;\r\n\r\n        const [oppositeX, oppositeY] = getOppositeCoords(king);\r\n\r\n        const oppositeDiagCollisions = checkDiagCollisions(x, y, boardState, {\r\n            pieceState: { col: oppositeX, row: oppositeY },\r\n        });\r\n        if (oppositeDiagCollisions.piece) {\r\n            const pieceName = oppositeDiagCollisions.piece.split(\"_\")[0];\r\n            // If the piece in opposite direction to king is able to attack the king\r\n            // once the dragged piece is moved, then don't allow the piece to be moved\r\n            if (pieceName === \"bishop\" || pieceName === \"queen\") {\r\n                // the piece is protecting the king\r\n                return oppositeDiagCollisions.piece;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}