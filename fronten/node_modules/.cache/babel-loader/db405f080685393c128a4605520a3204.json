{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\charl\\\\Documents\\\\Code\\\\Web Dev\\\\Chess-Online\\\\chessproject\\\\frontend\\\\src\\\\pages\\\\Chess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { GameContainer, GamePlayer, GameWrap } from \"./GameElements\";\nimport Board from \"../components/Board\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chess = () => {\n  _s();\n\n  const [knightPosition, setPosition] = useState([0, 0]);\n  const {\n    readyState\n  } = useWebSocket(\"ws://127.0.0.1:8000/\", {\n    onOpen: () => {\n      console.log(\"Connected!\");\n    },\n    onClose: () => {\n      console.log(\"Disconnected!\");\n    }\n  });\n  /* const [whitePieces, setWhitePosition] = useState({\r\n  castle1_w:[0,0],\r\n  knight1_w:[0,1],\r\n  bishop1_w:[0,2],\r\n  queen_w:[0,3],\r\n  king_w:[0,4],\r\n  castle2_w:[0,7],\r\n  knight2_w:[0,6],\r\n  bishop2_w:[0,5],\r\n  })\r\n  const [blackPieces, setBlackPosition] = useState({\r\n  castle1_b:[0,0],\r\n  knight1_b:[0,1],\r\n  bishop1_b:[0,2],\r\n  queen_b:[0,3],\r\n  king_b:[0,4],\r\n  castle2_b:[0,7],\r\n  knight2_b:[0,6],\r\n  bishop2_b:[0,5],\r\n  }) */\n\n  const changePosition = (x, y) => {\n    setPosition([x, y]);\n    /* setPosition(previousState => {\r\n    return { ...previousState, piece: [x, y] }\r\n    }); */\n  };\n\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    children: /*#__PURE__*/_jsxDEV(GamePlayer, {\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        knightPosition: knightPosition,\n        posHandler: changePosition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chess, \"Orwf4yz26WAKfd8yBEwXJSOKgQg=\", false, function () {\n  return [useWebSocket];\n});\n\n_c = Chess;\nexport default Chess;\nvar roomCode = document.getElementById(\"game_board\").getAttribute(\"room_code\");\nvar char_choice = document.getElementById(\"game_board\").getAttribute(\"char_choice\");\nvar connectionString = \"ws://\" + window.location.host + \"/ws/play/\" + roomCode + \"/\";\nvar gameSocket = new WebSocket(connectionString);\nlet myturn = true;\n\nfunction make_move(index, player) {\n  index = parseInt(index);\n  let data = {\n    event: \"MOVE\",\n    message: {\n      index: index,\n      player: player\n    }\n  };\n\n  if (gameBoard[index] == -1) {\n    moveCount++;\n    if (player == \"X\") gameBoard[index] = 1;else if (player == \"O\") gameBoard[index] = 0;else {\n      alert(\"Invalid character choice\");\n      return false;\n    }\n    gameSocket.send(JSON.stringify(data));\n  }\n\n  elementArray[index].innerHTML = player;\n  const win = checkWinner();\n\n  if (myturn) {\n    if (win) {\n      data = {\n        event: \"END\",\n        message: `${player} is a winner. Play again?`\n      };\n      gameSocket.send(JSON.stringify(data));\n    } else if (!win && moveCount == 9) {\n      data = {\n        event: \"END\",\n        message: \"It's a draw. Play again?\"\n      };\n      gameSocket.send(JSON.stringify(data));\n    }\n  }\n}\n\nfunction connect() {\n  gameSocket.onopen = function open() {\n    console.log(\"WebSockets connection created.\");\n    gameSocket.send(JSON.stringify({\n      event: \"START\",\n      message: \"\"\n    }));\n  };\n\n  gameSocket.onclose = function (e) {\n    console.log(\"Socket is closed. Reconnect will be attempted in 1 second.\", e.reason);\n    setTimeout(function () {\n      connect();\n    }, 1000);\n  }; // Sending the info about the room\n\n\n  gameSocket.onmessage = function (e) {\n    let data = JSON.parse(e.data);\n    data = data[\"payload\"];\n    let message = data[\"message\"];\n    let event = data[\"event\"];\n\n    switch (event) {\n      case \"START\":\n        //reset();\n        break;\n\n      case \"END\":\n        alert(message); //reset();\n\n        break;\n\n      case \"MOVE\":\n        if (message[\"player\"] != char_choice) {\n          make_move(message[\"index\"], message[\"player\"]);\n          myturn = true;\n          document.getElementById(\"alert_move\").style.display = \"inline\";\n        }\n\n        break;\n\n      default:\n        console.log(\"No event\");\n    }\n  };\n\n  if (gameSocket.readyState == WebSocket.OPEN) {\n    gameSocket.onopen();\n  }\n}\n\nconnect();\n\nvar _c;\n\n$RefreshReg$(_c, \"Chess\");","map":{"version":3,"names":["React","useState","useWebSocket","ReadyState","GameContainer","GamePlayer","GameWrap","Board","Chess","knightPosition","setPosition","readyState","onOpen","console","log","onClose","changePosition","x","y","roomCode","document","getElementById","getAttribute","char_choice","connectionString","window","location","host","gameSocket","WebSocket","myturn","make_move","index","player","parseInt","data","event","message","gameBoard","moveCount","alert","send","JSON","stringify","elementArray","innerHTML","win","checkWinner","connect","onopen","open","onclose","e","reason","setTimeout","onmessage","parse","style","display","OPEN"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/pages/Chess.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport { GameContainer, GamePlayer, GameWrap } from \"./GameElements\";\r\nimport Board from \"../components/Board\";\r\n\r\nconst Chess = () => {\r\n    const [knightPosition, setPosition] = useState([0, 0]);\r\n\r\n    const { readyState } = useWebSocket(\"ws://127.0.0.1:8000/\", {\r\n        onOpen: () => {\r\n            console.log(\"Connected!\");\r\n        },\r\n        onClose: () => {\r\n            console.log(\"Disconnected!\");\r\n        },\r\n    });\r\n    /* const [whitePieces, setWhitePosition] = useState({\r\n    castle1_w:[0,0],\r\n    knight1_w:[0,1],\r\n    bishop1_w:[0,2],\r\n    queen_w:[0,3],\r\n    king_w:[0,4],\r\n    castle2_w:[0,7],\r\n    knight2_w:[0,6],\r\n    bishop2_w:[0,5],\r\n  })\r\n  const [blackPieces, setBlackPosition] = useState({\r\n    castle1_b:[0,0],\r\n    knight1_b:[0,1],\r\n    bishop1_b:[0,2],\r\n    queen_b:[0,3],\r\n    king_b:[0,4],\r\n    castle2_b:[0,7],\r\n    knight2_b:[0,6],\r\n    bishop2_b:[0,5],\r\n  }) */\r\n    const changePosition = (x, y) => {\r\n        setPosition([x, y]);\r\n        /* setPosition(previousState => {\r\n      return { ...previousState, piece: [x, y] }\r\n    }); */\r\n    };\r\n\r\n    return (\r\n        <GameContainer>\r\n            <GamePlayer>\r\n                <Board\r\n                    knightPosition={knightPosition}\r\n                    posHandler={changePosition}\r\n                />\r\n                {/* <Board piecePositions={piecePositions} posHandler={changePosition}/> */}\r\n            </GamePlayer>\r\n        </GameContainer>\r\n    );\r\n};\r\n\r\nexport default Chess;\r\n\r\nvar roomCode = document.getElementById(\"game_board\").getAttribute(\"room_code\");\r\nvar char_choice = document\r\n    .getElementById(\"game_board\")\r\n    .getAttribute(\"char_choice\");\r\n\r\nvar connectionString =\r\n    \"ws://\" + window.location.host + \"/ws/play/\" + roomCode + \"/\";\r\nvar gameSocket = new WebSocket(connectionString);\r\n\r\nlet myturn = true;\r\n\r\nfunction make_move(index, player) {\r\n    index = parseInt(index);\r\n    let data = {\r\n        event: \"MOVE\",\r\n        message: {\r\n            index: index,\r\n            player: player,\r\n        },\r\n    };\r\n\r\n    if (gameBoard[index] == -1) {\r\n        moveCount++;\r\n        if (player == \"X\") gameBoard[index] = 1;\r\n        else if (player == \"O\") gameBoard[index] = 0;\r\n        else {\r\n            alert(\"Invalid character choice\");\r\n            return false;\r\n        }\r\n        gameSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    elementArray[index].innerHTML = player;\r\n    const win = checkWinner();\r\n    if (myturn) {\r\n        if (win) {\r\n            data = {\r\n                event: \"END\",\r\n                message: `${player} is a winner. Play again?`,\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        } else if (!win && moveCount == 9) {\r\n            data = {\r\n                event: \"END\",\r\n                message: \"It's a draw. Play again?\",\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        }\r\n    }\r\n}\r\n\r\nfunction connect() {\r\n    gameSocket.onopen = function open() {\r\n        console.log(\"WebSockets connection created.\");\r\n        gameSocket.send(\r\n            JSON.stringify({\r\n                event: \"START\",\r\n                message: \"\",\r\n            })\r\n        );\r\n    };\r\n\r\n    gameSocket.onclose = function (e) {\r\n        console.log(\r\n            \"Socket is closed. Reconnect will be attempted in 1 second.\",\r\n            e.reason\r\n        );\r\n        setTimeout(function () {\r\n            connect();\r\n        }, 1000);\r\n    };\r\n    // Sending the info about the room\r\n    gameSocket.onmessage = function (e) {\r\n        let data = JSON.parse(e.data);\r\n        data = data[\"payload\"];\r\n        let message = data[\"message\"];\r\n        let event = data[\"event\"];\r\n        switch (event) {\r\n            case \"START\":\r\n                //reset();\r\n                break;\r\n            case \"END\":\r\n                alert(message);\r\n                //reset();\r\n                break;\r\n            case \"MOVE\":\r\n                if (message[\"player\"] != char_choice) {\r\n                    make_move(message[\"index\"], message[\"player\"]);\r\n                    myturn = true;\r\n                    document.getElementById(\"alert_move\").style.display =\r\n                        \"inline\";\r\n                }\r\n                break;\r\n            default:\r\n                console.log(\"No event\");\r\n        }\r\n    };\r\n\r\n    if (gameSocket.readyState == WebSocket.OPEN) {\r\n        gameSocket.onopen();\r\n    }\r\n}\r\n\r\nconnect();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}