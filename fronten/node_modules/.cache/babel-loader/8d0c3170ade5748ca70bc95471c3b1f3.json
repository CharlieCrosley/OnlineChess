{"ast":null,"code":"export function movePiece(toX, toY, setBoardState, item, boardState) {\n  const square = squareIsEmpty(toX, toY, boardState);\n\n  if (square != null) {\n    if (!square.isOwner) {\n      boardState[square.piece].isAlive = false;\n    }\n  } //console.log(boardState[item.pieceName].row);\n\n\n  setBoardState(prevState => ({ ...prevState,\n    [item.pieceName]: {\n      row: toY,\n      col: toX,\n      hasMoved: true,\n      isOwner: true,\n      isAlive: true\n    }\n  })); //console.log(boardState[item.pieceName].row);\n}\nexport function canMovePiece(toX, toY, item, boardState, monitor) {\n  //console.log(monitor.getItem().pieceState.row);\n  const square = squareIsEmpty(toX, toY, boardState); //toX === 0 && toY === 6 ? console.log(square) : console.log(null);\n  //console.log(square);\n\n  if (square && square.state.isOwner) return false;\n  const dx = toX - item.pieceState.col;\n  const dy = toY - item.pieceState.row;\n  const pieceName = item.pieceName.split(\"_\")[0];\n  const diagCollisions = checkDiagCollisions(toX, toY, boardState, monitor); //console.log([diagCollisions, toX, toY]);\n\n  switch (pieceName) {\n    case \"castle\":\n      return Math.abs(dx) === 0 && Math.abs(dy) > 0 || Math.abs(dx) > 0 && Math.abs(dy) === 0;\n\n    case \"knight\":\n      return Math.abs(dx) === 2 && Math.abs(dy) === 1 || Math.abs(dx) === 1 && Math.abs(dy) === 2;\n\n    case \"bishop\":\n      return !(Math.abs(dx) === 0 && Math.abs(dy) > 0) && !(Math.abs(dx) > 0 && Math.abs(dy) === 0) && (Math.abs(dx) === Math.abs(dy) || Math.abs(dx) === Math.abs(dy));\n\n    case \"queen\":\n      return (Math.abs(dx) === 0 && Math.abs(dy) > 0 || Math.abs(dx) > 0 && Math.abs(dy) === 0) && !checkStraightCollisions || (Math.abs(dx) === Math.abs(dy) || Math.abs(dx) === Math.abs(dy)) && !diagCollisions;\n\n    case \"king\":\n      return (Math.abs(dx) === 1 || Math.abs(dx) === 0) && (Math.abs(dy) === 1 || Math.abs(dy) === 0);\n\n    case \"pawn\":\n      if (!item.pieceState.hasMoved) // Negative direction moves up the board (player always at bottom)\n        return Math.abs(dx) === 0 && (dy === -1 || dy === -2);\n      return dx === 0 && dy === -1;\n\n    default:\n      break;\n  }\n}\n\nfunction squareIsEmpty(x, y, boardState) {\n  for (const [piece, state] of Object.entries(boardState)) {\n    if (x === state.col && y === state.row) {\n      return {\n        piece,\n        state\n      };\n    }\n  }\n\n  return null;\n}\n/**\r\n * Checks if there is a piece in the diagonal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\n\n\nfunction checkDiagCollisions(x, y, boardState, monitor) {\n  const row = monitor.getItem().pieceState.row;\n  const col = monitor.getItem().pieceState.col;\n  const dirX = Math.sign(x - col);\n  const dirY = Math.sign(y - row);\n\n  for (let i = 1; i < Math.abs(x - col) + 1; i++) {\n    for (const [_, state] of Object.entries(boardState)) {\n      if (col + i * dirX === state.col && row + i * dirY === state.row && state.isAlive) {\n        if (i !== Math.abs(x - col)) {\n          // Stops opponents pieces from being taken when hidden behind each other\n          return true;\n        }\n\n        return state.isOwner;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction checkStraightCollisions(x, y, boardState, monitor) {\n  const dx = Math.abs(x - col);\n  const dy = Math.abs(y - row);\n  if (dx > 0 && dy > 0) return true;\n  const row = monitor.getItem().pieceState.row;\n  const col = monitor.getItem().pieceState.col;\n  const dirX = Math.sign(x - col);\n  const dirY = Math.sign(y - row);\n\n  for (let i = 1; i < Math.abs(x - col) + 1; i++) {\n    for (const [_, state] of Object.entries(boardState)) {\n      if (dx > dy && state.isAlive) {\n        if (col + i * dirX === state.col) {\n          if (i !== Math.abs(x - col)) {\n            // Stops opponents pieces from being taken when hidden behind each other\n            return true;\n          }\n\n          return state.isOwner;\n        } else if (row + i * dirY === state.row) {\n          if (i !== Math.abs(y - row)) {\n            // Stops opponents pieces from being taken when hidden behind each other\n            return true;\n          }\n\n          return state.isOwner;\n        }\n      }\n    }\n  }\n\n  return false;\n}","map":{"version":3,"names":["movePiece","toX","toY","setBoardState","item","boardState","square","squareIsEmpty","isOwner","piece","isAlive","prevState","pieceName","row","col","hasMoved","canMovePiece","monitor","state","dx","pieceState","dy","split","diagCollisions","checkDiagCollisions","Math","abs","checkStraightCollisions","x","y","Object","entries","getItem","dirX","sign","dirY","i","_"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/components/Game.js"],"sourcesContent":["export function movePiece(toX, toY, setBoardState, item, boardState) {\r\n    const square = squareIsEmpty(toX, toY, boardState);\r\n    if (square != null) {\r\n        if (!square.isOwner) {\r\n            boardState[square.piece].isAlive = false;\r\n        }\r\n    }\r\n\r\n    //console.log(boardState[item.pieceName].row);\r\n\r\n    setBoardState((prevState) => ({\r\n        ...prevState,\r\n        [item.pieceName]: {\r\n            row: toY,\r\n            col: toX,\r\n            hasMoved: true,\r\n            isOwner: true,\r\n            isAlive: true,\r\n        },\r\n    }));\r\n    //console.log(boardState[item.pieceName].row);\r\n}\r\n\r\nexport function canMovePiece(toX, toY, item, boardState, monitor) {\r\n    //console.log(monitor.getItem().pieceState.row);\r\n    const square = squareIsEmpty(toX, toY, boardState);\r\n    //toX === 0 && toY === 6 ? console.log(square) : console.log(null);\r\n    //console.log(square);\r\n    if (square && square.state.isOwner) return false;\r\n\r\n    const dx = toX - item.pieceState.col;\r\n    const dy = toY - item.pieceState.row;\r\n\r\n    const pieceName = item.pieceName.split(\"_\")[0];\r\n\r\n    const diagCollisions = checkDiagCollisions(toX, toY, boardState, monitor);\r\n    //console.log([diagCollisions, toX, toY]);\r\n\r\n    switch (pieceName) {\r\n        case \"castle\":\r\n            return (\r\n                (Math.abs(dx) === 0 && Math.abs(dy) > 0) ||\r\n                (Math.abs(dx) > 0 && Math.abs(dy) === 0)\r\n            );\r\n\r\n        case \"knight\":\r\n            return (\r\n                (Math.abs(dx) === 2 && Math.abs(dy) === 1) ||\r\n                (Math.abs(dx) === 1 && Math.abs(dy) === 2)\r\n            );\r\n\r\n        case \"bishop\":\r\n            return (\r\n                !(Math.abs(dx) === 0 && Math.abs(dy) > 0) &&\r\n                !(Math.abs(dx) > 0 && Math.abs(dy) === 0) &&\r\n                (Math.abs(dx) === Math.abs(dy) || Math.abs(dx) === Math.abs(dy))\r\n            );\r\n\r\n        case \"queen\":\r\n            return (\r\n                (((Math.abs(dx) === 0 && Math.abs(dy) > 0) ||\r\n                    (Math.abs(dx) > 0 && Math.abs(dy) === 0)) &&\r\n                    !checkStraightCollisions) ||\r\n                ((Math.abs(dx) === Math.abs(dy) ||\r\n                    Math.abs(dx) === Math.abs(dy)) &&\r\n                    !diagCollisions)\r\n            );\r\n\r\n        case \"king\":\r\n            return (\r\n                (Math.abs(dx) === 1 || Math.abs(dx) === 0) &&\r\n                (Math.abs(dy) === 1 || Math.abs(dy) === 0)\r\n            );\r\n\r\n        case \"pawn\":\r\n            if (!item.pieceState.hasMoved)\r\n                // Negative direction moves up the board (player always at bottom)\r\n                return Math.abs(dx) === 0 && (dy === -1 || dy === -2);\r\n            return dx === 0 && dy === -1;\r\n\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nfunction squareIsEmpty(x, y, boardState) {\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        if (x === state.col && y === state.row) {\r\n            return { piece, state };\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Checks if there is a piece in the diagonal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\r\nfunction checkDiagCollisions(x, y, boardState, monitor) {\r\n    const row = monitor.getItem().pieceState.row;\r\n    const col = monitor.getItem().pieceState.col;\r\n\r\n    const dirX = Math.sign(x - col);\r\n    const dirY = Math.sign(y - row);\r\n    for (let i = 1; i < Math.abs(x - col) + 1; i++) {\r\n        for (const [_, state] of Object.entries(boardState)) {\r\n            if (\r\n                col + i * dirX === state.col &&\r\n                row + i * dirY === state.row &&\r\n                state.isAlive\r\n            ) {\r\n                if (i !== Math.abs(x - col)) {\r\n                    // Stops opponents pieces from being taken when hidden behind each other\r\n                    return true;\r\n                }\r\n                return state.isOwner;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction checkStraightCollisions(x, y, boardState, monitor) {\r\n    const dx = Math.abs(x - col);\r\n    const dy = Math.abs(y - row);\r\n    if (dx > 0 && dy > 0) return true;\r\n\r\n    const row = monitor.getItem().pieceState.row;\r\n    const col = monitor.getItem().pieceState.col;\r\n\r\n    const dirX = Math.sign(x - col);\r\n    const dirY = Math.sign(y - row);\r\n\r\n    for (let i = 1; i < Math.abs(x - col) + 1; i++) {\r\n        for (const [_, state] of Object.entries(boardState)) {\r\n            if (dx > dy && state.isAlive) {\r\n                if (col + i * dirX === state.col) {\r\n                    if (i !== Math.abs(x - col)) {\r\n                        // Stops opponents pieces from being taken when hidden behind each other\r\n                        return true;\r\n                    }\r\n                    return state.isOwner;\r\n                } else if (row + i * dirY === state.row) {\r\n                    if (i !== Math.abs(y - row)) {\r\n                        // Stops opponents pieces from being taken when hidden behind each other\r\n                        return true;\r\n                    }\r\n                    return state.isOwner;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}