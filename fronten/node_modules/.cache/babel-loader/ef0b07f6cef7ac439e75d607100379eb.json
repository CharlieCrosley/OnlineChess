{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _readOnlyError from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/readOnlyError.js\";import _defineProperty from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _slicedToArray from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import useWebSocket,{ReadyState}from\"react-use-websocket\";import{useLocation}from\"react-router-dom\";import{GameContainer,GamePlayer,Player,TakenPieces}from\"./GameElements\";import Board from\"../components/Board\";import{checkIfOpponentInCheck,canMovePiece}from\"../components/Game\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Chess=function Chess(){var _ReadyState$CONNECTIN;var location=useLocation();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),winner=_useState2[0],setWinner=_useState2[1];var _useState3=useState(location.state.room),_useState4=_slicedToArray(_useState3,1),room=_useState4[0];var _useState5=useState(location.state.name),_useState6=_slicedToArray(_useState5,1),name=_useState6[0];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),opponentName=_useState8[0],setOpponentName=_useState8[1];var _useState9=useState(location.state.colour),_useState10=_slicedToArray(_useState9,1),playerColour=_useState10[0];var _useState11=useState({white:[],black:[]}),_useState12=_slicedToArray(_useState11,2),takenPieces=_useState12[0],setTakenPieces=_useState12[1];var _useState13=useState(location.state.colour===\"white\"?true:false),_useState14=_slicedToArray(_useState13,2),isTurn=_useState14[0],setIsTurn=_useState14[1];/* require(\"../assets/images/pieces/pawn_b.png\"),\r\n    require(\"../assets/images/pieces/queen_b.png\"),\r\n    require(\"../assets/images/pieces/bishop_b.png\"),\r\n    require(\"../assets/images/pieces/king_b.png\"), */var boardRotation=getBoardRotation(playerColour);var isWhite=playerColour===\"white\";// Sets initial piece positions ensuring that players colour is always at bottom\nvar _useState15=useState(initBoardState(isWhite,boardRotation)),_useState16=_slicedToArray(_useState15,2),boardState=_useState16[0],setBoardState=_useState16[1];var _useState17=useState(null),_useState18=_slicedToArray(_useState17,2),prevBoardState=_useState18[0],setPrevBoardState=_useState18[1];var _useState19=useState({check:new Audio(require(\"../assets/sounds/check.mp3\")),move:new Audio(require(\"../assets/sounds/move.mp3\")),capture:new Audio(require(\"../assets/sounds/capture.ogg\")),end:new Audio(require(\"../assets/sounds/game_end.mp3\"))}),_useState20=_slicedToArray(_useState19,1),audio=_useState20[0];var _useWebSocket=useWebSocket(\"ws://127.0.0.1:8000/ws/\"+room+\"/\",{onOpen:function onOpen(){console.log(\"Connected!\");sendMessage(JSON.stringify({type:\"send_message\",message:{opponentName:name},event:\"START\"}));},onClose:function onClose(){console.log(\"Disconnected!\");},onMessage:function onMessage(e){var dataFromServer=JSON.parse(e.data);switch(dataFromServer.payload.event){case\"START\":if(opponentName===null&&dataFromServer.payload.message.opponentName!==name){//\nconsole.log(dataFromServer.payload.message.opponentName);setOpponentName(dataFromServer.payload.message.opponentName);sendMessage(JSON.stringify({type:\"send_message\",message:{opponentName:name},event:\"START\"}));}case\"MOVE\":// Ensure that the message is not from self\nif(dataFromServer.payload.message.opponent&&dataFromServer.payload.message.opponent.colour!==playerColour){var flippedBoard=flipBoard(dataFromServer.payload.message.boardState);// Make sure that the board state has changed\n// Board must be flipped since the opponent sees it from the other side\nif(JSON.stringify(flippedBoard)!==JSON.stringify(boardState)){setBoardState(flippedBoard);setTakenPieces(dataFromServer.payload.message.takenPieces);setOpponentName(dataFromServer.payload.message.opponent.name);if(checkForGameOver()){setWinner(opponentName);}}}}}}),sendMessage=_useWebSocket.sendMessage,readyState=_useWebSocket.readyState;var connectionStatus=(_ReadyState$CONNECTIN={},_defineProperty(_ReadyState$CONNECTIN,ReadyState.CONNECTING,\"Connecting\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.OPEN,\"Open\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.CLOSING,\"Closing\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.CLOSED,\"Closed\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.UNINSTANTIATED,\"Uninstantiated\"),_ReadyState$CONNECTIN)[readyState];var playMoveAudio=function playMoveAudio(){if(prevBoardState===null)return;for(var _i=0,_Object$entries=Object.entries(boardState);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],1),piece=_Object$entries$_i[0];// Check if any piece has been taken by comparing the new and old board states\nif(boardState[piece].isAlive!==prevBoardState[piece].isAlive){audio.capture.play();return;}}// If no piece has been taken, play the normal move sound\naudio.move.play();};var handleCheckmate=function handleCheckmate(){// Update the kings check state\nvar opponentKing,playerKing;if(boardState[\"king_w\"].isOwner){opponentKing=boardState[\"king_b\"];playerKing=boardState[\"king_w\"];}else{opponentKing=boardState[\"king_w\"];playerKing=boardState[\"king_b\"];}if(checkIfOpponentInCheck(boardState,opponentKing)){audio.check.play();opponentKing.inCheck=true;}else{opponentKing.inCheck=false;}// This state will be updated when on the opponents side and sent to the player\nif(playerKing.inCheck){audio.check.play();}};var checkForGameOver=function checkForGameOver(){for(var i=0;i<64;+i,_readOnlyError(\"i\")){var row=Math.floor(i/8);var col=i%8;var _iterator=_createForOfIteratorHelper(Objects.entries(boardState)),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),piece=_step$value[0],state=_step$value[1];// If a piece can be moved, the game is not over\nif(state.isOwner&&canMovePiece(col,row,{pieceName:piece,pieceState:state},boardState))return false;}}catch(err){_iterator.e(err);}finally{_iterator.f();}}return true;};useEffect(function(){// Send the current board state to the websocket group\n// Only send message if the board state has changed to avoid infintite loop of sending\nplayMoveAudio();handleCheckmate();if(prevBoardState!==null){sendMessage(JSON.stringify({type:\"send_message\",message:{boardState:boardState,takenPieces:takenPieces,opponent:{name:name,colour:playerColour}},event:\"MOVE\"}));}// Swap turns\nsetIsTurn(function(prev){return!prev;});setPrevBoardState(boardState);},[boardState]);useEffect(function(){// Display game over screen\nconsole.log(\"WINNER!\");},[winner]);var opponentColour=playerColour===\"white\"?\"black\":\"white\";return/*#__PURE__*/_jsx(GameContainer,{children:/*#__PURE__*/_jsxs(GamePlayer,{children:[/*#__PURE__*/_jsxs(Player,{children:[/*#__PURE__*/_jsx(\"div\",{children:opponentName}),/*#__PURE__*/_jsx(TakenPieces,{children:takenPieces[playerColour].map(function(piecePath,i){return/*#__PURE__*/_jsx(\"img\",{src:piecePath},i);})})]}),/*#__PURE__*/_jsx(Board,{boardState:boardState,setBoardState:setBoardState,setTakenPieces:setTakenPieces,isTurn:isTurn}),/*#__PURE__*/_jsxs(Player,{children:[/*#__PURE__*/_jsx(\"div\",{children:name}),/*#__PURE__*/_jsx(TakenPieces,{children:takenPieces[opponentColour].map(function(piecePath,i){return/*#__PURE__*/_jsx(\"img\",{src:piecePath},i);})})]})]})});};export default Chess;var getBoardRotation=function getBoardRotation(colour){if(colour===\"white\")return{white:[7,6],black:[0,1]};else if(colour===\"black\")return{white:[0,1],black:[7,6]};throw\"Colour must be black or white\";};var flipBoard=function flipBoard(boardState){for(var _i2=0,_Object$entries2=Object.entries(boardState);_i2<_Object$entries2.length;_i2++){var _Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),_=_Object$entries2$_i[0],state=_Object$entries2$_i[1];state.row=7-state.row;state.col=7-state.col;state.isOwner=!state.isOwner;}return boardState;};export var initBoardState=function initBoardState(isWhite,boardRotation){var pieceNames=[\"castle_w_1\",\"knight_w_1\",\"bishop_w_1\",\"queen_w\",\"king_w\",\"bishop_w_2\",\"knight_w_2\",\"castle_w_2\",\"pawn_w_1\",\"pawn_w_2\",\"pawn_w_3\",\"pawn_w_4\",\"pawn_w_5\",\"pawn_w_6\",\"pawn_w_7\",\"pawn_w_8\",\"castle_b_1\",\"knight_b_1\",\"bishop_b_1\",\"queen_b\",\"king_b\",\"bishop_b_2\",\"knight_b_2\",\"castle_b_2\",\"pawn_b_1\",\"pawn_b_2\",\"pawn_b_3\",\"pawn_b_4\",\"pawn_b_5\",\"pawn_b_6\",\"pawn_b_7\",\"pawn_b_8\"];var boardState={};for(var i=0;i<32;i++){// First 16 elements in  pieces array are white rest are black\n// Each 8 elements in array is a row\nif(i<16){var row=void 0;if(i<8)row=boardRotation.white[0];else row=boardRotation.white[1];var properties={row:row,col:i%8,hasMoved:false,isOwner:isWhite,isAlive:true};if(pieceNames[i]===\"king_w\"||pieceNames[i]===\"king_b\"){properties[\"inCheck\"]=false;}boardState[pieceNames[i]]=properties;}else{var _row=void 0;if(i<24)_row=boardRotation.black[0];else _row=boardRotation.black[1];var _properties={row:_row,col:i%8,hasMoved:false,isOwner:!isWhite,isAlive:true};if(pieceNames[i]===\"king_w\"||pieceNames[i]===\"king_b\"){_properties[\"inCheck\"]=false;}boardState[pieceNames[i]]=_properties;}}return boardState;};","map":{"version":3,"names":["React","useState","useEffect","useWebSocket","ReadyState","useLocation","GameContainer","GamePlayer","Player","TakenPieces","Board","checkIfOpponentInCheck","canMovePiece","Chess","location","winner","setWinner","state","room","name","opponentName","setOpponentName","colour","playerColour","white","black","takenPieces","setTakenPieces","isTurn","setIsTurn","boardRotation","getBoardRotation","isWhite","initBoardState","boardState","setBoardState","prevBoardState","setPrevBoardState","check","Audio","require","move","capture","end","audio","onOpen","console","log","sendMessage","JSON","stringify","type","message","event","onClose","onMessage","e","dataFromServer","parse","data","payload","opponent","flippedBoard","flipBoard","checkForGameOver","readyState","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","playMoveAudio","Object","entries","piece","isAlive","play","handleCheckmate","opponentKing","playerKing","isOwner","inCheck","i","row","Math","floor","col","Objects","pieceName","pieceState","prev","opponentColour","map","piecePath","_","pieceNames","properties","hasMoved"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/pages/Chess.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { GameContainer, GamePlayer, Player, TakenPieces } from \"./GameElements\";\r\nimport Board from \"../components/Board\";\r\nimport { checkIfOpponentInCheck, canMovePiece } from \"../components/Game\";\r\n\r\nconst Chess = () => {\r\n    const location = useLocation();\r\n\r\n    const [winner, setWinner] = useState(null);\r\n    const [room] = useState(location.state.room);\r\n    const [name] = useState(location.state.name);\r\n    const [opponentName, setOpponentName] = useState(null);\r\n    const [playerColour] = useState(location.state.colour);\r\n    const [takenPieces, setTakenPieces] = useState({\r\n        white: [],\r\n        black: [],\r\n    });\r\n    const [isTurn, setIsTurn] = useState(\r\n        location.state.colour === \"white\" ? true : false\r\n    );\r\n\r\n    /* require(\"../assets/images/pieces/pawn_b.png\"),\r\n    require(\"../assets/images/pieces/queen_b.png\"),\r\n    require(\"../assets/images/pieces/bishop_b.png\"),\r\n    require(\"../assets/images/pieces/king_b.png\"), */\r\n\r\n    const boardRotation = getBoardRotation(playerColour);\r\n    const isWhite = playerColour === \"white\";\r\n    // Sets initial piece positions ensuring that players colour is always at bottom\r\n    const [boardState, setBoardState] = useState(\r\n        initBoardState(isWhite, boardRotation)\r\n    );\r\n    const [prevBoardState, setPrevBoardState] = useState(null);\r\n\r\n    const [audio] = useState({\r\n        check: new Audio(require(\"../assets/sounds/check.mp3\")),\r\n        move: new Audio(require(\"../assets/sounds/move.mp3\")),\r\n        capture: new Audio(require(\"../assets/sounds/capture.ogg\")),\r\n        end: new Audio(require(\"../assets/sounds/game_end.mp3\")),\r\n    });\r\n\r\n    const { sendMessage, readyState } = useWebSocket(\r\n        \"ws://127.0.0.1:8000/ws/\" + room + \"/\",\r\n        {\r\n            onOpen: () => {\r\n                console.log(\"Connected!\");\r\n                sendMessage(\r\n                    JSON.stringify({\r\n                        type: \"send_message\",\r\n                        message: { opponentName: name },\r\n                        event: \"START\",\r\n                    })\r\n                );\r\n            },\r\n            onClose: () => {\r\n                console.log(\"Disconnected!\");\r\n            },\r\n            onMessage: (e) => {\r\n                const dataFromServer = JSON.parse(e.data);\r\n                switch (dataFromServer.payload.event) {\r\n                    case \"START\":\r\n                        if (\r\n                            opponentName === null &&\r\n                            dataFromServer.payload.message.opponentName !== name\r\n                        ) {\r\n                            //\r\n                            console.log(\r\n                                dataFromServer.payload.message.opponentName\r\n                            );\r\n                            setOpponentName(\r\n                                dataFromServer.payload.message.opponentName\r\n                            );\r\n                            sendMessage(\r\n                                JSON.stringify({\r\n                                    type: \"send_message\",\r\n                                    message: { opponentName: name },\r\n                                    event: \"START\",\r\n                                })\r\n                            );\r\n                        }\r\n\r\n                    case \"MOVE\":\r\n                        // Ensure that the message is not from self\r\n                        if (\r\n                            dataFromServer.payload.message.opponent &&\r\n                            dataFromServer.payload.message.opponent.colour !==\r\n                                playerColour\r\n                        ) {\r\n                            const flippedBoard = flipBoard(\r\n                                dataFromServer.payload.message.boardState\r\n                            );\r\n                            // Make sure that the board state has changed\r\n                            // Board must be flipped since the opponent sees it from the other side\r\n                            if (\r\n                                JSON.stringify(flippedBoard) !==\r\n                                JSON.stringify(boardState)\r\n                            ) {\r\n                                setBoardState(flippedBoard);\r\n\r\n                                setTakenPieces(\r\n                                    dataFromServer.payload.message.takenPieces\r\n                                );\r\n                                setOpponentName(\r\n                                    dataFromServer.payload.message.opponent.name\r\n                                );\r\n\r\n                                if (checkForGameOver()) {\r\n                                    setWinner(opponentName);\r\n                                }\r\n                            }\r\n                        }\r\n                }\r\n            },\r\n        }\r\n    );\r\n\r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: \"Connecting\",\r\n        [ReadyState.OPEN]: \"Open\",\r\n        [ReadyState.CLOSING]: \"Closing\",\r\n        [ReadyState.CLOSED]: \"Closed\",\r\n        [ReadyState.UNINSTANTIATED]: \"Uninstantiated\",\r\n    }[readyState];\r\n\r\n    const playMoveAudio = () => {\r\n        if (prevBoardState === null) return;\r\n        for (const [piece] of Object.entries(boardState)) {\r\n            // Check if any piece has been taken by comparing the new and old board states\r\n            if (boardState[piece].isAlive !== prevBoardState[piece].isAlive) {\r\n                audio.capture.play();\r\n                return;\r\n            }\r\n        }\r\n        // If no piece has been taken, play the normal move sound\r\n        audio.move.play();\r\n    };\r\n\r\n    const handleCheckmate = () => {\r\n        // Update the kings check state\r\n        let opponentKing, playerKing;\r\n        if (boardState[\"king_w\"].isOwner) {\r\n            opponentKing = boardState[\"king_b\"];\r\n            playerKing = boardState[\"king_w\"];\r\n        } else {\r\n            opponentKing = boardState[\"king_w\"];\r\n            playerKing = boardState[\"king_b\"];\r\n        }\r\n\r\n        if (checkIfOpponentInCheck(boardState, opponentKing)) {\r\n            audio.check.play();\r\n            opponentKing.inCheck = true;\r\n        } else {\r\n            opponentKing.inCheck = false;\r\n        }\r\n        // This state will be updated when on the opponents side and sent to the player\r\n        if (playerKing.inCheck) {\r\n            audio.check.play();\r\n        }\r\n    };\r\n\r\n    const checkForGameOver = () => {\r\n        for (const i = 0; i < 64; i++) {\r\n            const row = Math.floor(i / 8);\r\n            const col = i % 8;\r\n            for (const [piece, state] of Objects.entries(boardState)) {\r\n                // If a piece can be moved, the game is not over\r\n                if (\r\n                    state.isOwner &&\r\n                    canMovePiece(\r\n                        col,\r\n                        row,\r\n                        { pieceName: piece, pieceState: state },\r\n                        boardState\r\n                    )\r\n                )\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Send the current board state to the websocket group\r\n        // Only send message if the board state has changed to avoid infintite loop of sending\r\n        playMoveAudio();\r\n\r\n        handleCheckmate();\r\n\r\n        if (prevBoardState !== null) {\r\n            sendMessage(\r\n                JSON.stringify({\r\n                    type: \"send_message\",\r\n                    message: {\r\n                        boardState,\r\n                        takenPieces,\r\n                        opponent: { name: name, colour: playerColour },\r\n                    },\r\n                    event: \"MOVE\",\r\n                })\r\n            );\r\n        }\r\n        // Swap turns\r\n        setIsTurn((prev) => !prev);\r\n        setPrevBoardState(boardState);\r\n    }, [boardState]);\r\n\r\n    useEffect(() => {\r\n        // Display game over screen\r\n        console.log(\"WINNER!\");\r\n    }, [winner]);\r\n\r\n    const opponentColour = playerColour === \"white\" ? \"black\" : \"white\";\r\n\r\n    return (\r\n        <GameContainer>\r\n            <GamePlayer>\r\n                {/* <div style={{ color: \"white\" }}>\r\n                    The WebSocket is currently {connectionStatus}\r\n                </div> */}\r\n                <Player>\r\n                    <div>{opponentName}</div>\r\n                    <TakenPieces>\r\n                        {takenPieces[playerColour].map((piecePath, i) => {\r\n                            return <img key={i} src={piecePath} />;\r\n                        })}\r\n                    </TakenPieces>\r\n                </Player>\r\n                <Board\r\n                    boardState={boardState}\r\n                    setBoardState={setBoardState}\r\n                    setTakenPieces={setTakenPieces}\r\n                    isTurn={isTurn}\r\n                />\r\n                <Player>\r\n                    <div>{name}</div>\r\n                    <TakenPieces>\r\n                        {takenPieces[opponentColour].map((piecePath, i) => {\r\n                            return <img key={i} src={piecePath} />;\r\n                        })}\r\n                    </TakenPieces>\r\n                </Player>\r\n            </GamePlayer>\r\n        </GameContainer>\r\n    );\r\n};\r\n\r\nexport default Chess;\r\n\r\nconst getBoardRotation = (colour) => {\r\n    if (colour === \"white\") return { white: [7, 6], black: [0, 1] };\r\n    else if (colour === \"black\") return { white: [0, 1], black: [7, 6] };\r\n    throw \"Colour must be black or white\";\r\n};\r\n\r\nconst flipBoard = (boardState) => {\r\n    for (const [_, state] of Object.entries(boardState)) {\r\n        state.row = 7 - state.row;\r\n        state.col = 7 - state.col;\r\n        state.isOwner = !state.isOwner;\r\n    }\r\n    return boardState;\r\n};\r\n\r\nexport const initBoardState = (isWhite, boardRotation) => {\r\n    const pieceNames = [\r\n        \"castle_w_1\",\r\n        \"knight_w_1\",\r\n        \"bishop_w_1\",\r\n        \"queen_w\",\r\n        \"king_w\",\r\n        \"bishop_w_2\",\r\n        \"knight_w_2\",\r\n        \"castle_w_2\",\r\n        \"pawn_w_1\",\r\n        \"pawn_w_2\",\r\n        \"pawn_w_3\",\r\n        \"pawn_w_4\",\r\n        \"pawn_w_5\",\r\n        \"pawn_w_6\",\r\n        \"pawn_w_7\",\r\n        \"pawn_w_8\",\r\n        \"castle_b_1\",\r\n        \"knight_b_1\",\r\n        \"bishop_b_1\",\r\n        \"queen_b\",\r\n        \"king_b\",\r\n        \"bishop_b_2\",\r\n        \"knight_b_2\",\r\n        \"castle_b_2\",\r\n        \"pawn_b_1\",\r\n        \"pawn_b_2\",\r\n        \"pawn_b_3\",\r\n        \"pawn_b_4\",\r\n        \"pawn_b_5\",\r\n        \"pawn_b_6\",\r\n        \"pawn_b_7\",\r\n        \"pawn_b_8\",\r\n    ];\r\n    const boardState = {};\r\n    for (let i = 0; i < 32; i++) {\r\n        // First 16 elements in  pieces array are white rest are black\r\n        // Each 8 elements in array is a row\r\n        if (i < 16) {\r\n            let row;\r\n            if (i < 8) row = boardRotation.white[0];\r\n            else row = boardRotation.white[1];\r\n            const properties = {\r\n                row: row,\r\n                col: i % 8,\r\n                hasMoved: false,\r\n                isOwner: isWhite,\r\n                isAlive: true,\r\n            };\r\n            if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\r\n                properties[\"inCheck\"] = false;\r\n            }\r\n            boardState[pieceNames[i]] = properties;\r\n        } else {\r\n            let row;\r\n            if (i < 24) row = boardRotation.black[0];\r\n            else row = boardRotation.black[1];\r\n            const properties = {\r\n                row: row,\r\n                col: i % 8,\r\n                hasMoved: false,\r\n                isOwner: !isWhite,\r\n                isAlive: true,\r\n            };\r\n            if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\r\n                properties[\"inCheck\"] = false;\r\n            }\r\n            boardState[pieceNames[i]] = properties;\r\n        }\r\n    }\r\n    return boardState;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}