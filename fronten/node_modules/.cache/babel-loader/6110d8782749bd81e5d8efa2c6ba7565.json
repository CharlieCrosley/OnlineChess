{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\charl\\\\Documents\\\\Code\\\\Web Dev\\\\Chess-Online\\\\chessproject\\\\frontend\\\\src\\\\pages\\\\Chess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { useLocation } from \"react-router-dom\";\nimport { GameContainer, GamePlayer, Player, TakenPieces } from \"./GameElements\";\nimport Board from \"../components/Board\";\nimport { initBoardState } from \"../components/BoardState\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chess = () => {\n  _s();\n\n  //console.log(window.location.href.split(\"/\")[4]);\n  //const roomNumber = window.location.href.split(\"/\")[4]\n  //const playerName = window.location.href.split(\"/\")[4]\n  const location = useLocation();\n  const [room, setRoom] = useState(location.state.room);\n  const [name, setName] = useState(location.state.name);\n  const [playerColour, setColour] = useState(location.state.colour);\n  const [takenPieces, setTakenPieces] = useState({\n    white: [],\n    black: []\n  });\n\n  const getBoardRotation = colour => {\n    if (colour === \"white\") return {\n      white: [7, 6],\n      black: [0, 1]\n    };else if (colour === \"black\") return {\n      white: [0, 1],\n      black: [7, 6]\n    };\n    throw \"Colour must be black or white\";\n  };\n\n  const boardRotation = getBoardRotation(playerColour);\n  const isWhite = playerColour === \"white\"; // Sets initial piece positions ensuring that players colour is always at bottom\n\n  const [boardState, setBoardState] = useState(initBoardState(isWhite, boardRotation));\n  const [prevBoardState, setPrevBoardState] = useState(null);\n  const {\n    sendMessage,\n    lastMessage,\n    readyState\n  } = useWebSocket(\"ws://127.0.0.1:8000/ws/\" + room + \"/\", {\n    onOpen: () => {\n      console.log(\"Connected!\");\n    },\n    onClose: () => {\n      console.log(\"Disconnected!\");\n    },\n    onMessage: e => {\n      //console.log(e);\n      const dataFromServer = JSON.parse(e.data); //console.log(dataFromServer);\n\n      if (dataFromServer.payload.event === \"MOVE\") {\n        console.log(dataFromServer);\n        setBoardState(dataFromServer.payload.message);\n      }\n    }\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: \"Connecting\",\n    [ReadyState.OPEN]: \"Open\",\n    [ReadyState.CLOSING]: \"Closing\",\n    [ReadyState.CLOSED]: \"Closed\",\n    [ReadyState.UNINSTANTIATED]: \"Uninstantiated\"\n  }[readyState];\n  useEffect(() => {\n    // Send the current board state to the websocket group\n    // Only send message if the board state has changed to avoid infintite loop of sending\n    if (JSON.stringify(prevBoardState) !== JSON.stringify(boardState)) {\n      setPrevBoardState(boardState);\n      sendMessage(JSON.stringify({\n        type: \"send_message\",\n        message: boardState,\n        event: \"MOVE\"\n      }));\n    }\n  }, [boardState]);\n  const opponentColour = playerColour === \"white\" ? \"black\" : \"white\";\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    children: /*#__PURE__*/_jsxDEV(GamePlayer, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"white\"\n        },\n        children: [\"The WebSocket is currently \", connectionStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Player, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TakenPieces, {\n          children: takenPieces[playerColour].map((piecePath, i) => {\n            return /*#__PURE__*/_jsxDEV(\"img\", {\n              src: piecePath\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        boardState: boardState,\n        setBoardState: setBoardState,\n        setTakenPieces: setTakenPieces\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Player, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TakenPieces, {\n          children: takenPieces[opponentColour].map((piecePath, i) => {\n            return /*#__PURE__*/_jsxDEV(\"img\", {\n              src: piecePath\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chess, \"+RTkCbSoxs+JkaYPJQcCj+8T1Yg=\", false, function () {\n  return [useLocation, useWebSocket];\n});\n\n_c = Chess;\nexport default Chess;\n/* var roomCode = document.getElementById(\"game_board\").getAttribute(\"room_code\");\r\nvar char_choice = document\r\n    .getElementById(\"game_board\")\r\n    .getAttribute(\"char_choice\");\r\n\r\nvar connectionString =\r\n    \"ws://\" + window.location.host + \"/ws/play/\" + roomCode + \"/\";\r\nvar gameSocket = new WebSocket(connectionString);\r\n\r\nlet myturn = true;\r\n\r\nfunction make_move(index, player) {\r\n    index = parseInt(index);\r\n    let data = {\r\n        event: \"MOVE\",\r\n        message: {\r\n            index: index,\r\n            player: player,\r\n        },\r\n    };\r\n\r\n    if (gameBoard[index] == -1) {\r\n        moveCount++;\r\n        if (player == \"X\") gameBoard[index] = 1;\r\n        else if (player == \"O\") gameBoard[index] = 0;\r\n        else {\r\n            alert(\"Invalid character choice\");\r\n            return false;\r\n        }\r\n        gameSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    elementArray[index].innerHTML = player;\r\n    const win = checkWinner();\r\n    if (myturn) {\r\n        if (win) {\r\n            data = {\r\n                event: \"END\",\r\n                message: `${player} is a winner. Play again?`,\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        } else if (!win && moveCount == 9) {\r\n            data = {\r\n                event: \"END\",\r\n                message: \"It's a draw. Play again?\",\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        }\r\n    }\r\n}\r\n\r\nfunction connect() {\r\n    gameSocket.onopen = function open() {\r\n        console.log(\"WebSockets connection created.\");\r\n        gameSocket.send(\r\n            JSON.stringify({\r\n                event: \"START\",\r\n                message: \"\",\r\n            })\r\n        );\r\n    };\r\n\r\n    gameSocket.onclose = function (e) {\r\n        console.log(\r\n            \"Socket is closed. Reconnect will be attempted in 1 second.\",\r\n            e.reason\r\n        );\r\n        setTimeout(function () {\r\n            connect();\r\n        }, 1000);\r\n    };\r\n    // Sending the info about the room\r\n    gameSocket.onmessage = function (e) {\r\n        let data = JSON.parse(e.data);\r\n        data = data[\"payload\"];\r\n        let message = data[\"message\"];\r\n        let event = data[\"event\"];\r\n        switch (event) {\r\n            case \"START\":\r\n                //reset();\r\n                break;\r\n            case \"END\":\r\n                alert(message);\r\n                //reset();\r\n                break;\r\n            case \"MOVE\":\r\n                if (message[\"player\"] != char_choice) {\r\n                    make_move(message[\"index\"], message[\"player\"]);\r\n                    myturn = true;\r\n                    document.getElementById(\"alert_move\").style.display =\r\n                        \"inline\";\r\n                }\r\n                break;\r\n            default:\r\n                console.log(\"No event\");\r\n        }\r\n    };\r\n\r\n    if (gameSocket.readyState == WebSocket.OPEN) {\r\n        gameSocket.onopen();\r\n    }\r\n}\r\n\r\nconnect(); */\n\nvar _c;\n\n$RefreshReg$(_c, \"Chess\");","map":{"version":3,"names":["React","useState","useWebSocket","ReadyState","useLocation","GameContainer","GamePlayer","Player","TakenPieces","Board","initBoardState","useEffect","Chess","location","room","setRoom","state","name","setName","playerColour","setColour","colour","takenPieces","setTakenPieces","white","black","getBoardRotation","boardRotation","isWhite","boardState","setBoardState","prevBoardState","setPrevBoardState","sendMessage","lastMessage","readyState","onOpen","console","log","onClose","onMessage","e","dataFromServer","JSON","parse","data","payload","event","message","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","stringify","type","opponentColour","color","map","piecePath","i"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/pages/Chess.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { GameContainer, GamePlayer, Player, TakenPieces } from \"./GameElements\";\r\nimport Board from \"../components/Board\";\r\nimport { initBoardState } from \"../components/BoardState\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Chess = () => {\r\n    //console.log(window.location.href.split(\"/\")[4]);\r\n    //const roomNumber = window.location.href.split(\"/\")[4]\r\n    //const playerName = window.location.href.split(\"/\")[4]\r\n\r\n    const location = useLocation();\r\n\r\n    const [room, setRoom] = useState(location.state.room);\r\n    const [name, setName] = useState(location.state.name);\r\n    const [playerColour, setColour] = useState(location.state.colour);\r\n    const [takenPieces, setTakenPieces] = useState({ white: [], black: [] });\r\n\r\n    const getBoardRotation = (colour) => {\r\n        if (colour === \"white\") return { white: [7, 6], black: [0, 1] };\r\n        else if (colour === \"black\") return { white: [0, 1], black: [7, 6] };\r\n        throw \"Colour must be black or white\";\r\n    };\r\n\r\n    const boardRotation = getBoardRotation(playerColour);\r\n    const isWhite = playerColour === \"white\";\r\n    // Sets initial piece positions ensuring that players colour is always at bottom\r\n    const [boardState, setBoardState] = useState(\r\n        initBoardState(isWhite, boardRotation)\r\n    );\r\n    const [prevBoardState, setPrevBoardState] = useState(null);\r\n\r\n    const { sendMessage, lastMessage, readyState } = useWebSocket(\r\n        \"ws://127.0.0.1:8000/ws/\" + room + \"/\",\r\n        {\r\n            onOpen: () => {\r\n                console.log(\"Connected!\");\r\n            },\r\n            onClose: () => {\r\n                console.log(\"Disconnected!\");\r\n            },\r\n            onMessage: (e) => {\r\n                //console.log(e);\r\n                const dataFromServer = JSON.parse(e.data);\r\n\r\n                //console.log(dataFromServer);\r\n                if (dataFromServer.payload.event === \"MOVE\") {\r\n                    console.log(dataFromServer);\r\n                    setBoardState(dataFromServer.payload.message);\r\n                }\r\n            },\r\n        }\r\n    );\r\n\r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: \"Connecting\",\r\n        [ReadyState.OPEN]: \"Open\",\r\n        [ReadyState.CLOSING]: \"Closing\",\r\n        [ReadyState.CLOSED]: \"Closed\",\r\n        [ReadyState.UNINSTANTIATED]: \"Uninstantiated\",\r\n    }[readyState];\r\n\r\n    useEffect(() => {\r\n        // Send the current board state to the websocket group\r\n        // Only send message if the board state has changed to avoid infintite loop of sending\r\n        if (JSON.stringify(prevBoardState) !== JSON.stringify(boardState)) {\r\n            setPrevBoardState(boardState);\r\n            sendMessage(\r\n                JSON.stringify({\r\n                    type: \"send_message\",\r\n                    message: boardState,\r\n                    event: \"MOVE\",\r\n                })\r\n            );\r\n        }\r\n    }, [boardState]);\r\n\r\n    const opponentColour = playerColour === \"white\" ? \"black\" : \"white\";\r\n\r\n    return (\r\n        <GameContainer>\r\n            <GamePlayer>\r\n                <div style={{ color: \"white\" }}>\r\n                    The WebSocket is currently {connectionStatus}\r\n                </div>\r\n                <Player>\r\n                    <div>Name</div>\r\n                    <TakenPieces>\r\n                        {takenPieces[playerColour].map((piecePath, i) => {\r\n                            return <img src={piecePath} />;\r\n                        })}\r\n                    </TakenPieces>\r\n                </Player>\r\n                <Board\r\n                    boardState={boardState}\r\n                    setBoardState={setBoardState}\r\n                    setTakenPieces={setTakenPieces}\r\n                />\r\n                <Player>\r\n                    <div>Name</div>\r\n                    <TakenPieces>\r\n                        {takenPieces[opponentColour].map((piecePath, i) => {\r\n                            return <img src={piecePath} />;\r\n                        })}\r\n                    </TakenPieces>\r\n                </Player>\r\n            </GamePlayer>\r\n        </GameContainer>\r\n    );\r\n};\r\n\r\nexport default Chess;\r\n\r\n/* var roomCode = document.getElementById(\"game_board\").getAttribute(\"room_code\");\r\nvar char_choice = document\r\n    .getElementById(\"game_board\")\r\n    .getAttribute(\"char_choice\");\r\n\r\nvar connectionString =\r\n    \"ws://\" + window.location.host + \"/ws/play/\" + roomCode + \"/\";\r\nvar gameSocket = new WebSocket(connectionString);\r\n\r\nlet myturn = true;\r\n\r\nfunction make_move(index, player) {\r\n    index = parseInt(index);\r\n    let data = {\r\n        event: \"MOVE\",\r\n        message: {\r\n            index: index,\r\n            player: player,\r\n        },\r\n    };\r\n\r\n    if (gameBoard[index] == -1) {\r\n        moveCount++;\r\n        if (player == \"X\") gameBoard[index] = 1;\r\n        else if (player == \"O\") gameBoard[index] = 0;\r\n        else {\r\n            alert(\"Invalid character choice\");\r\n            return false;\r\n        }\r\n        gameSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    elementArray[index].innerHTML = player;\r\n    const win = checkWinner();\r\n    if (myturn) {\r\n        if (win) {\r\n            data = {\r\n                event: \"END\",\r\n                message: `${player} is a winner. Play again?`,\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        } else if (!win && moveCount == 9) {\r\n            data = {\r\n                event: \"END\",\r\n                message: \"It's a draw. Play again?\",\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        }\r\n    }\r\n}\r\n\r\nfunction connect() {\r\n    gameSocket.onopen = function open() {\r\n        console.log(\"WebSockets connection created.\");\r\n        gameSocket.send(\r\n            JSON.stringify({\r\n                event: \"START\",\r\n                message: \"\",\r\n            })\r\n        );\r\n    };\r\n\r\n    gameSocket.onclose = function (e) {\r\n        console.log(\r\n            \"Socket is closed. Reconnect will be attempted in 1 second.\",\r\n            e.reason\r\n        );\r\n        setTimeout(function () {\r\n            connect();\r\n        }, 1000);\r\n    };\r\n    // Sending the info about the room\r\n    gameSocket.onmessage = function (e) {\r\n        let data = JSON.parse(e.data);\r\n        data = data[\"payload\"];\r\n        let message = data[\"message\"];\r\n        let event = data[\"event\"];\r\n        switch (event) {\r\n            case \"START\":\r\n                //reset();\r\n                break;\r\n            case \"END\":\r\n                alert(message);\r\n                //reset();\r\n                break;\r\n            case \"MOVE\":\r\n                if (message[\"player\"] != char_choice) {\r\n                    make_move(message[\"index\"], message[\"player\"]);\r\n                    myturn = true;\r\n                    document.getElementById(\"alert_move\").style.display =\r\n                        \"inline\";\r\n                }\r\n                break;\r\n            default:\r\n                console.log(\"No event\");\r\n        }\r\n    };\r\n\r\n    if (gameSocket.readyState == WebSocket.OPEN) {\r\n        gameSocket.onopen();\r\n    }\r\n}\r\n\r\nconnect(); */\r\n"],"mappings":"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},"metadata":{},"sourceType":"module"}