{"ast":null,"code":"import _defineProperty from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _slicedToArray from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";import useWebSocket,{ReadyState}from\"react-use-websocket\";import{GameContainer,GamePlayer,GameWrap}from\"./GameElements\";import Board from\"../components/Board\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var Chess=function Chess(){var _ReadyState$CONNECTIN;var _useState=useState([0,0]),_useState2=_slicedToArray(_useState,2),knightPosition=_useState2[0],setPosition=_useState2[1];var _useWebSocket=useWebSocket(\"ws://127.0.0.1:8000/\",{onOpen:function onOpen(){console.log(\"Connected!\");},onClose:function onClose(){console.log(\"Disconnected!\");}}),readyState=_useWebSocket.readyState;var connectionStatus=(_ReadyState$CONNECTIN={},_defineProperty(_ReadyState$CONNECTIN,ReadyState.CONNECTING,\"Connecting\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.OPEN,\"Open\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.CLOSING,\"Closing\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.CLOSED,\"Closed\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.UNINSTANTIATED,\"Uninstantiated\"),_ReadyState$CONNECTIN)[readyState];/* const [whitePieces, setWhitePosition] = useState({\r\n    castle1_w:[0,0],\r\n    knight1_w:[0,1],\r\n    bishop1_w:[0,2],\r\n    queen_w:[0,3],\r\n    king_w:[0,4],\r\n    castle2_w:[0,7],\r\n    knight2_w:[0,6],\r\n    bishop2_w:[0,5],\r\n  })\r\n  const [blackPieces, setBlackPosition] = useState({\r\n    castle1_b:[0,0],\r\n    knight1_b:[0,1],\r\n    bishop1_b:[0,2],\r\n    queen_b:[0,3],\r\n    king_b:[0,4],\r\n    castle2_b:[0,7],\r\n    knight2_b:[0,6],\r\n    bishop2_b:[0,5],\r\n  }) */var changePosition=function changePosition(x,y){setPosition([x,y]);/* setPosition(previousState => {\r\n      return { ...previousState, piece: [x, y] }\r\n    }); */};return/*#__PURE__*/_jsx(GameContainer,{children:/*#__PURE__*/_jsxs(GamePlayer,{children:[/*#__PURE__*/_jsxs(\"div\",{children:[\"The WebSocket is currently \",connectionStatus]}),/*#__PURE__*/_jsx(Board,{knightPosition:knightPosition,posHandler:changePosition})]})});};export default Chess;/* var roomCode = document.getElementById(\"game_board\").getAttribute(\"room_code\");\r\nvar char_choice = document\r\n    .getElementById(\"game_board\")\r\n    .getAttribute(\"char_choice\");\r\n\r\nvar connectionString =\r\n    \"ws://\" + window.location.host + \"/ws/play/\" + roomCode + \"/\";\r\nvar gameSocket = new WebSocket(connectionString);\r\n\r\nlet myturn = true;\r\n\r\nfunction make_move(index, player) {\r\n    index = parseInt(index);\r\n    let data = {\r\n        event: \"MOVE\",\r\n        message: {\r\n            index: index,\r\n            player: player,\r\n        },\r\n    };\r\n\r\n    if (gameBoard[index] == -1) {\r\n        moveCount++;\r\n        if (player == \"X\") gameBoard[index] = 1;\r\n        else if (player == \"O\") gameBoard[index] = 0;\r\n        else {\r\n            alert(\"Invalid character choice\");\r\n            return false;\r\n        }\r\n        gameSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    elementArray[index].innerHTML = player;\r\n    const win = checkWinner();\r\n    if (myturn) {\r\n        if (win) {\r\n            data = {\r\n                event: \"END\",\r\n                message: `${player} is a winner. Play again?`,\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        } else if (!win && moveCount == 9) {\r\n            data = {\r\n                event: \"END\",\r\n                message: \"It's a draw. Play again?\",\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        }\r\n    }\r\n}\r\n\r\nfunction connect() {\r\n    gameSocket.onopen = function open() {\r\n        console.log(\"WebSockets connection created.\");\r\n        gameSocket.send(\r\n            JSON.stringify({\r\n                event: \"START\",\r\n                message: \"\",\r\n            })\r\n        );\r\n    };\r\n\r\n    gameSocket.onclose = function (e) {\r\n        console.log(\r\n            \"Socket is closed. Reconnect will be attempted in 1 second.\",\r\n            e.reason\r\n        );\r\n        setTimeout(function () {\r\n            connect();\r\n        }, 1000);\r\n    };\r\n    // Sending the info about the room\r\n    gameSocket.onmessage = function (e) {\r\n        let data = JSON.parse(e.data);\r\n        data = data[\"payload\"];\r\n        let message = data[\"message\"];\r\n        let event = data[\"event\"];\r\n        switch (event) {\r\n            case \"START\":\r\n                //reset();\r\n                break;\r\n            case \"END\":\r\n                alert(message);\r\n                //reset();\r\n                break;\r\n            case \"MOVE\":\r\n                if (message[\"player\"] != char_choice) {\r\n                    make_move(message[\"index\"], message[\"player\"]);\r\n                    myturn = true;\r\n                    document.getElementById(\"alert_move\").style.display =\r\n                        \"inline\";\r\n                }\r\n                break;\r\n            default:\r\n                console.log(\"No event\");\r\n        }\r\n    };\r\n\r\n    if (gameSocket.readyState == WebSocket.OPEN) {\r\n        gameSocket.onopen();\r\n    }\r\n}\r\n\r\nconnect(); */","map":{"version":3,"names":["React","useState","useWebSocket","ReadyState","GameContainer","GamePlayer","GameWrap","Board","Chess","knightPosition","setPosition","onOpen","console","log","onClose","readyState","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","changePosition","x","y"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/pages/Chess.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport { GameContainer, GamePlayer, GameWrap } from \"./GameElements\";\r\nimport Board from \"../components/Board\";\r\n\r\nconst Chess = () => {\r\n    const [knightPosition, setPosition] = useState([0, 0]);\r\n\r\n    const { readyState } = useWebSocket(\"ws://127.0.0.1:8000/\", {\r\n        onOpen: () => {\r\n            console.log(\"Connected!\");\r\n        },\r\n        onClose: () => {\r\n            console.log(\"Disconnected!\");\r\n        },\r\n    });\r\n\r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: \"Connecting\",\r\n        [ReadyState.OPEN]: \"Open\",\r\n        [ReadyState.CLOSING]: \"Closing\",\r\n        [ReadyState.CLOSED]: \"Closed\",\r\n        [ReadyState.UNINSTANTIATED]: \"Uninstantiated\",\r\n    }[readyState];\r\n\r\n    /* const [whitePieces, setWhitePosition] = useState({\r\n    castle1_w:[0,0],\r\n    knight1_w:[0,1],\r\n    bishop1_w:[0,2],\r\n    queen_w:[0,3],\r\n    king_w:[0,4],\r\n    castle2_w:[0,7],\r\n    knight2_w:[0,6],\r\n    bishop2_w:[0,5],\r\n  })\r\n  const [blackPieces, setBlackPosition] = useState({\r\n    castle1_b:[0,0],\r\n    knight1_b:[0,1],\r\n    bishop1_b:[0,2],\r\n    queen_b:[0,3],\r\n    king_b:[0,4],\r\n    castle2_b:[0,7],\r\n    knight2_b:[0,6],\r\n    bishop2_b:[0,5],\r\n  }) */\r\n    const changePosition = (x, y) => {\r\n        setPosition([x, y]);\r\n        /* setPosition(previousState => {\r\n      return { ...previousState, piece: [x, y] }\r\n    }); */\r\n    };\r\n\r\n    return (\r\n        <GameContainer>\r\n            <GamePlayer>\r\n                <div>The WebSocket is currently {connectionStatus}</div>\r\n                <Board\r\n                    knightPosition={knightPosition}\r\n                    posHandler={changePosition}\r\n                />\r\n                {/* <Board piecePositions={piecePositions} posHandler={changePosition}/> */}\r\n            </GamePlayer>\r\n        </GameContainer>\r\n    );\r\n};\r\n\r\nexport default Chess;\r\n\r\n/* var roomCode = document.getElementById(\"game_board\").getAttribute(\"room_code\");\r\nvar char_choice = document\r\n    .getElementById(\"game_board\")\r\n    .getAttribute(\"char_choice\");\r\n\r\nvar connectionString =\r\n    \"ws://\" + window.location.host + \"/ws/play/\" + roomCode + \"/\";\r\nvar gameSocket = new WebSocket(connectionString);\r\n\r\nlet myturn = true;\r\n\r\nfunction make_move(index, player) {\r\n    index = parseInt(index);\r\n    let data = {\r\n        event: \"MOVE\",\r\n        message: {\r\n            index: index,\r\n            player: player,\r\n        },\r\n    };\r\n\r\n    if (gameBoard[index] == -1) {\r\n        moveCount++;\r\n        if (player == \"X\") gameBoard[index] = 1;\r\n        else if (player == \"O\") gameBoard[index] = 0;\r\n        else {\r\n            alert(\"Invalid character choice\");\r\n            return false;\r\n        }\r\n        gameSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    elementArray[index].innerHTML = player;\r\n    const win = checkWinner();\r\n    if (myturn) {\r\n        if (win) {\r\n            data = {\r\n                event: \"END\",\r\n                message: `${player} is a winner. Play again?`,\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        } else if (!win && moveCount == 9) {\r\n            data = {\r\n                event: \"END\",\r\n                message: \"It's a draw. Play again?\",\r\n            };\r\n            gameSocket.send(JSON.stringify(data));\r\n        }\r\n    }\r\n}\r\n\r\nfunction connect() {\r\n    gameSocket.onopen = function open() {\r\n        console.log(\"WebSockets connection created.\");\r\n        gameSocket.send(\r\n            JSON.stringify({\r\n                event: \"START\",\r\n                message: \"\",\r\n            })\r\n        );\r\n    };\r\n\r\n    gameSocket.onclose = function (e) {\r\n        console.log(\r\n            \"Socket is closed. Reconnect will be attempted in 1 second.\",\r\n            e.reason\r\n        );\r\n        setTimeout(function () {\r\n            connect();\r\n        }, 1000);\r\n    };\r\n    // Sending the info about the room\r\n    gameSocket.onmessage = function (e) {\r\n        let data = JSON.parse(e.data);\r\n        data = data[\"payload\"];\r\n        let message = data[\"message\"];\r\n        let event = data[\"event\"];\r\n        switch (event) {\r\n            case \"START\":\r\n                //reset();\r\n                break;\r\n            case \"END\":\r\n                alert(message);\r\n                //reset();\r\n                break;\r\n            case \"MOVE\":\r\n                if (message[\"player\"] != char_choice) {\r\n                    make_move(message[\"index\"], message[\"player\"]);\r\n                    myturn = true;\r\n                    document.getElementById(\"alert_move\").style.display =\r\n                        \"inline\";\r\n                }\r\n                break;\r\n            default:\r\n                console.log(\"No event\");\r\n        }\r\n    };\r\n\r\n    if (gameSocket.readyState == WebSocket.OPEN) {\r\n        gameSocket.onopen();\r\n    }\r\n}\r\n\r\nconnect(); */\r\n"],"mappings":"8TAAA,MAAOA,MAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,aAAP,EAAuBC,UAAvB,KAAyC,qBAAzC,CACA,OAASC,aAAT,CAAwBC,UAAxB,CAAoCC,QAApC,KAAoD,gBAApD,CACA,MAAOC,MAAP,KAAkB,qBAAlB,C,wFAEA,GAAMC,MAAK,CAAG,QAARA,MAAQ,EAAM,2BAChB,cAAsCP,QAAQ,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAD,CAA9C,wCAAOQ,cAAP,eAAuBC,WAAvB,eAEA,kBAAuBR,YAAY,CAAC,sBAAD,CAAyB,CACxDS,MAAM,CAAE,iBAAM,CACVC,OAAO,CAACC,GAAR,CAAY,YAAZ,EACH,CAHuD,CAIxDC,OAAO,CAAE,kBAAM,CACXF,OAAO,CAACC,GAAR,CAAY,eAAZ,EACH,CANuD,CAAzB,CAAnC,CAAQE,UAAR,eAAQA,UAAR,CASA,GAAMC,iBAAgB,CAAG,gEACpBb,UAAU,CAACc,UADS,CACI,YADJ,wCAEpBd,UAAU,CAACe,IAFS,CAEF,MAFE,wCAGpBf,UAAU,CAACgB,OAHS,CAGC,SAHD,wCAIpBhB,UAAU,CAACiB,MAJS,CAIA,QAJA,wCAKpBjB,UAAU,CAACkB,cALS,CAKQ,gBALR,yBAMvBN,UANuB,CAAzB,CAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACI,GAAMO,eAAc,CAAG,QAAjBA,eAAiB,CAACC,CAAD,CAAIC,CAAJ,CAAU,CAC7Bd,WAAW,CAAC,CAACa,CAAD,CAAIC,CAAJ,CAAD,CAAX,CACA;AACR;AACA,UACK,CALD,CAOA,mBACI,KAAC,aAAD,wBACI,MAAC,UAAD,yBACI,qDAAiCR,gBAAjC,GADJ,cAEI,KAAC,KAAD,EACI,cAAc,CAAEP,cADpB,CAEI,UAAU,CAAEa,cAFhB,EAFJ,GADJ,EADJ,CAYH,CA3DD,CA6DA,cAAed,MAAf},"metadata":{},"sourceType":"module"}