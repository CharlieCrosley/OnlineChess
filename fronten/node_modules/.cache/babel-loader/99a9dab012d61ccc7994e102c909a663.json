{"ast":null,"code":"import _defineProperty from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _slicedToArray from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import useWebSocket,{ReadyState}from\"react-use-websocket\";import{useLocation}from\"react-router-dom\";import{GameContainer,GamePlayer,Player,TakenPieces}from\"./GameElements\";import Board from\"../components/Board\";import{checkIfOpponentInCheck}from\"../components/Game\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Chess=function Chess(){var _ReadyState$CONNECTIN;var location=useLocation();var _useState=useState(location.state.room),_useState2=_slicedToArray(_useState,1),room=_useState2[0];var _useState3=useState(location.state.name),_useState4=_slicedToArray(_useState3,1),name=_useState4[0];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),opponentName=_useState6[0],setOpponentName=_useState6[1];var _useState7=useState(location.state.colour),_useState8=_slicedToArray(_useState7,1),playerColour=_useState8[0];var _useState9=useState({white:[],black:[require(\"../assets/images/pieces/pawn_b.png\"),require(\"../assets/images/pieces/queen_b.png\"),require(\"../assets/images/pieces/bishop_b.png\"),require(\"../assets/images/pieces/king_b.png\")]}),_useState10=_slicedToArray(_useState9,2),takenPieces=_useState10[0],setTakenPieces=_useState10[1];var boardRotation=getBoardRotation(playerColour);var isWhite=playerColour===\"white\";// Sets initial piece positions ensuring that players colour is always at bottom\nvar _useState11=useState(initBoardState(isWhite,boardRotation)),_useState12=_slicedToArray(_useState11,2),boardState=_useState12[0],setBoardState=_useState12[1];var _useState13=useState(null),_useState14=_slicedToArray(_useState13,2),prevBoardState=_useState14[0],setPrevBoardState=_useState14[1];var _useState15=useState({check:new Audio(require(\"../assets/sounds/check.mp3\"))}),_useState16=_slicedToArray(_useState15,1),audio=_useState16[0];var _useWebSocket=useWebSocket(\"ws://127.0.0.1:8000/ws/\"+room+\"/\",{onOpen:function onOpen(){console.log(\"Connected!\");sendMessage(JSON.stringify({type:\"send_message\",message:{opponentName:name},event:\"START\"}));},onClose:function onClose(){console.log(\"Disconnected!\");},onMessage:function onMessage(e){var dataFromServer=JSON.parse(e.data);switch(dataFromServer.payload.event){case\"START\":if(opponentName===null&&dataFromServer.payload.message.opponentName!==name){//\nconsole.log(dataFromServer.payload.message.opponentName);setOpponentName(dataFromServer.payload.message.opponentName);sendMessage(JSON.stringify({type:\"send_message\",message:{opponentName:name},event:\"START\"}));}case\"MOVE\":if(dataFromServer.payload.message.opponent.colour!==playerColour){setBoardState(flipBoard(dataFromServer.payload.message.boardState));setTakenPieces(dataFromServer.payload.message.takenPieces);setOpponentName(dataFromServer.payload.message.opponent.name);}}}}),sendMessage=_useWebSocket.sendMessage,readyState=_useWebSocket.readyState;var connectionStatus=(_ReadyState$CONNECTIN={},_defineProperty(_ReadyState$CONNECTIN,ReadyState.CONNECTING,\"Connecting\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.OPEN,\"Open\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.CLOSING,\"Closing\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.CLOSED,\"Closed\"),_defineProperty(_ReadyState$CONNECTIN,ReadyState.UNINSTANTIATED,\"Uninstantiated\"),_ReadyState$CONNECTIN)[readyState];useEffect(function(){// Send the current board state to the websocket group\n// Only send message if the board state has changed to avoid infintite loop of sending\nif(JSON.stringify(prevBoardState)!==JSON.stringify(boardState)){setPrevBoardState(boardState);sendMessage(JSON.stringify({type:\"send_message\",message:{boardState:boardState,takenPieces:takenPieces,opponent:{name:name,colour:playerColour}},event:\"MOVE\"}));var opponentKing,playerKing;if(boardState[\"king_w\"].isOwner){opponentKing=boardState[\"king_b\"];playerKing=boardState[\"king_w\"];}else{opponentKing=boardState[\"king_w\"];playerKing=boardState[\"king_b\"];}/* const opponentKing = boardState[\"king_w\"].isOwner\r\n                ? boardState[\"king_b\"]\r\n                : boardState[\"king_w\"]; */console.log(playerKing.inCheck);if(checkIfOpponentInCheck(boardState,opponentKing)){audio.check.play();opponentKing.inCheck=true;}else{opponentKing.inCheck=false;}// This state will be updated when on the opponents side and sent to the player\nif(playerKing.inCheck){audio.check.play();}}},[boardState]);var opponentColour=playerColour===\"white\"?\"black\":\"white\";return/*#__PURE__*/_jsx(GameContainer,{children:/*#__PURE__*/_jsxs(GamePlayer,{children:[/*#__PURE__*/_jsxs(Player,{children:[/*#__PURE__*/_jsx(\"div\",{children:opponentName}),/*#__PURE__*/_jsx(TakenPieces,{children:takenPieces[playerColour].map(function(piecePath,i){return/*#__PURE__*/_jsx(\"img\",{src:piecePath},i);})})]}),/*#__PURE__*/_jsx(Board,{boardState:boardState,setBoardState:setBoardState,setTakenPieces:setTakenPieces}),/*#__PURE__*/_jsxs(Player,{children:[/*#__PURE__*/_jsx(\"div\",{children:name}),/*#__PURE__*/_jsx(TakenPieces,{children:takenPieces[opponentColour].map(function(piecePath,i){return/*#__PURE__*/_jsx(\"img\",{src:piecePath},i);})})]})]})});};export default Chess;var getBoardRotation=function getBoardRotation(colour){if(colour===\"white\")return{white:[7,6],black:[0,1]};else if(colour===\"black\")return{white:[0,1],black:[7,6]};throw\"Colour must be black or white\";};var flipBoard=function flipBoard(boardState){for(var _i=0,_Object$entries=Object.entries(boardState);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),_=_Object$entries$_i[0],state=_Object$entries$_i[1];state.row=7-state.row;state.col=7-state.col;state.isOwner=!state.isOwner;}return boardState;};export var initBoardState=function initBoardState(isWhite,boardRotation){var pieceNames=[\"castle_w_1\",\"knight_w_1\",\"bishop_w_1\",\"queen_w\",\"king_w\",\"bishop_w_2\",\"knight_w_2\",\"castle_w_2\",\"pawn_w_1\",\"pawn_w_2\",\"pawn_w_3\",\"pawn_w_4\",\"pawn_w_5\",\"pawn_w_6\",\"pawn_w_7\",\"pawn_w_8\",\"castle_b_1\",\"knight_b_1\",\"bishop_b_1\",\"queen_b\",\"king_b\",\"bishop_b_2\",\"knight_b_2\",\"castle_b_2\",\"pawn_b_1\",\"pawn_b_2\",\"pawn_b_3\",\"pawn_b_4\",\"pawn_b_5\",\"pawn_b_6\",\"pawn_b_7\",\"pawn_b_8\"];var boardState={};for(var i=0;i<32;i++){// First 16 elements in  pieces array are white rest are black\n// Each 8 elements in array is a row\nif(i<16){var row=void 0;if(i<8)row=boardRotation.white[0];else row=boardRotation.white[1];var properties={row:row,col:i%8,hasMoved:false,isOwner:isWhite,isAlive:true};if(pieceNames[i]===\"king_w\"||pieceNames[i]===\"king_b\"){properties[\"inCheck\"]=false;}boardState[pieceNames[i]]=properties;}else{var _row=void 0;if(i<24)_row=boardRotation.black[0];else _row=boardRotation.black[1];var _properties={row:_row,col:i%8,hasMoved:false,isOwner:!isWhite,isAlive:true};if(pieceNames[i]===\"king_w\"||pieceNames[i]===\"king_b\"){_properties[\"inCheck\"]=false;}boardState[pieceNames[i]]=_properties;}}return boardState;};","map":{"version":3,"names":["React","useState","useEffect","useWebSocket","ReadyState","useLocation","GameContainer","GamePlayer","Player","TakenPieces","Board","checkIfOpponentInCheck","Chess","location","state","room","name","opponentName","setOpponentName","colour","playerColour","white","black","require","takenPieces","setTakenPieces","boardRotation","getBoardRotation","isWhite","initBoardState","boardState","setBoardState","prevBoardState","setPrevBoardState","check","Audio","audio","onOpen","console","log","sendMessage","JSON","stringify","type","message","event","onClose","onMessage","e","dataFromServer","parse","data","payload","opponent","flipBoard","readyState","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","opponentKing","playerKing","isOwner","inCheck","play","opponentColour","map","piecePath","i","Object","entries","_","row","col","pieceNames","properties","hasMoved","isAlive"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/pages/Chess.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { GameContainer, GamePlayer, Player, TakenPieces } from \"./GameElements\";\r\nimport Board from \"../components/Board\";\r\nimport { checkIfOpponentInCheck } from \"../components/Game\";\r\n\r\nconst Chess = () => {\r\n    const location = useLocation();\r\n\r\n    const [room] = useState(location.state.room);\r\n    const [name] = useState(location.state.name);\r\n    const [opponentName, setOpponentName] = useState(null);\r\n    const [playerColour] = useState(location.state.colour);\r\n    const [takenPieces, setTakenPieces] = useState({\r\n        white: [],\r\n        black: [\r\n            require(\"../assets/images/pieces/pawn_b.png\"),\r\n            require(\"../assets/images/pieces/queen_b.png\"),\r\n            require(\"../assets/images/pieces/bishop_b.png\"),\r\n            require(\"../assets/images/pieces/king_b.png\"),\r\n        ],\r\n    });\r\n\r\n    const boardRotation = getBoardRotation(playerColour);\r\n    const isWhite = playerColour === \"white\";\r\n    // Sets initial piece positions ensuring that players colour is always at bottom\r\n    const [boardState, setBoardState] = useState(\r\n        initBoardState(isWhite, boardRotation)\r\n    );\r\n    const [prevBoardState, setPrevBoardState] = useState(null);\r\n\r\n    const [audio] = useState({\r\n        check: new Audio(require(\"../assets/sounds/check.mp3\")),\r\n    });\r\n\r\n    const { sendMessage, readyState } = useWebSocket(\r\n        \"ws://127.0.0.1:8000/ws/\" + room + \"/\",\r\n        {\r\n            onOpen: () => {\r\n                console.log(\"Connected!\");\r\n                sendMessage(\r\n                    JSON.stringify({\r\n                        type: \"send_message\",\r\n                        message: { opponentName: name },\r\n                        event: \"START\",\r\n                    })\r\n                );\r\n            },\r\n            onClose: () => {\r\n                console.log(\"Disconnected!\");\r\n            },\r\n            onMessage: (e) => {\r\n                const dataFromServer = JSON.parse(e.data);\r\n                switch (dataFromServer.payload.event) {\r\n                    case \"START\":\r\n                        if (\r\n                            opponentName === null &&\r\n                            dataFromServer.payload.message.opponentName !== name\r\n                        ) {\r\n                            //\r\n                            console.log(\r\n                                dataFromServer.payload.message.opponentName\r\n                            );\r\n                            setOpponentName(\r\n                                dataFromServer.payload.message.opponentName\r\n                            );\r\n                            sendMessage(\r\n                                JSON.stringify({\r\n                                    type: \"send_message\",\r\n                                    message: { opponentName: name },\r\n                                    event: \"START\",\r\n                                })\r\n                            );\r\n                        }\r\n\r\n                    case \"MOVE\":\r\n                        if (\r\n                            dataFromServer.payload.message.opponent.colour !==\r\n                            playerColour\r\n                        ) {\r\n                            setBoardState(\r\n                                flipBoard(\r\n                                    dataFromServer.payload.message.boardState\r\n                                )\r\n                            );\r\n\r\n                            setTakenPieces(\r\n                                dataFromServer.payload.message.takenPieces\r\n                            );\r\n                            setOpponentName(\r\n                                dataFromServer.payload.message.opponent.name\r\n                            );\r\n                        }\r\n                }\r\n            },\r\n        }\r\n    );\r\n\r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: \"Connecting\",\r\n        [ReadyState.OPEN]: \"Open\",\r\n        [ReadyState.CLOSING]: \"Closing\",\r\n        [ReadyState.CLOSED]: \"Closed\",\r\n        [ReadyState.UNINSTANTIATED]: \"Uninstantiated\",\r\n    }[readyState];\r\n\r\n    useEffect(() => {\r\n        // Send the current board state to the websocket group\r\n        // Only send message if the board state has changed to avoid infintite loop of sending\r\n        if (JSON.stringify(prevBoardState) !== JSON.stringify(boardState)) {\r\n            setPrevBoardState(boardState);\r\n            sendMessage(\r\n                JSON.stringify({\r\n                    type: \"send_message\",\r\n                    message: {\r\n                        boardState,\r\n                        takenPieces,\r\n                        opponent: { name: name, colour: playerColour },\r\n                    },\r\n                    event: \"MOVE\",\r\n                })\r\n            );\r\n\r\n            let opponentKing, playerKing;\r\n            if (boardState[\"king_w\"].isOwner) {\r\n                opponentKing = boardState[\"king_b\"];\r\n                playerKing = boardState[\"king_w\"];\r\n            } else {\r\n                opponentKing = boardState[\"king_w\"];\r\n                playerKing = boardState[\"king_b\"];\r\n            }\r\n            /* const opponentKing = boardState[\"king_w\"].isOwner\r\n                ? boardState[\"king_b\"]\r\n                : boardState[\"king_w\"]; */\r\n            console.log(playerKing.inCheck);\r\n            if (checkIfOpponentInCheck(boardState, opponentKing)) {\r\n                audio.check.play();\r\n                opponentKing.inCheck = true;\r\n            } else {\r\n                opponentKing.inCheck = false;\r\n            }\r\n            // This state will be updated when on the opponents side and sent to the player\r\n            if (playerKing.inCheck) {\r\n                audio.check.play();\r\n            }\r\n        }\r\n    }, [boardState]);\r\n\r\n    const opponentColour = playerColour === \"white\" ? \"black\" : \"white\";\r\n\r\n    return (\r\n        <GameContainer>\r\n            <GamePlayer>\r\n                {/* <div style={{ color: \"white\" }}>\r\n                    The WebSocket is currently {connectionStatus}\r\n                </div> */}\r\n                <Player>\r\n                    <div>{opponentName}</div>\r\n                    <TakenPieces>\r\n                        {takenPieces[playerColour].map((piecePath, i) => {\r\n                            return <img key={i} src={piecePath} />;\r\n                        })}\r\n                    </TakenPieces>\r\n                </Player>\r\n                <Board\r\n                    boardState={boardState}\r\n                    setBoardState={setBoardState}\r\n                    setTakenPieces={setTakenPieces}\r\n                />\r\n                <Player>\r\n                    <div>{name}</div>\r\n                    <TakenPieces>\r\n                        {takenPieces[opponentColour].map((piecePath, i) => {\r\n                            return <img key={i} src={piecePath} />;\r\n                        })}\r\n                    </TakenPieces>\r\n                </Player>\r\n            </GamePlayer>\r\n        </GameContainer>\r\n    );\r\n};\r\n\r\nexport default Chess;\r\n\r\nconst getBoardRotation = (colour) => {\r\n    if (colour === \"white\") return { white: [7, 6], black: [0, 1] };\r\n    else if (colour === \"black\") return { white: [0, 1], black: [7, 6] };\r\n    throw \"Colour must be black or white\";\r\n};\r\n\r\nconst flipBoard = (boardState) => {\r\n    for (const [_, state] of Object.entries(boardState)) {\r\n        state.row = 7 - state.row;\r\n        state.col = 7 - state.col;\r\n        state.isOwner = !state.isOwner;\r\n    }\r\n    return boardState;\r\n};\r\n\r\nexport const initBoardState = (isWhite, boardRotation) => {\r\n    const pieceNames = [\r\n        \"castle_w_1\",\r\n        \"knight_w_1\",\r\n        \"bishop_w_1\",\r\n        \"queen_w\",\r\n        \"king_w\",\r\n        \"bishop_w_2\",\r\n        \"knight_w_2\",\r\n        \"castle_w_2\",\r\n        \"pawn_w_1\",\r\n        \"pawn_w_2\",\r\n        \"pawn_w_3\",\r\n        \"pawn_w_4\",\r\n        \"pawn_w_5\",\r\n        \"pawn_w_6\",\r\n        \"pawn_w_7\",\r\n        \"pawn_w_8\",\r\n        \"castle_b_1\",\r\n        \"knight_b_1\",\r\n        \"bishop_b_1\",\r\n        \"queen_b\",\r\n        \"king_b\",\r\n        \"bishop_b_2\",\r\n        \"knight_b_2\",\r\n        \"castle_b_2\",\r\n        \"pawn_b_1\",\r\n        \"pawn_b_2\",\r\n        \"pawn_b_3\",\r\n        \"pawn_b_4\",\r\n        \"pawn_b_5\",\r\n        \"pawn_b_6\",\r\n        \"pawn_b_7\",\r\n        \"pawn_b_8\",\r\n    ];\r\n    const boardState = {};\r\n    for (let i = 0; i < 32; i++) {\r\n        // First 16 elements in  pieces array are white rest are black\r\n        // Each 8 elements in array is a row\r\n        if (i < 16) {\r\n            let row;\r\n            if (i < 8) row = boardRotation.white[0];\r\n            else row = boardRotation.white[1];\r\n            const properties = {\r\n                row: row,\r\n                col: i % 8,\r\n                hasMoved: false,\r\n                isOwner: isWhite,\r\n                isAlive: true,\r\n            };\r\n            if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\r\n                properties[\"inCheck\"] = false;\r\n            }\r\n            boardState[pieceNames[i]] = properties;\r\n        } else {\r\n            let row;\r\n            if (i < 24) row = boardRotation.black[0];\r\n            else row = boardRotation.black[1];\r\n            const properties = {\r\n                row: row,\r\n                col: i % 8,\r\n                hasMoved: false,\r\n                isOwner: !isWhite,\r\n                isAlive: true,\r\n            };\r\n            if (pieceNames[i] === \"king_w\" || pieceNames[i] === \"king_b\") {\r\n                properties[\"inCheck\"] = false;\r\n            }\r\n            boardState[pieceNames[i]] = properties;\r\n        }\r\n    }\r\n    return boardState;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}