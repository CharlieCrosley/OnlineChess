{"ast":null,"code":"import _slicedToArray from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _defineProperty from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _toConsumableArray from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * Callback for setting the board state\r\n *\r\n * @callback setBoardState\r\n * @param {Object} board An dictionary representing the current board state\r\n */ /**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {setBoardState} setBoardState sets a new state of the board\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */export function MovePiece(toX,toY,setBoardState,setTakenPieces,item,boardState){var square=GetPieceAtSquare(toX,toY,boardState);// check if piece on square\n// Ensure piece on square is not owned and is alive before taking\nif(square!=null&&!square.isOwner&&square.state.isAlive){// Remove piece from board\ndelete boardState[square.piece];// Track what pieces are taken so that they can be rendered under player name\nvar pieceNameSplit=square.piece.split(\"_\");var piecePathName=pieceNameSplit[0]+\"_\"+pieceNameSplit[1];var pieceImgPath=require(\"../assets/images/pieces/\"+piecePathName+\".png\");var colour;if(pieceNameSplit[1]===\"w\")colour=\"white\";else colour=\"black\";// Sort the array of pieces so that matching pieces appear next to eachother\nsetTakenPieces(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},colour,[].concat(_toConsumableArray(prevState[colour]),[pieceImgPath]).sort()));});}var king=boardState[\"king_w\"].isOwner?\"king_w\":\"king_b\";// Update state of the moved piece\nif(item.pieceName.split(\"_\")[0]===\"king\"){setBoardState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},item.pieceName,{row:toY,col:toX,hasMoved:true,isOwner:true,isAlive:true,inCheck:false}));});}else{// Moving a piece will always take king out of check\nsetBoardState(function(prevState){var _objectSpread4;return _objectSpread(_objectSpread({},prevState),{},(_objectSpread4={},_defineProperty(_objectSpread4,item.pieceName,{row:toY,col:toX,hasMoved:true,isOwner:true,isAlive:true}),_defineProperty(_objectSpread4,king,_objectSpread(_objectSpread({},boardState[king]),{},{inCheck:false})),_objectSpread4));});}}/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */export function CanMovePiece(toX,toY,draggedPiece,boardState){var square=GetPieceAtSquare(toX,toY,boardState);// if a friendly piece is in a square, don't allow this piece to be moved there\nif(square&&square.state.isOwner&&square.state.isAlive)return false;// calculate the difference between the new square and the piece being dragged\nvar dx=Math.abs(toX-draggedPiece.pieceState.col);var dy=Math.abs(toY-draggedPiece.pieceState.row);var pieceName=draggedPiece.pieceName.split(\"_\")[0];// Check the row and column of the piece to see if the movement should be blocked\n// by another piece\nvar straightCollision=CheckStraightCollisions(toX,toY,boardState,draggedPiece);// Check the diagonal of the piece to see if the movement should be blocked\n// by another piece\nvar diagCollision=CheckDiagCollisions(toX,toY,boardState,draggedPiece);// Get the players king\nvar king=boardState[\"king_w\"].isOwner?boardState[\"king_w\"]:boardState[\"king_b\"];// Checks if the move will block the piece attacking the king\nvar pieceCheckingKing=CheckIfPieceIsProtectingKing(toX,toY,boardState,draggedPiece.pieceName);// Gets the piece that is putting the king in check\nvar piecePuttingKingInCheck=CheckIfMoveUnderAttack(king.col,king.row,boardState);var pieceAttackingKingNotAtSquare=square!==null&&square.piece!==piecePuttingKingInCheck;// Move must protect king if king is in check\nvar cantMoveToProtectKing=king.inCheck&&(pieceCheckingKing===null&&pieceAttackingKingNotAtSquare||pieceCheckingKing===null&&square===null);var isProtectingKing;if(pieceName!==\"king\"){// Check if the piece is defending the king\n// Get the piece that is attacking the king if true\nvar pieceAttackingKing=CheckIfPieceIsProtectingKing(draggedPiece.pieceState.col,draggedPiece.pieceState.row,boardState,draggedPiece.pieceName);// Check if the piece is currently under attack\nvar isPieceUnderAttack=CheckIfMoveUnderAttack(draggedPiece.pieceState.col,draggedPiece.pieceState.row,boardState)!==null;isProtectingKing=pieceAttackingKing!==null&&isPieceUnderAttack;}var cantMoveWhilstProtecting=function cantMoveWhilstProtecting(){// Dont allow the pawn to move if its protecting king unless it can take the piece\n// and ensure that the piece is alive before taking\nif(isProtectingKing&&(square&&pieceCheckingKing!==square.piece||square===null||square&&!square.state.isAlive))return true;return false;};switch(pieceName){case\"king\":var moveUnderAttack=CheckIfMoveUnderAttack(toX,toY,boardState,draggedPiece.pieceName);var moveNotInCheck=moveUnderAttack===null||square&&square.piece===moveUnderAttack;return(dx===1||dx===0)&&(dy===1||dy===0)&&moveNotInCheck;case\"castle\":if(cantMoveWhilstProtecting())return;if(cantMoveToProtectKing)return;return(dx===0&&dy>0||dx>0&&dy===0)&&!straightCollision.collision;case\"knight\":if(cantMoveWhilstProtecting())return;if(cantMoveToProtectKing)return;return dx===2&&dy===1||dx===1&&dy===2;case\"bishop\":if(cantMoveWhilstProtecting())return;if(cantMoveToProtectKing)return;return!(dx===0&&dy>0)&&!(dx>0&&dy===0)&&(dx===dy||dx===dy)&&!diagCollision.collision;case\"queen\":if(cantMoveWhilstProtecting())return;if(cantMoveToProtectKing)return;return(dx===0&&dy>0||dx>0&&dy===0)&&!straightCollision.collision||(dx===dy||dx===dy)&&!diagCollision.collision;case\"pawn\":if(cantMoveWhilstProtecting())return;if(cantMoveToProtectKing)return;// Recalculate dx/dy with direction\ndx=toX-draggedPiece.pieceState.col;dy=toY-draggedPiece.pieceState.row;// Allow pawn to move 2 squares on first move\nif(!draggedPiece.pieceState.hasMoved){// Negative direction moves up the board (player always at bottom)\nif(dx===0&&(dy===-1||dy===-2)&&!straightCollision.collision){return square===null;}}// Allow pawn to take opponents pieces diagonal by 1 square\nif((dx===1||dx===-1)&&dy===-1&&square!==null)return true;// Allow pawn to move forward by 1 square\nreturn dx===0&&dy===-1&&square===null;default:return false;}}/**\r\n * Checks if the current square is empty\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @returns piece name and state if square is not empty, null otherwise\r\n */function GetPieceAtSquare(x,y,boardState){for(var _i=0,_Object$entries=Object.entries(boardState);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),piece=_Object$entries$_i[0],state=_Object$entries$_i[1];if(x===state.col&&y===state.row){return{piece:piece,state:state};}}return null;}/**\r\n * Checks if there is a piece in the diagonal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} draggedPiece contains data about the currently dragged piece\r\n * @param {boolean} checkForOpponentPiece if true, the check will be on behalf of the opponent\r\n * @returns piece and false if an opponents piece is inbetween the square and the currently dragged piece, piece and true otherwise\r\n */function CheckDiagCollisions(x,y,boardState,draggedPiece){var checkForOpponentPiece=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;// Get row and col of dragged piece\nvar row=draggedPiece.pieceState.row;var col=draggedPiece.pieceState.col;var dirX=Math.sign(x-col);var dirY=Math.sign(y-row);for(var i=0;i<Math.abs(x-col)+1;i++){for(var _i2=0,_Object$entries2=Object.entries(boardState);_i2<_Object$entries2.length;_i2++){var _Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),piece=_Object$entries2$_i[0],state=_Object$entries2$_i[1];var owner=checkForOpponentPiece?!state.isOwner:state.isOwner;if(col+i*dirX===state.col&&row+i*dirY===state.row&&state.isAlive&&(i===0&&!owner||i!==0)){if(i!==Math.abs(x-col)){// Stops opponents pieces from being taken when hidden behind each other\nreturn{piece:piece,collision:true};}return{piece:piece,collision:owner};}}}return{piece:null,collision:false};}/**\r\n * Checks if there is a piece in the vertical and horizontal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} draggedPiece contains data about the currently dragged piece\r\n * @param {boolean} checkForOpponentPiece if true, the check will be on behalf of the opponent\r\n * @returns true and the piece name if an opponents piece is inbetween the square and the currently dragged piece, false and null otherwise\r\n */function CheckStraightCollisions(x,y,boardState,draggedPiece){var checkForOpponentPiece=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;// Get row and col of dragged piece\nvar row=draggedPiece.pieceState.row;var col=draggedPiece.pieceState.col;// Get change in x and y between dragged piece and square\nvar dx=Math.abs(x-col);var dy=Math.abs(y-row);// Ignore diagonal moves\nif(dx>0&&dy>0)return true;// get direction of move\nvar dirX=Math.sign(x-col);var dirY=Math.sign(y-row);for(var i=1;i<Math.max(dx,dy)+1;i++){for(var _i3=0,_Object$entries3=Object.entries(boardState);_i3<_Object$entries3.length;_i3++){var _Object$entries3$_i=_slicedToArray(_Object$entries3[_i3],2),piece=_Object$entries3$_i[0],state=_Object$entries3$_i[1];if(state.isAlive){// Move is horizontal if dy = 0, otherwise vertical\nif(dy===0){if(col+i*dirX===state.col&&row===state.row){if(i!==Math.abs(x-col)){// Stops opponents pieces from being taken when hidden behind each other\nreturn{piece:piece,collision:true};}return{piece:piece,collision:checkForOpponentPiece?!state.isOwner:state.isOwner};}}else{if(row+i*dirY===state.row&&col===state.col){if(i!==Math.abs(y-row)){// Stops opponents pieces from being taken when hidden behind each other\nreturn{piece:piece,collision:true};}return{piece:piece,collision:checkForOpponentPiece?!state.isOwner:state.isOwner};}}}}}return{piece:null,collision:false};}/**\r\n * Checks if a piece at (x,y) on the board is under attack by an opponents piece\r\n * @param {*} x x coordinate of the square currently being checked\r\n * @param {*} y y coordinate of the square currently being checked\r\n * @param {*} boardState current state of the board\r\n * @returns piece name if the piece is under attack, null otherwise\r\n */function CheckIfMoveUnderAttack(x,y,boardState){var pieceToMove=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;for(var _i4=0,_Object$entries4=Object.entries(boardState);_i4<_Object$entries4.length;_i4++){var _Object$entries4$_i=_slicedToArray(_Object$entries4[_i4],2),piece=_Object$entries4$_i[0],state=_Object$entries4$_i[1];// King cannot be checked by its own pieces\nif(!state.isOwner){var dx=Math.abs(x-state.col);var dy=Math.abs(y-state.row);// Check if the square is under attack from an opponents piece via straight line\nvar straightCollisions=CheckStraightCollisions(state.col,state.row,boardState,{pieceState:{col:x,row:y}});if(straightCollisions.piece&&!straightCollisions.collision){// Dont include collisions with self\nif(straightCollisions.piece===pieceToMove)return null;var pieceName=straightCollisions.piece.split(\"_\")[0];// If the piece can take pieces horizontally or vertically or king is in range,\n// then the move is not valid\nif(pieceName===\"queen\"||pieceName===\"castle\"||pieceName===\"king\"&&(dx===1||dy===1)){//return true;\nreturn straightCollisions.piece;}}// Check if the square is under attack from an opponents piece via diagonal line\nvar diagCollisions=CheckDiagCollisions(state.col,state.row,boardState,{pieceState:{col:x,row:y}});if(diagCollisions.piece&&diagCollisions.piece!==pieceToMove&&!diagCollisions.collision){// Dont include collisions with self\nif(diagCollisions.piece===pieceToMove)return null;var _pieceName=diagCollisions.piece.split(\"_\")[0];// If the piece can move diagonally or the pawn is in range of square,\n// then the move is not valid\nif(_pieceName===\"queen\"||_pieceName===\"bishop\"||_pieceName===\"king\"&&dx===1&&dy===1||_pieceName===\"pawn\"&&dx===1&&y-state.row===1){//return true;\nreturn diagCollisions.piece;}}// Check if square is under attack by a knight\nif(piece.split(\"_\")[0]===\"knight\"&&(dx===2&&dy===1||dx===1&&dy===2)){return piece;}}}return null;}/**\r\n * Check if the piece at (x,y) on the board is blocking an opponent piece from checking the king\r\n * @param {*} x x coordinate of the square currently being checked\r\n * @param {*} y y coordinate of the square currently being checked\r\n * @param {*} boardState current state of the board\r\n * @param {*} draggedPiece piece being dragged\r\n * @returns name of piece attacking king, if no such piece exists, return null\r\n */function CheckIfPieceIsProtectingKing(x,y,boardState,draggedPiece){// Get players king\nvar king=boardState[\"king_w\"].isOwner?boardState[\"king_w\"]:boardState[\"king_b\"];// Direction from (x,y) to king\nvar dirX=Math.sign(x-king.col);var dirY=Math.sign(y-king.row);var dx=Math.abs(king.col-x);var dy=Math.abs(king.row-y);var getOppositeCoords=function getOppositeCoords(king){var oppositeX=king.col;var oppositeY=king.row;// Get the x,y in the opposite direction to the king to the edge of the board\nwhile(oppositeX<=7&&oppositeX>=0&&oppositeY<=7&&oppositeY>=0){oppositeX+=dirX;oppositeY+=dirY;}return[oppositeX,oppositeY];};// Check pieces that are directly above or beside the king\nif(dx===0||(dirX===1||dirX===-1)&&dy===0){// Check if piece is inbetween king and opponent piece that can attack king\nvar straightCollisions=CheckStraightCollisions(x,y,boardState,{pieceState:{col:king.col,row:king.row}});// A piece is inbetween the dragged piece and the king,\n// therefore, it is not protecting the king and can be moved\nif(straightCollisions.collision&&straightCollisions.piece!==draggedPiece)return null;var _getOppositeCoords=getOppositeCoords(king),_getOppositeCoords2=_slicedToArray(_getOppositeCoords,2),oppositeX=_getOppositeCoords2[0],oppositeY=_getOppositeCoords2[1];var oppositeStraightCollisions=CheckStraightCollisions(oppositeX,oppositeY,boardState,{pieceState:{col:x,row:y}});if(oppositeStraightCollisions.piece&&!boardState[oppositeStraightCollisions.piece].isOwner){var pieceName=oppositeStraightCollisions.piece.split(\"_\")[0];// If the piece in opposite direction to king is able to attack the king\n// once the dragged piece is moved, then don't allow the piece to be moved\nif(pieceName===\"castle\"||pieceName===\"queen\"){// the piece is protecting the king\nreturn oppositeStraightCollisions.piece;}}}else if(dx===dy){// Check the pieces directly diagonal to the king\n// Check if piece is inbetween king and opponent piece that can attack king\nvar diagCollisions=CheckDiagCollisions(x,y,boardState,{pieceState:{col:king.col,row:king.row}});// A piece is inbetween the dragged piece and the king,\n// therefore, it is not protecting the king and can be moved\nif(diagCollisions.collision&&diagCollisions.piece!==draggedPiece)return null;var _getOppositeCoords3=getOppositeCoords(king),_getOppositeCoords4=_slicedToArray(_getOppositeCoords3,2),_oppositeX=_getOppositeCoords4[0],_oppositeY=_getOppositeCoords4[1];var oppositeDiagCollisions=CheckDiagCollisions(_oppositeX,_oppositeY,boardState,{pieceState:{col:x,row:y}});if(oppositeDiagCollisions.piece&&!boardState[oppositeDiagCollisions.piece].isOwner){var _pieceName2=oppositeDiagCollisions.piece.split(\"_\")[0];// If the piece in opposite direction to king is able to attack the king\n// once the dragged piece is moved, then don't allow the piece to be moved\nif(_pieceName2===\"bishop\"||_pieceName2===\"queen\"||_pieceName2===\"pawn\"){// the piece is protecting the king\nreturn oppositeDiagCollisions.piece;}}}return null;}/**\r\n * Checks if a piece at (x,y) on the board is under attack by an opponents piece\r\n * @param {*} boardState current state of the board\r\n * @returns true if the piece is under attack, false otherwise\r\n */export function CheckIfOpponentInCheck(boardState,opponentKing){for(var _i5=0,_Object$entries5=Object.entries(boardState);_i5<_Object$entries5.length;_i5++){var _Object$entries5$_i=_slicedToArray(_Object$entries5[_i5],2),piece=_Object$entries5$_i[0],state=_Object$entries5$_i[1];// King cannot be checked by its own pieces\nif(state.isOwner){var dx=Math.abs(opponentKing.col-state.col);var dy=Math.abs(opponentKing.row-state.row);// Check if the square is under attack from an opponents piece via straight line\nvar straightCollisions=CheckStraightCollisions(state.col,state.row,boardState,{pieceState:{col:opponentKing.col,row:opponentKing.row}},true);if(straightCollisions.piece&&!straightCollisions.collision){var pieceName=straightCollisions.piece.split(\"_\")[0];// If the piece can take pieces horizontally or vertically or king is in range,\n// then the move is not valid\nif(pieceName===\"queen\"||pieceName===\"castle\"||pieceName===\"king\"&&(dx===1||dy===1)){return true;}}// Check if the square is under attack from an opponents piece via diagonal line\nvar diagCollisions=CheckDiagCollisions(state.col,state.row,boardState,{pieceState:{col:opponentKing.col,row:opponentKing.row}},true);if(diagCollisions.piece&&!diagCollisions.collision){var _pieceName3=diagCollisions.piece.split(\"_\")[0];// If the piece can move diagonally or the pawn is in range of square,\n// then the move is not valid\n// negative direction is up the board\nif(_pieceName3===\"queen\"||_pieceName3===\"bishop\"||_pieceName3===\"king\"&&dx===1&&dy===1||_pieceName3===\"pawn\"&&dx===1&&opponentKing.row-state.row===-1){return true;}}// Check if square is under attack by a knight\nif(piece.split(\"_\")[0]===\"knight\"&&(dx===2&&dy===1||dx===1&&dy===2)){return true;}}}return false;}","map":{"version":3,"names":["MovePiece","toX","toY","setBoardState","setTakenPieces","item","boardState","square","GetPieceAtSquare","isOwner","state","isAlive","piece","pieceNameSplit","split","piecePathName","pieceImgPath","require","colour","prevState","sort","king","pieceName","row","col","hasMoved","inCheck","CanMovePiece","draggedPiece","dx","Math","abs","pieceState","dy","straightCollision","CheckStraightCollisions","diagCollision","CheckDiagCollisions","pieceCheckingKing","CheckIfPieceIsProtectingKing","piecePuttingKingInCheck","CheckIfMoveUnderAttack","pieceAttackingKingNotAtSquare","cantMoveToProtectKing","isProtectingKing","pieceAttackingKing","isPieceUnderAttack","cantMoveWhilstProtecting","moveUnderAttack","moveNotInCheck","collision","x","y","Object","entries","checkForOpponentPiece","dirX","sign","dirY","i","owner","max","pieceToMove","straightCollisions","diagCollisions","getOppositeCoords","oppositeX","oppositeY","oppositeStraightCollisions","oppositeDiagCollisions","CheckIfOpponentInCheck","opponentKing"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/components/Game.js"],"sourcesContent":["/**\r\n * Callback for setting the board state\r\n *\r\n * @callback setBoardState\r\n * @param {Object} board An dictionary representing the current board state\r\n */\r\n\r\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {setBoardState} setBoardState sets a new state of the board\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\r\nexport function MovePiece(\r\n    toX,\r\n    toY,\r\n    setBoardState,\r\n    setTakenPieces,\r\n    item,\r\n    boardState\r\n) {\r\n    const square = GetPieceAtSquare(toX, toY, boardState);\r\n\r\n    // check if piece on square\r\n    // Ensure piece on square is not owned and is alive before taking\r\n    if (square != null && !square.isOwner && square.state.isAlive) {\r\n        // Remove piece from board\r\n        delete boardState[square.piece];\r\n\r\n        // Track what pieces are taken so that they can be rendered under player name\r\n        const pieceNameSplit = square.piece.split(\"_\");\r\n        const piecePathName = pieceNameSplit[0] + \"_\" + pieceNameSplit[1];\r\n        const pieceImgPath = require(\"../assets/images/pieces/\" +\r\n            piecePathName +\r\n            \".png\");\r\n\r\n        let colour;\r\n        if (pieceNameSplit[1] === \"w\") colour = \"white\";\r\n        else colour = \"black\";\r\n        // Sort the array of pieces so that matching pieces appear next to eachother\r\n        setTakenPieces((prevState) => ({\r\n            ...prevState,\r\n            [colour]: [...prevState[colour], pieceImgPath].sort(),\r\n        }));\r\n    }\r\n\r\n    const king = boardState[\"king_w\"].isOwner ? \"king_w\" : \"king_b\";\r\n\r\n    // Update state of the moved piece\r\n    if (item.pieceName.split(\"_\")[0] === \"king\") {\r\n        setBoardState((prevState) => ({\r\n            ...prevState,\r\n            [item.pieceName]: {\r\n                row: toY,\r\n                col: toX,\r\n                hasMoved: true,\r\n                isOwner: true,\r\n                isAlive: true,\r\n                inCheck: false,\r\n            },\r\n        }));\r\n    } else {\r\n        // Moving a piece will always take king out of check\r\n        setBoardState((prevState) => ({\r\n            ...prevState,\r\n            [item.pieceName]: {\r\n                row: toY,\r\n                col: toX,\r\n                hasMoved: true,\r\n                isOwner: true,\r\n                isAlive: true,\r\n            },\r\n            [king]: {\r\n                ...boardState[king],\r\n                inCheck: false,\r\n            },\r\n        }));\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\r\nexport function CanMovePiece(toX, toY, draggedPiece, boardState) {\r\n    const square = GetPieceAtSquare(toX, toY, boardState);\r\n\r\n    // if a friendly piece is in a square, don't allow this piece to be moved there\r\n    if (square && square.state.isOwner && square.state.isAlive) return false;\r\n\r\n    // calculate the difference between the new square and the piece being dragged\r\n    let dx = Math.abs(toX - draggedPiece.pieceState.col);\r\n    let dy = Math.abs(toY - draggedPiece.pieceState.row);\r\n\r\n    const pieceName = draggedPiece.pieceName.split(\"_\")[0];\r\n\r\n    // Check the row and column of the piece to see if the movement should be blocked\r\n    // by another piece\r\n    const straightCollision = CheckStraightCollisions(\r\n        toX,\r\n        toY,\r\n        boardState,\r\n        draggedPiece\r\n    );\r\n    // Check the diagonal of the piece to see if the movement should be blocked\r\n    // by another piece\r\n    const diagCollision = CheckDiagCollisions(\r\n        toX,\r\n        toY,\r\n        boardState,\r\n        draggedPiece\r\n    );\r\n\r\n    // Get the players king\r\n    const king = boardState[\"king_w\"].isOwner\r\n        ? boardState[\"king_w\"]\r\n        : boardState[\"king_b\"];\r\n\r\n    // Checks if the move will block the piece attacking the king\r\n    const pieceCheckingKing = CheckIfPieceIsProtectingKing(\r\n        toX,\r\n        toY,\r\n        boardState,\r\n        draggedPiece.pieceName\r\n    );\r\n\r\n    // Gets the piece that is putting the king in check\r\n    const piecePuttingKingInCheck = CheckIfMoveUnderAttack(\r\n        king.col,\r\n        king.row,\r\n        boardState\r\n    );\r\n\r\n    const pieceAttackingKingNotAtSquare =\r\n        square !== null && square.piece !== piecePuttingKingInCheck;\r\n    // Move must protect king if king is in check\r\n    const cantMoveToProtectKing =\r\n        king.inCheck &&\r\n        ((pieceCheckingKing === null && pieceAttackingKingNotAtSquare) ||\r\n            (pieceCheckingKing === null && square === null));\r\n\r\n    let isProtectingKing;\r\n    if (pieceName !== \"king\") {\r\n        // Check if the piece is defending the king\r\n        // Get the piece that is attacking the king if true\r\n        const pieceAttackingKing = CheckIfPieceIsProtectingKing(\r\n            draggedPiece.pieceState.col,\r\n            draggedPiece.pieceState.row,\r\n            boardState,\r\n            draggedPiece.pieceName\r\n        );\r\n        // Check if the piece is currently under attack\r\n        const isPieceUnderAttack =\r\n            CheckIfMoveUnderAttack(\r\n                draggedPiece.pieceState.col,\r\n                draggedPiece.pieceState.row,\r\n                boardState\r\n            ) !== null;\r\n        isProtectingKing = pieceAttackingKing !== null && isPieceUnderAttack;\r\n    }\r\n\r\n    const cantMoveWhilstProtecting = () => {\r\n        // Dont allow the pawn to move if its protecting king unless it can take the piece\r\n        // and ensure that the piece is alive before taking\r\n        if (\r\n            isProtectingKing &&\r\n            ((square && pieceCheckingKing !== square.piece) ||\r\n                square === null ||\r\n                (square && !square.state.isAlive))\r\n        )\r\n            return true;\r\n        return false;\r\n    };\r\n\r\n    switch (pieceName) {\r\n        case \"king\":\r\n            const moveUnderAttack = CheckIfMoveUnderAttack(\r\n                toX,\r\n                toY,\r\n                boardState,\r\n                draggedPiece.pieceName\r\n            );\r\n            const moveNotInCheck =\r\n                moveUnderAttack === null ||\r\n                (square && square.piece === moveUnderAttack);\r\n            return (\r\n                (dx === 1 || dx === 0) &&\r\n                (dy === 1 || dy === 0) &&\r\n                moveNotInCheck\r\n            );\r\n\r\n        case \"castle\":\r\n            if (cantMoveWhilstProtecting()) return;\r\n            if (cantMoveToProtectKing) return;\r\n            return (\r\n                ((dx === 0 && dy > 0) || (dx > 0 && dy === 0)) &&\r\n                !straightCollision.collision\r\n            );\r\n\r\n        case \"knight\":\r\n            if (cantMoveWhilstProtecting()) return;\r\n            if (cantMoveToProtectKing) return;\r\n            return (dx === 2 && dy === 1) || (dx === 1 && dy === 2);\r\n\r\n        case \"bishop\":\r\n            if (cantMoveWhilstProtecting()) return;\r\n            if (cantMoveToProtectKing) return;\r\n            return (\r\n                !(dx === 0 && dy > 0) &&\r\n                !(dx > 0 && dy === 0) &&\r\n                (dx === dy || dx === dy) &&\r\n                !diagCollision.collision\r\n            );\r\n\r\n        case \"queen\":\r\n            if (cantMoveWhilstProtecting()) return;\r\n            if (cantMoveToProtectKing) return;\r\n\r\n            return (\r\n                (((dx === 0 && dy > 0) || (dx > 0 && dy === 0)) &&\r\n                    !straightCollision.collision) ||\r\n                ((dx === dy || dx === dy) && !diagCollision.collision)\r\n            );\r\n\r\n        case \"pawn\":\r\n            if (cantMoveWhilstProtecting()) return;\r\n            if (cantMoveToProtectKing) return;\r\n            // Recalculate dx/dy with direction\r\n            dx = toX - draggedPiece.pieceState.col;\r\n            dy = toY - draggedPiece.pieceState.row;\r\n            // Allow pawn to move 2 squares on first move\r\n            if (!draggedPiece.pieceState.hasMoved) {\r\n                // Negative direction moves up the board (player always at bottom)\r\n                if (\r\n                    dx === 0 &&\r\n                    (dy === -1 || dy === -2) &&\r\n                    !straightCollision.collision\r\n                ) {\r\n                    return square === null;\r\n                }\r\n            }\r\n            // Allow pawn to take opponents pieces diagonal by 1 square\r\n            if ((dx === 1 || dx === -1) && dy === -1 && square !== null)\r\n                return true;\r\n\r\n            // Allow pawn to move forward by 1 square\r\n            return dx === 0 && dy === -1 && square === null;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if the current square is empty\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @returns piece name and state if square is not empty, null otherwise\r\n */\r\nfunction GetPieceAtSquare(x, y, boardState) {\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        if (x === state.col && y === state.row) {\r\n            return { piece, state };\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Checks if there is a piece in the diagonal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} draggedPiece contains data about the currently dragged piece\r\n * @param {boolean} checkForOpponentPiece if true, the check will be on behalf of the opponent\r\n * @returns piece and false if an opponents piece is inbetween the square and the currently dragged piece, piece and true otherwise\r\n */\r\nfunction CheckDiagCollisions(\r\n    x,\r\n    y,\r\n    boardState,\r\n    draggedPiece,\r\n    checkForOpponentPiece = false\r\n) {\r\n    // Get row and col of dragged piece\r\n    const row = draggedPiece.pieceState.row;\r\n    const col = draggedPiece.pieceState.col;\r\n\r\n    const dirX = Math.sign(x - col);\r\n    const dirY = Math.sign(y - row);\r\n    for (let i = 0; i < Math.abs(x - col) + 1; i++) {\r\n        for (const [piece, state] of Object.entries(boardState)) {\r\n            const owner = checkForOpponentPiece\r\n                ? !state.isOwner\r\n                : state.isOwner;\r\n            if (\r\n                col + i * dirX === state.col &&\r\n                row + i * dirY === state.row &&\r\n                state.isAlive &&\r\n                ((i === 0 && !owner) || i !== 0)\r\n            ) {\r\n                if (i !== Math.abs(x - col)) {\r\n                    // Stops opponents pieces from being taken when hidden behind each other\r\n                    return {\r\n                        piece: piece,\r\n                        collision: true,\r\n                    };\r\n                }\r\n                return {\r\n                    piece: piece,\r\n                    collision: owner,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return { piece: null, collision: false };\r\n}\r\n\r\n/**\r\n * Checks if there is a piece in the vertical and horizontal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} draggedPiece contains data about the currently dragged piece\r\n * @param {boolean} checkForOpponentPiece if true, the check will be on behalf of the opponent\r\n * @returns true and the piece name if an opponents piece is inbetween the square and the currently dragged piece, false and null otherwise\r\n */\r\nfunction CheckStraightCollisions(\r\n    x,\r\n    y,\r\n    boardState,\r\n    draggedPiece,\r\n    checkForOpponentPiece = false\r\n) {\r\n    // Get row and col of dragged piece\r\n    const row = draggedPiece.pieceState.row;\r\n    const col = draggedPiece.pieceState.col;\r\n    // Get change in x and y between dragged piece and square\r\n    const dx = Math.abs(x - col);\r\n    const dy = Math.abs(y - row);\r\n\r\n    // Ignore diagonal moves\r\n    if (dx > 0 && dy > 0) return true;\r\n\r\n    // get direction of move\r\n    const dirX = Math.sign(x - col);\r\n    const dirY = Math.sign(y - row);\r\n\r\n    for (let i = 1; i < Math.max(dx, dy) + 1; i++) {\r\n        for (const [piece, state] of Object.entries(boardState)) {\r\n            if (state.isAlive) {\r\n                // Move is horizontal if dy = 0, otherwise vertical\r\n                if (dy === 0) {\r\n                    if (col + i * dirX === state.col && row === state.row) {\r\n                        if (i !== Math.abs(x - col)) {\r\n                            // Stops opponents pieces from being taken when hidden behind each other\r\n                            return {\r\n                                piece: piece,\r\n                                collision: true,\r\n                            };\r\n                        }\r\n                        return {\r\n                            piece: piece,\r\n                            collision: checkForOpponentPiece\r\n                                ? !state.isOwner\r\n                                : state.isOwner,\r\n                        };\r\n                    }\r\n                } else {\r\n                    if (row + i * dirY === state.row && col === state.col) {\r\n                        if (i !== Math.abs(y - row)) {\r\n                            // Stops opponents pieces from being taken when hidden behind each other\r\n                            return {\r\n                                piece: piece,\r\n                                collision: true,\r\n                            };\r\n                        }\r\n                        return {\r\n                            piece: piece,\r\n                            collision: checkForOpponentPiece\r\n                                ? !state.isOwner\r\n                                : state.isOwner,\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return { piece: null, collision: false };\r\n}\r\n\r\n/**\r\n * Checks if a piece at (x,y) on the board is under attack by an opponents piece\r\n * @param {*} x x coordinate of the square currently being checked\r\n * @param {*} y y coordinate of the square currently being checked\r\n * @param {*} boardState current state of the board\r\n * @returns piece name if the piece is under attack, null otherwise\r\n */\r\nfunction CheckIfMoveUnderAttack(x, y, boardState, pieceToMove = null) {\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        // King cannot be checked by its own pieces\r\n        if (!state.isOwner) {\r\n            const dx = Math.abs(x - state.col);\r\n            const dy = Math.abs(y - state.row);\r\n\r\n            // Check if the square is under attack from an opponents piece via straight line\r\n            const straightCollisions = CheckStraightCollisions(\r\n                state.col,\r\n                state.row,\r\n                boardState,\r\n                {\r\n                    pieceState: { col: x, row: y },\r\n                }\r\n            );\r\n\r\n            if (straightCollisions.piece && !straightCollisions.collision) {\r\n                // Dont include collisions with self\r\n                if (straightCollisions.piece === pieceToMove) return null;\r\n\r\n                const pieceName = straightCollisions.piece.split(\"_\")[0];\r\n                // If the piece can take pieces horizontally or vertically or king is in range,\r\n                // then the move is not valid\r\n                if (\r\n                    pieceName === \"queen\" ||\r\n                    pieceName === \"castle\" ||\r\n                    (pieceName === \"king\" && (dx === 1 || dy === 1))\r\n                ) {\r\n                    //return true;\r\n                    return straightCollisions.piece;\r\n                }\r\n            }\r\n            // Check if the square is under attack from an opponents piece via diagonal line\r\n            const diagCollisions = CheckDiagCollisions(\r\n                state.col,\r\n                state.row,\r\n                boardState,\r\n                {\r\n                    pieceState: { col: x, row: y },\r\n                }\r\n            );\r\n\r\n            if (\r\n                diagCollisions.piece &&\r\n                diagCollisions.piece !== pieceToMove &&\r\n                !diagCollisions.collision\r\n            ) {\r\n                // Dont include collisions with self\r\n                if (diagCollisions.piece === pieceToMove) return null;\r\n\r\n                const pieceName = diagCollisions.piece.split(\"_\")[0];\r\n                // If the piece can move diagonally or the pawn is in range of square,\r\n                // then the move is not valid\r\n                if (\r\n                    pieceName === \"queen\" ||\r\n                    pieceName === \"bishop\" ||\r\n                    (pieceName === \"king\" && dx === 1 && dy === 1) ||\r\n                    (pieceName === \"pawn\" && dx === 1 && y - state.row === 1)\r\n                ) {\r\n                    //return true;\r\n                    return diagCollisions.piece;\r\n                }\r\n            }\r\n\r\n            // Check if square is under attack by a knight\r\n            if (\r\n                piece.split(\"_\")[0] === \"knight\" &&\r\n                ((dx === 2 && dy === 1) || (dx === 1 && dy === 2))\r\n            ) {\r\n                return piece;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Check if the piece at (x,y) on the board is blocking an opponent piece from checking the king\r\n * @param {*} x x coordinate of the square currently being checked\r\n * @param {*} y y coordinate of the square currently being checked\r\n * @param {*} boardState current state of the board\r\n * @param {*} draggedPiece piece being dragged\r\n * @returns name of piece attacking king, if no such piece exists, return null\r\n */\r\nfunction CheckIfPieceIsProtectingKing(x, y, boardState, draggedPiece) {\r\n    // Get players king\r\n    const king = boardState[\"king_w\"].isOwner\r\n        ? boardState[\"king_w\"]\r\n        : boardState[\"king_b\"];\r\n\r\n    // Direction from (x,y) to king\r\n    const dirX = Math.sign(x - king.col);\r\n    const dirY = Math.sign(y - king.row);\r\n\r\n    const dx = Math.abs(king.col - x);\r\n    const dy = Math.abs(king.row - y);\r\n\r\n    const getOppositeCoords = (king) => {\r\n        let oppositeX = king.col;\r\n        let oppositeY = king.row;\r\n        // Get the x,y in the opposite direction to the king to the edge of the board\r\n        while (\r\n            oppositeX <= 7 &&\r\n            oppositeX >= 0 &&\r\n            oppositeY <= 7 &&\r\n            oppositeY >= 0\r\n        ) {\r\n            oppositeX += dirX;\r\n            oppositeY += dirY;\r\n        }\r\n        return [oppositeX, oppositeY];\r\n    };\r\n\r\n    // Check pieces that are directly above or beside the king\r\n    if (dx === 0 || ((dirX === 1 || dirX === -1) && dy === 0)) {\r\n        // Check if piece is inbetween king and opponent piece that can attack king\r\n        const straightCollisions = CheckStraightCollisions(x, y, boardState, {\r\n            pieceState: { col: king.col, row: king.row },\r\n        });\r\n\r\n        // A piece is inbetween the dragged piece and the king,\r\n        // therefore, it is not protecting the king and can be moved\r\n        if (\r\n            straightCollisions.collision &&\r\n            straightCollisions.piece !== draggedPiece\r\n        )\r\n            return null;\r\n\r\n        const [oppositeX, oppositeY] = getOppositeCoords(king);\r\n\r\n        const oppositeStraightCollisions = CheckStraightCollisions(\r\n            oppositeX,\r\n            oppositeY,\r\n            boardState,\r\n            {\r\n                pieceState: { col: x, row: y },\r\n            }\r\n        );\r\n\r\n        if (\r\n            oppositeStraightCollisions.piece &&\r\n            !boardState[oppositeStraightCollisions.piece].isOwner\r\n        ) {\r\n            const pieceName = oppositeStraightCollisions.piece.split(\"_\")[0];\r\n            // If the piece in opposite direction to king is able to attack the king\r\n            // once the dragged piece is moved, then don't allow the piece to be moved\r\n            if (pieceName === \"castle\" || pieceName === \"queen\") {\r\n                // the piece is protecting the king\r\n                return oppositeStraightCollisions.piece;\r\n            }\r\n        }\r\n    } else if (dx === dy) {\r\n        // Check the pieces directly diagonal to the king\r\n        // Check if piece is inbetween king and opponent piece that can attack king\r\n        const diagCollisions = CheckDiagCollisions(x, y, boardState, {\r\n            pieceState: { col: king.col, row: king.row },\r\n        });\r\n\r\n        // A piece is inbetween the dragged piece and the king,\r\n        // therefore, it is not protecting the king and can be moved\r\n        if (diagCollisions.collision && diagCollisions.piece !== draggedPiece)\r\n            return null;\r\n\r\n        const [oppositeX, oppositeY] = getOppositeCoords(king);\r\n\r\n        const oppositeDiagCollisions = CheckDiagCollisions(\r\n            oppositeX,\r\n            oppositeY,\r\n            boardState,\r\n            {\r\n                pieceState: { col: x, row: y },\r\n            }\r\n        );\r\n\r\n        if (\r\n            oppositeDiagCollisions.piece &&\r\n            !boardState[oppositeDiagCollisions.piece].isOwner\r\n        ) {\r\n            const pieceName = oppositeDiagCollisions.piece.split(\"_\")[0];\r\n            // If the piece in opposite direction to king is able to attack the king\r\n            // once the dragged piece is moved, then don't allow the piece to be moved\r\n            if (\r\n                pieceName === \"bishop\" ||\r\n                pieceName === \"queen\" ||\r\n                pieceName === \"pawn\"\r\n            ) {\r\n                // the piece is protecting the king\r\n                return oppositeDiagCollisions.piece;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Checks if a piece at (x,y) on the board is under attack by an opponents piece\r\n * @param {*} boardState current state of the board\r\n * @returns true if the piece is under attack, false otherwise\r\n */\r\nexport function CheckIfOpponentInCheck(boardState, opponentKing) {\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        // King cannot be checked by its own pieces\r\n        if (state.isOwner) {\r\n            const dx = Math.abs(opponentKing.col - state.col);\r\n            const dy = Math.abs(opponentKing.row - state.row);\r\n\r\n            // Check if the square is under attack from an opponents piece via straight line\r\n            const straightCollisions = CheckStraightCollisions(\r\n                state.col,\r\n                state.row,\r\n                boardState,\r\n                {\r\n                    pieceState: {\r\n                        col: opponentKing.col,\r\n                        row: opponentKing.row,\r\n                    },\r\n                },\r\n                true\r\n            );\r\n\r\n            if (straightCollisions.piece && !straightCollisions.collision) {\r\n                const pieceName = straightCollisions.piece.split(\"_\")[0];\r\n                // If the piece can take pieces horizontally or vertically or king is in range,\r\n                // then the move is not valid\r\n                if (\r\n                    pieceName === \"queen\" ||\r\n                    pieceName === \"castle\" ||\r\n                    (pieceName === \"king\" && (dx === 1 || dy === 1))\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n            // Check if the square is under attack from an opponents piece via diagonal line\r\n            const diagCollisions = CheckDiagCollisions(\r\n                state.col,\r\n                state.row,\r\n                boardState,\r\n                {\r\n                    pieceState: {\r\n                        col: opponentKing.col,\r\n                        row: opponentKing.row,\r\n                    },\r\n                },\r\n                true\r\n            );\r\n            if (diagCollisions.piece && !diagCollisions.collision) {\r\n                const pieceName = diagCollisions.piece.split(\"_\")[0];\r\n\r\n                // If the piece can move diagonally or the pawn is in range of square,\r\n                // then the move is not valid\r\n                // negative direction is up the board\r\n                if (\r\n                    pieceName === \"queen\" ||\r\n                    pieceName === \"bishop\" ||\r\n                    (pieceName === \"king\" && dx === 1 && dy === 1) ||\r\n                    (pieceName === \"pawn\" &&\r\n                        dx === 1 &&\r\n                        opponentKing.row - state.row === -1)\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // Check if square is under attack by a knight\r\n            if (\r\n                piece.split(\"_\")[0] === \"knight\" &&\r\n                ((dx === 2 && dy === 1) || (dx === 1 && dy === 2))\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"],"mappings":"ioBAAA;AACA;AACA;AACA;AACA;AACA,G,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASA,UAAT,CACHC,GADG,CAEHC,GAFG,CAGHC,aAHG,CAIHC,cAJG,CAKHC,IALG,CAMHC,UANG,CAOL,CACE,GAAMC,OAAM,CAAGC,gBAAgB,CAACP,GAAD,CAAMC,GAAN,CAAWI,UAAX,CAA/B,CAEA;AACA;AACA,GAAIC,MAAM,EAAI,IAAV,EAAkB,CAACA,MAAM,CAACE,OAA1B,EAAqCF,MAAM,CAACG,KAAP,CAAaC,OAAtD,CAA+D,CAC3D;AACA,MAAOL,WAAU,CAACC,MAAM,CAACK,KAAR,CAAjB,CAEA;AACA,GAAMC,eAAc,CAAGN,MAAM,CAACK,KAAP,CAAaE,KAAb,CAAmB,GAAnB,CAAvB,CACA,GAAMC,cAAa,CAAGF,cAAc,CAAC,CAAD,CAAd,CAAoB,GAApB,CAA0BA,cAAc,CAAC,CAAD,CAA9D,CACA,GAAMG,aAAY,CAAGC,OAAO,CAAC,2BACzBF,aADyB,CAEzB,MAFwB,CAA5B,CAIA,GAAIG,OAAJ,CACA,GAAIL,cAAc,CAAC,CAAD,CAAd,GAAsB,GAA1B,CAA+BK,MAAM,CAAG,OAAT,CAA/B,IACKA,OAAM,CAAG,OAAT,CACL;AACAd,cAAc,CAAC,SAACe,SAAD,wCACRA,SADQ,wBAEVD,MAFU,CAED,6BAAIC,SAAS,CAACD,MAAD,CAAb,GAAuBF,YAAvB,GAAqCI,IAArC,EAFC,IAAD,CAAd,CAIH,CAED,GAAMC,KAAI,CAAGf,UAAU,CAAC,QAAD,CAAV,CAAqBG,OAArB,CAA+B,QAA/B,CAA0C,QAAvD,CAEA;AACA,GAAIJ,IAAI,CAACiB,SAAL,CAAeR,KAAf,CAAqB,GAArB,EAA0B,CAA1B,IAAiC,MAArC,CAA6C,CACzCX,aAAa,CAAC,SAACgB,SAAD,wCACPA,SADO,wBAETd,IAAI,CAACiB,SAFI,CAEQ,CACdC,GAAG,CAAErB,GADS,CAEdsB,GAAG,CAAEvB,GAFS,CAGdwB,QAAQ,CAAE,IAHI,CAIdhB,OAAO,CAAE,IAJK,CAKdE,OAAO,CAAE,IALK,CAMde,OAAO,CAAE,KANK,CAFR,IAAD,CAAb,CAWH,CAZD,IAYO,CACH;AACAvB,aAAa,CAAC,SAACgB,SAAD,2DACPA,SADO,uDAETd,IAAI,CAACiB,SAFI,CAEQ,CACdC,GAAG,CAAErB,GADS,CAEdsB,GAAG,CAAEvB,GAFS,CAGdwB,QAAQ,CAAE,IAHI,CAIdhB,OAAO,CAAE,IAJK,CAKdE,OAAO,CAAE,IALK,CAFR,iCASTU,IATS,gCAUHf,UAAU,CAACe,IAAD,CAVP,MAWNK,OAAO,CAAE,KAXH,sBAAD,CAAb,CAcH,CACJ,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,aAAT,CAAsB1B,GAAtB,CAA2BC,GAA3B,CAAgC0B,YAAhC,CAA8CtB,UAA9C,CAA0D,CAC7D,GAAMC,OAAM,CAAGC,gBAAgB,CAACP,GAAD,CAAMC,GAAN,CAAWI,UAAX,CAA/B,CAEA;AACA,GAAIC,MAAM,EAAIA,MAAM,CAACG,KAAP,CAAaD,OAAvB,EAAkCF,MAAM,CAACG,KAAP,CAAaC,OAAnD,CAA4D,MAAO,MAAP,CAE5D;AACA,GAAIkB,GAAE,CAAGC,IAAI,CAACC,GAAL,CAAS9B,GAAG,CAAG2B,YAAY,CAACI,UAAb,CAAwBR,GAAvC,CAAT,CACA,GAAIS,GAAE,CAAGH,IAAI,CAACC,GAAL,CAAS7B,GAAG,CAAG0B,YAAY,CAACI,UAAb,CAAwBT,GAAvC,CAAT,CAEA,GAAMD,UAAS,CAAGM,YAAY,CAACN,SAAb,CAAuBR,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAlB,CAEA;AACA;AACA,GAAMoB,kBAAiB,CAAGC,uBAAuB,CAC7ClC,GAD6C,CAE7CC,GAF6C,CAG7CI,UAH6C,CAI7CsB,YAJ6C,CAAjD,CAMA;AACA;AACA,GAAMQ,cAAa,CAAGC,mBAAmB,CACrCpC,GADqC,CAErCC,GAFqC,CAGrCI,UAHqC,CAIrCsB,YAJqC,CAAzC,CAOA;AACA,GAAMP,KAAI,CAAGf,UAAU,CAAC,QAAD,CAAV,CAAqBG,OAArB,CACPH,UAAU,CAAC,QAAD,CADH,CAEPA,UAAU,CAAC,QAAD,CAFhB,CAIA;AACA,GAAMgC,kBAAiB,CAAGC,4BAA4B,CAClDtC,GADkD,CAElDC,GAFkD,CAGlDI,UAHkD,CAIlDsB,YAAY,CAACN,SAJqC,CAAtD,CAOA;AACA,GAAMkB,wBAAuB,CAAGC,sBAAsB,CAClDpB,IAAI,CAACG,GAD6C,CAElDH,IAAI,CAACE,GAF6C,CAGlDjB,UAHkD,CAAtD,CAMA,GAAMoC,8BAA6B,CAC/BnC,MAAM,GAAK,IAAX,EAAmBA,MAAM,CAACK,KAAP,GAAiB4B,uBADxC,CAEA;AACA,GAAMG,sBAAqB,CACvBtB,IAAI,CAACK,OAAL,GACEY,iBAAiB,GAAK,IAAtB,EAA8BI,6BAA/B,EACIJ,iBAAiB,GAAK,IAAtB,EAA8B/B,MAAM,GAAK,IAF9C,CADJ,CAKA,GAAIqC,iBAAJ,CACA,GAAItB,SAAS,GAAK,MAAlB,CAA0B,CACtB;AACA;AACA,GAAMuB,mBAAkB,CAAGN,4BAA4B,CACnDX,YAAY,CAACI,UAAb,CAAwBR,GAD2B,CAEnDI,YAAY,CAACI,UAAb,CAAwBT,GAF2B,CAGnDjB,UAHmD,CAInDsB,YAAY,CAACN,SAJsC,CAAvD,CAMA;AACA,GAAMwB,mBAAkB,CACpBL,sBAAsB,CAClBb,YAAY,CAACI,UAAb,CAAwBR,GADN,CAElBI,YAAY,CAACI,UAAb,CAAwBT,GAFN,CAGlBjB,UAHkB,CAAtB,GAIM,IALV,CAMAsC,gBAAgB,CAAGC,kBAAkB,GAAK,IAAvB,EAA+BC,kBAAlD,CACH,CAED,GAAMC,yBAAwB,CAAG,QAA3BA,yBAA2B,EAAM,CACnC;AACA;AACA,GACIH,gBAAgB,GACdrC,MAAM,EAAI+B,iBAAiB,GAAK/B,MAAM,CAACK,KAAxC,EACGL,MAAM,GAAK,IADd,EAEIA,MAAM,EAAI,CAACA,MAAM,CAACG,KAAP,CAAaC,OAHb,CADpB,CAMI,MAAO,KAAP,CACJ,MAAO,MAAP,CACH,CAXD,CAaA,OAAQW,SAAR,EACI,IAAK,MAAL,CACI,GAAM0B,gBAAe,CAAGP,sBAAsB,CAC1CxC,GAD0C,CAE1CC,GAF0C,CAG1CI,UAH0C,CAI1CsB,YAAY,CAACN,SAJ6B,CAA9C,CAMA,GAAM2B,eAAc,CAChBD,eAAe,GAAK,IAApB,EACCzC,MAAM,EAAIA,MAAM,CAACK,KAAP,GAAiBoC,eAFhC,CAGA,MACI,CAACnB,EAAE,GAAK,CAAP,EAAYA,EAAE,GAAK,CAApB,IACCI,EAAE,GAAK,CAAP,EAAYA,EAAE,GAAK,CADpB,GAEAgB,cAHJ,CAMJ,IAAK,QAAL,CACI,GAAIF,wBAAwB,EAA5B,CAAgC,OAChC,GAAIJ,qBAAJ,CAA2B,OAC3B,MACI,CAAEd,EAAE,GAAK,CAAP,EAAYI,EAAE,CAAG,CAAlB,EAAyBJ,EAAE,CAAG,CAAL,EAAUI,EAAE,GAAK,CAA3C,GACA,CAACC,iBAAiB,CAACgB,SAFvB,CAKJ,IAAK,QAAL,CACI,GAAIH,wBAAwB,EAA5B,CAAgC,OAChC,GAAIJ,qBAAJ,CAA2B,OAC3B,MAAQd,GAAE,GAAK,CAAP,EAAYI,EAAE,GAAK,CAApB,EAA2BJ,EAAE,GAAK,CAAP,EAAYI,EAAE,GAAK,CAArD,CAEJ,IAAK,QAAL,CACI,GAAIc,wBAAwB,EAA5B,CAAgC,OAChC,GAAIJ,qBAAJ,CAA2B,OAC3B,MACI,EAAEd,EAAE,GAAK,CAAP,EAAYI,EAAE,CAAG,CAAnB,GACA,EAAEJ,EAAE,CAAG,CAAL,EAAUI,EAAE,GAAK,CAAnB,CADA,GAECJ,EAAE,GAAKI,EAAP,EAAaJ,EAAE,GAAKI,EAFrB,GAGA,CAACG,aAAa,CAACc,SAJnB,CAOJ,IAAK,OAAL,CACI,GAAIH,wBAAwB,EAA5B,CAAgC,OAChC,GAAIJ,qBAAJ,CAA2B,OAE3B,MACK,CAAEd,EAAE,GAAK,CAAP,EAAYI,EAAE,CAAG,CAAlB,EAAyBJ,EAAE,CAAG,CAAL,EAAUI,EAAE,GAAK,CAA3C,GACG,CAACC,iBAAiB,CAACgB,SADvB,EAEC,CAACrB,EAAE,GAAKI,EAAP,EAAaJ,EAAE,GAAKI,EAArB,GAA4B,CAACG,aAAa,CAACc,SAHhD,CAMJ,IAAK,MAAL,CACI,GAAIH,wBAAwB,EAA5B,CAAgC,OAChC,GAAIJ,qBAAJ,CAA2B,OAC3B;AACAd,EAAE,CAAG5B,GAAG,CAAG2B,YAAY,CAACI,UAAb,CAAwBR,GAAnC,CACAS,EAAE,CAAG/B,GAAG,CAAG0B,YAAY,CAACI,UAAb,CAAwBT,GAAnC,CACA;AACA,GAAI,CAACK,YAAY,CAACI,UAAb,CAAwBP,QAA7B,CAAuC,CACnC;AACA,GACII,EAAE,GAAK,CAAP,GACCI,EAAE,GAAK,CAAC,CAAR,EAAaA,EAAE,GAAK,CAAC,CADtB,GAEA,CAACC,iBAAiB,CAACgB,SAHvB,CAIE,CACE,MAAO3C,OAAM,GAAK,IAAlB,CACH,CACJ,CACD;AACA,GAAI,CAACsB,EAAE,GAAK,CAAP,EAAYA,EAAE,GAAK,CAAC,CAArB,GAA2BI,EAAE,GAAK,CAAC,CAAnC,EAAwC1B,MAAM,GAAK,IAAvD,CACI,MAAO,KAAP,CAEJ;AACA,MAAOsB,GAAE,GAAK,CAAP,EAAYI,EAAE,GAAK,CAAC,CAApB,EAAyB1B,MAAM,GAAK,IAA3C,CAEJ,QACI,MAAO,MAAP,CA3ER,CA6EH,CAED;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,iBAAT,CAA0B2C,CAA1B,CAA6BC,CAA7B,CAAgC9C,UAAhC,CAA4C,CACxC,6BAA6B+C,MAAM,CAACC,OAAP,CAAehD,UAAf,CAA7B,gCAAyD,CAApD,6DAAOM,KAAP,uBAAcF,KAAd,uBACD,GAAIyC,CAAC,GAAKzC,KAAK,CAACc,GAAZ,EAAmB4B,CAAC,GAAK1C,KAAK,CAACa,GAAnC,CAAwC,CACpC,MAAO,CAAEX,KAAK,CAALA,KAAF,CAASF,KAAK,CAALA,KAAT,CAAP,CACH,CACJ,CACD,MAAO,KAAP,CACH,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS2B,oBAAT,CACIc,CADJ,CAEIC,CAFJ,CAGI9C,UAHJ,CAIIsB,YAJJ,CAME,IADE2B,sBACF,2DAD0B,KAC1B,CACE;AACA,GAAMhC,IAAG,CAAGK,YAAY,CAACI,UAAb,CAAwBT,GAApC,CACA,GAAMC,IAAG,CAAGI,YAAY,CAACI,UAAb,CAAwBR,GAApC,CAEA,GAAMgC,KAAI,CAAG1B,IAAI,CAAC2B,IAAL,CAAUN,CAAC,CAAG3B,GAAd,CAAb,CACA,GAAMkC,KAAI,CAAG5B,IAAI,CAAC2B,IAAL,CAAUL,CAAC,CAAG7B,GAAd,CAAb,CACA,IAAK,GAAIoC,EAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG7B,IAAI,CAACC,GAAL,CAASoB,CAAC,CAAG3B,GAAb,EAAoB,CAAxC,CAA2CmC,CAAC,EAA5C,CAAgD,CAC5C,+BAA6BN,MAAM,CAACC,OAAP,CAAehD,UAAf,CAA7B,mCAAyD,CAApD,gEAAOM,KAAP,wBAAcF,KAAd,wBACD,GAAMkD,MAAK,CAAGL,qBAAqB,CAC7B,CAAC7C,KAAK,CAACD,OADsB,CAE7BC,KAAK,CAACD,OAFZ,CAGA,GACIe,GAAG,CAAGmC,CAAC,CAAGH,IAAV,GAAmB9C,KAAK,CAACc,GAAzB,EACAD,GAAG,CAAGoC,CAAC,CAAGD,IAAV,GAAmBhD,KAAK,CAACa,GADzB,EAEAb,KAAK,CAACC,OAFN,GAGEgD,CAAC,GAAK,CAAN,EAAW,CAACC,KAAb,EAAuBD,CAAC,GAAK,CAH9B,CADJ,CAKE,CACE,GAAIA,CAAC,GAAK7B,IAAI,CAACC,GAAL,CAASoB,CAAC,CAAG3B,GAAb,CAAV,CAA6B,CACzB;AACA,MAAO,CACHZ,KAAK,CAAEA,KADJ,CAEHsC,SAAS,CAAE,IAFR,CAAP,CAIH,CACD,MAAO,CACHtC,KAAK,CAAEA,KADJ,CAEHsC,SAAS,CAAEU,KAFR,CAAP,CAIH,CACJ,CACJ,CACD,MAAO,CAAEhD,KAAK,CAAE,IAAT,CAAesC,SAAS,CAAE,KAA1B,CAAP,CACH,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASf,wBAAT,CACIgB,CADJ,CAEIC,CAFJ,CAGI9C,UAHJ,CAIIsB,YAJJ,CAME,IADE2B,sBACF,2DAD0B,KAC1B,CACE;AACA,GAAMhC,IAAG,CAAGK,YAAY,CAACI,UAAb,CAAwBT,GAApC,CACA,GAAMC,IAAG,CAAGI,YAAY,CAACI,UAAb,CAAwBR,GAApC,CACA;AACA,GAAMK,GAAE,CAAGC,IAAI,CAACC,GAAL,CAASoB,CAAC,CAAG3B,GAAb,CAAX,CACA,GAAMS,GAAE,CAAGH,IAAI,CAACC,GAAL,CAASqB,CAAC,CAAG7B,GAAb,CAAX,CAEA;AACA,GAAIM,EAAE,CAAG,CAAL,EAAUI,EAAE,CAAG,CAAnB,CAAsB,MAAO,KAAP,CAEtB;AACA,GAAMuB,KAAI,CAAG1B,IAAI,CAAC2B,IAAL,CAAUN,CAAC,CAAG3B,GAAd,CAAb,CACA,GAAMkC,KAAI,CAAG5B,IAAI,CAAC2B,IAAL,CAAUL,CAAC,CAAG7B,GAAd,CAAb,CAEA,IAAK,GAAIoC,EAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG7B,IAAI,CAAC+B,GAAL,CAAShC,EAAT,CAAaI,EAAb,EAAmB,CAAvC,CAA0C0B,CAAC,EAA3C,CAA+C,CAC3C,+BAA6BN,MAAM,CAACC,OAAP,CAAehD,UAAf,CAA7B,mCAAyD,CAApD,gEAAOM,KAAP,wBAAcF,KAAd,wBACD,GAAIA,KAAK,CAACC,OAAV,CAAmB,CACf;AACA,GAAIsB,EAAE,GAAK,CAAX,CAAc,CACV,GAAIT,GAAG,CAAGmC,CAAC,CAAGH,IAAV,GAAmB9C,KAAK,CAACc,GAAzB,EAAgCD,GAAG,GAAKb,KAAK,CAACa,GAAlD,CAAuD,CACnD,GAAIoC,CAAC,GAAK7B,IAAI,CAACC,GAAL,CAASoB,CAAC,CAAG3B,GAAb,CAAV,CAA6B,CACzB;AACA,MAAO,CACHZ,KAAK,CAAEA,KADJ,CAEHsC,SAAS,CAAE,IAFR,CAAP,CAIH,CACD,MAAO,CACHtC,KAAK,CAAEA,KADJ,CAEHsC,SAAS,CAAEK,qBAAqB,CAC1B,CAAC7C,KAAK,CAACD,OADmB,CAE1BC,KAAK,CAACD,OAJT,CAAP,CAMH,CACJ,CAhBD,IAgBO,CACH,GAAIc,GAAG,CAAGoC,CAAC,CAAGD,IAAV,GAAmBhD,KAAK,CAACa,GAAzB,EAAgCC,GAAG,GAAKd,KAAK,CAACc,GAAlD,CAAuD,CACnD,GAAImC,CAAC,GAAK7B,IAAI,CAACC,GAAL,CAASqB,CAAC,CAAG7B,GAAb,CAAV,CAA6B,CACzB;AACA,MAAO,CACHX,KAAK,CAAEA,KADJ,CAEHsC,SAAS,CAAE,IAFR,CAAP,CAIH,CACD,MAAO,CACHtC,KAAK,CAAEA,KADJ,CAEHsC,SAAS,CAAEK,qBAAqB,CAC1B,CAAC7C,KAAK,CAACD,OADmB,CAE1BC,KAAK,CAACD,OAJT,CAAP,CAMH,CACJ,CACJ,CACJ,CACJ,CACD,MAAO,CAAEG,KAAK,CAAE,IAAT,CAAesC,SAAS,CAAE,KAA1B,CAAP,CACH,CAED;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAST,uBAAT,CAAgCU,CAAhC,CAAmCC,CAAnC,CAAsC9C,UAAtC,CAAsE,IAApBwD,YAAoB,2DAAN,IAAM,CAClE,+BAA6BT,MAAM,CAACC,OAAP,CAAehD,UAAf,CAA7B,mCAAyD,CAApD,gEAAOM,KAAP,wBAAcF,KAAd,wBACD;AACA,GAAI,CAACA,KAAK,CAACD,OAAX,CAAoB,CAChB,GAAMoB,GAAE,CAAGC,IAAI,CAACC,GAAL,CAASoB,CAAC,CAAGzC,KAAK,CAACc,GAAnB,CAAX,CACA,GAAMS,GAAE,CAAGH,IAAI,CAACC,GAAL,CAASqB,CAAC,CAAG1C,KAAK,CAACa,GAAnB,CAAX,CAEA;AACA,GAAMwC,mBAAkB,CAAG5B,uBAAuB,CAC9CzB,KAAK,CAACc,GADwC,CAE9Cd,KAAK,CAACa,GAFwC,CAG9CjB,UAH8C,CAI9C,CACI0B,UAAU,CAAE,CAAER,GAAG,CAAE2B,CAAP,CAAU5B,GAAG,CAAE6B,CAAf,CADhB,CAJ8C,CAAlD,CASA,GAAIW,kBAAkB,CAACnD,KAAnB,EAA4B,CAACmD,kBAAkB,CAACb,SAApD,CAA+D,CAC3D;AACA,GAAIa,kBAAkB,CAACnD,KAAnB,GAA6BkD,WAAjC,CAA8C,MAAO,KAAP,CAE9C,GAAMxC,UAAS,CAAGyC,kBAAkB,CAACnD,KAAnB,CAAyBE,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAlB,CACA;AACA;AACA,GACIQ,SAAS,GAAK,OAAd,EACAA,SAAS,GAAK,QADd,EAECA,SAAS,GAAK,MAAd,GAAyBO,EAAE,GAAK,CAAP,EAAYI,EAAE,GAAK,CAA5C,CAHL,CAIE,CACE;AACA,MAAO8B,mBAAkB,CAACnD,KAA1B,CACH,CACJ,CACD;AACA,GAAMoD,eAAc,CAAG3B,mBAAmB,CACtC3B,KAAK,CAACc,GADgC,CAEtCd,KAAK,CAACa,GAFgC,CAGtCjB,UAHsC,CAItC,CACI0B,UAAU,CAAE,CAAER,GAAG,CAAE2B,CAAP,CAAU5B,GAAG,CAAE6B,CAAf,CADhB,CAJsC,CAA1C,CASA,GACIY,cAAc,CAACpD,KAAf,EACAoD,cAAc,CAACpD,KAAf,GAAyBkD,WADzB,EAEA,CAACE,cAAc,CAACd,SAHpB,CAIE,CACE;AACA,GAAIc,cAAc,CAACpD,KAAf,GAAyBkD,WAA7B,CAA0C,MAAO,KAAP,CAE1C,GAAMxC,WAAS,CAAG0C,cAAc,CAACpD,KAAf,CAAqBE,KAArB,CAA2B,GAA3B,EAAgC,CAAhC,CAAlB,CACA;AACA;AACA,GACIQ,UAAS,GAAK,OAAd,EACAA,UAAS,GAAK,QADd,EAECA,UAAS,GAAK,MAAd,EAAwBO,EAAE,GAAK,CAA/B,EAAoCI,EAAE,GAAK,CAF5C,EAGCX,UAAS,GAAK,MAAd,EAAwBO,EAAE,GAAK,CAA/B,EAAoCuB,CAAC,CAAG1C,KAAK,CAACa,GAAV,GAAkB,CAJ3D,CAKE,CACE;AACA,MAAOyC,eAAc,CAACpD,KAAtB,CACH,CACJ,CAED;AACA,GACIA,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiB,CAAjB,IAAwB,QAAxB,GACEe,EAAE,GAAK,CAAP,EAAYI,EAAE,GAAK,CAApB,EAA2BJ,EAAE,GAAK,CAAP,EAAYI,EAAE,GAAK,CAD/C,CADJ,CAGE,CACE,MAAOrB,MAAP,CACH,CACJ,CACJ,CACD,MAAO,KAAP,CACH,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS2B,6BAAT,CAAsCY,CAAtC,CAAyCC,CAAzC,CAA4C9C,UAA5C,CAAwDsB,YAAxD,CAAsE,CAClE;AACA,GAAMP,KAAI,CAAGf,UAAU,CAAC,QAAD,CAAV,CAAqBG,OAArB,CACPH,UAAU,CAAC,QAAD,CADH,CAEPA,UAAU,CAAC,QAAD,CAFhB,CAIA;AACA,GAAMkD,KAAI,CAAG1B,IAAI,CAAC2B,IAAL,CAAUN,CAAC,CAAG9B,IAAI,CAACG,GAAnB,CAAb,CACA,GAAMkC,KAAI,CAAG5B,IAAI,CAAC2B,IAAL,CAAUL,CAAC,CAAG/B,IAAI,CAACE,GAAnB,CAAb,CAEA,GAAMM,GAAE,CAAGC,IAAI,CAACC,GAAL,CAASV,IAAI,CAACG,GAAL,CAAW2B,CAApB,CAAX,CACA,GAAMlB,GAAE,CAAGH,IAAI,CAACC,GAAL,CAASV,IAAI,CAACE,GAAL,CAAW6B,CAApB,CAAX,CAEA,GAAMa,kBAAiB,CAAG,QAApBA,kBAAoB,CAAC5C,IAAD,CAAU,CAChC,GAAI6C,UAAS,CAAG7C,IAAI,CAACG,GAArB,CACA,GAAI2C,UAAS,CAAG9C,IAAI,CAACE,GAArB,CACA;AACA,MACI2C,SAAS,EAAI,CAAb,EACAA,SAAS,EAAI,CADb,EAEAC,SAAS,EAAI,CAFb,EAGAA,SAAS,EAAI,CAJjB,CAKE,CACED,SAAS,EAAIV,IAAb,CACAW,SAAS,EAAIT,IAAb,CACH,CACD,MAAO,CAACQ,SAAD,CAAYC,SAAZ,CAAP,CACH,CAdD,CAgBA;AACA,GAAItC,EAAE,GAAK,CAAP,EAAa,CAAC2B,IAAI,GAAK,CAAT,EAAcA,IAAI,GAAK,CAAC,CAAzB,GAA+BvB,EAAE,GAAK,CAAvD,CAA2D,CACvD;AACA,GAAM8B,mBAAkB,CAAG5B,uBAAuB,CAACgB,CAAD,CAAIC,CAAJ,CAAO9C,UAAP,CAAmB,CACjE0B,UAAU,CAAE,CAAER,GAAG,CAAEH,IAAI,CAACG,GAAZ,CAAiBD,GAAG,CAAEF,IAAI,CAACE,GAA3B,CADqD,CAAnB,CAAlD,CAIA;AACA;AACA,GACIwC,kBAAkB,CAACb,SAAnB,EACAa,kBAAkB,CAACnD,KAAnB,GAA6BgB,YAFjC,CAII,MAAO,KAAP,CAEJ,uBAA+BqC,iBAAiB,CAAC5C,IAAD,CAAhD,0DAAO6C,SAAP,wBAAkBC,SAAlB,wBAEA,GAAMC,2BAA0B,CAAGjC,uBAAuB,CACtD+B,SADsD,CAEtDC,SAFsD,CAGtD7D,UAHsD,CAItD,CACI0B,UAAU,CAAE,CAAER,GAAG,CAAE2B,CAAP,CAAU5B,GAAG,CAAE6B,CAAf,CADhB,CAJsD,CAA1D,CASA,GACIgB,0BAA0B,CAACxD,KAA3B,EACA,CAACN,UAAU,CAAC8D,0BAA0B,CAACxD,KAA5B,CAAV,CAA6CH,OAFlD,CAGE,CACE,GAAMa,UAAS,CAAG8C,0BAA0B,CAACxD,KAA3B,CAAiCE,KAAjC,CAAuC,GAAvC,EAA4C,CAA5C,CAAlB,CACA;AACA;AACA,GAAIQ,SAAS,GAAK,QAAd,EAA0BA,SAAS,GAAK,OAA5C,CAAqD,CACjD;AACA,MAAO8C,2BAA0B,CAACxD,KAAlC,CACH,CACJ,CACJ,CArCD,IAqCO,IAAIiB,EAAE,GAAKI,EAAX,CAAe,CAClB;AACA;AACA,GAAM+B,eAAc,CAAG3B,mBAAmB,CAACc,CAAD,CAAIC,CAAJ,CAAO9C,UAAP,CAAmB,CACzD0B,UAAU,CAAE,CAAER,GAAG,CAAEH,IAAI,CAACG,GAAZ,CAAiBD,GAAG,CAAEF,IAAI,CAACE,GAA3B,CAD6C,CAAnB,CAA1C,CAIA;AACA;AACA,GAAIyC,cAAc,CAACd,SAAf,EAA4Bc,cAAc,CAACpD,KAAf,GAAyBgB,YAAzD,CACI,MAAO,KAAP,CAEJ,wBAA+BqC,iBAAiB,CAAC5C,IAAD,CAAhD,2DAAO6C,UAAP,wBAAkBC,UAAlB,wBAEA,GAAME,uBAAsB,CAAGhC,mBAAmB,CAC9C6B,UAD8C,CAE9CC,UAF8C,CAG9C7D,UAH8C,CAI9C,CACI0B,UAAU,CAAE,CAAER,GAAG,CAAE2B,CAAP,CAAU5B,GAAG,CAAE6B,CAAf,CADhB,CAJ8C,CAAlD,CASA,GACIiB,sBAAsB,CAACzD,KAAvB,EACA,CAACN,UAAU,CAAC+D,sBAAsB,CAACzD,KAAxB,CAAV,CAAyCH,OAF9C,CAGE,CACE,GAAMa,YAAS,CAAG+C,sBAAsB,CAACzD,KAAvB,CAA6BE,KAA7B,CAAmC,GAAnC,EAAwC,CAAxC,CAAlB,CACA;AACA;AACA,GACIQ,WAAS,GAAK,QAAd,EACAA,WAAS,GAAK,OADd,EAEAA,WAAS,GAAK,MAHlB,CAIE,CACE;AACA,MAAO+C,uBAAsB,CAACzD,KAA9B,CACH,CACJ,CACJ,CACD,MAAO,KAAP,CACH,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS0D,uBAAT,CAAgChE,UAAhC,CAA4CiE,YAA5C,CAA0D,CAC7D,+BAA6BlB,MAAM,CAACC,OAAP,CAAehD,UAAf,CAA7B,mCAAyD,CAApD,gEAAOM,KAAP,wBAAcF,KAAd,wBACD;AACA,GAAIA,KAAK,CAACD,OAAV,CAAmB,CACf,GAAMoB,GAAE,CAAGC,IAAI,CAACC,GAAL,CAASwC,YAAY,CAAC/C,GAAb,CAAmBd,KAAK,CAACc,GAAlC,CAAX,CACA,GAAMS,GAAE,CAAGH,IAAI,CAACC,GAAL,CAASwC,YAAY,CAAChD,GAAb,CAAmBb,KAAK,CAACa,GAAlC,CAAX,CAEA;AACA,GAAMwC,mBAAkB,CAAG5B,uBAAuB,CAC9CzB,KAAK,CAACc,GADwC,CAE9Cd,KAAK,CAACa,GAFwC,CAG9CjB,UAH8C,CAI9C,CACI0B,UAAU,CAAE,CACRR,GAAG,CAAE+C,YAAY,CAAC/C,GADV,CAERD,GAAG,CAAEgD,YAAY,CAAChD,GAFV,CADhB,CAJ8C,CAU9C,IAV8C,CAAlD,CAaA,GAAIwC,kBAAkB,CAACnD,KAAnB,EAA4B,CAACmD,kBAAkB,CAACb,SAApD,CAA+D,CAC3D,GAAM5B,UAAS,CAAGyC,kBAAkB,CAACnD,KAAnB,CAAyBE,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAlB,CACA;AACA;AACA,GACIQ,SAAS,GAAK,OAAd,EACAA,SAAS,GAAK,QADd,EAECA,SAAS,GAAK,MAAd,GAAyBO,EAAE,GAAK,CAAP,EAAYI,EAAE,GAAK,CAA5C,CAHL,CAIE,CACE,MAAO,KAAP,CACH,CACJ,CACD;AACA,GAAM+B,eAAc,CAAG3B,mBAAmB,CACtC3B,KAAK,CAACc,GADgC,CAEtCd,KAAK,CAACa,GAFgC,CAGtCjB,UAHsC,CAItC,CACI0B,UAAU,CAAE,CACRR,GAAG,CAAE+C,YAAY,CAAC/C,GADV,CAERD,GAAG,CAAEgD,YAAY,CAAChD,GAFV,CADhB,CAJsC,CAUtC,IAVsC,CAA1C,CAYA,GAAIyC,cAAc,CAACpD,KAAf,EAAwB,CAACoD,cAAc,CAACd,SAA5C,CAAuD,CACnD,GAAM5B,YAAS,CAAG0C,cAAc,CAACpD,KAAf,CAAqBE,KAArB,CAA2B,GAA3B,EAAgC,CAAhC,CAAlB,CAEA;AACA;AACA;AACA,GACIQ,WAAS,GAAK,OAAd,EACAA,WAAS,GAAK,QADd,EAECA,WAAS,GAAK,MAAd,EAAwBO,EAAE,GAAK,CAA/B,EAAoCI,EAAE,GAAK,CAF5C,EAGCX,WAAS,GAAK,MAAd,EACGO,EAAE,GAAK,CADV,EAEG0C,YAAY,CAAChD,GAAb,CAAmBb,KAAK,CAACa,GAAzB,GAAiC,CAAC,CAN1C,CAOE,CACE,MAAO,KAAP,CACH,CACJ,CAED;AACA,GACIX,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiB,CAAjB,IAAwB,QAAxB,GACEe,EAAE,GAAK,CAAP,EAAYI,EAAE,GAAK,CAApB,EAA2BJ,EAAE,GAAK,CAAP,EAAYI,EAAE,GAAK,CAD/C,CADJ,CAGE,CACE,MAAO,KAAP,CACH,CACJ,CACJ,CACD,MAAO,MAAP,CACH"},"metadata":{},"sourceType":"module"}