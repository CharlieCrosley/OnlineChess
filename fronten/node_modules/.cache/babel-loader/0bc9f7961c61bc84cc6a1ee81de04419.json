{"ast":null,"code":"/**\r\n * Callback for setting the board state\r\n *\r\n * @callback setBoardState\r\n * @param {Object} board An dictionary representing the current board state\r\n */\n\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {setBoardState} setBoardState sets a new state of the board\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\nexport function movePiece(toX, toY, setBoardState, setTakenPieces, item, boardState) {\n  const square = squareIsEmpty(toX, toY, boardState);\n\n  if (square != null) {\n    if (!square.isOwner) {\n      boardState[square.piece].isAlive = false; // Track what pieces are taken so that they can be rendered under player name\n\n      const pieceNameSplit = square.piece.split(\"_\");\n      const piecePathName = pieceNameSplit[0] + \"_\" + pieceNameSplit[1];\n\n      const pieceImgPath = require(\"../assets/images/pieces/\" + piecePathName + \".png\");\n\n      let colour;\n      if (pieceNameSplit[1] === \"w\") colour = \"white\";else colour = \"black\"; // Sort the array of pieces so that matching pieces appear next to eachother\n\n      setTakenPieces(prevState => ({ ...prevState,\n        [colour]: [...prevState[colour], pieceImgPath].sort()\n      }));\n    }\n  } // Update state of the moved piece\n\n\n  setBoardState(prevState => ({ ...prevState,\n    [item.pieceName]: {\n      row: toY,\n      col: toX,\n      hasMoved: true,\n      isOwner: true,\n      isAlive: true\n    }\n  }));\n}\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\n\nexport function canMovePiece(toX, toY, item, boardState, draggedPiece) {\n  const square = squareIsEmpty(toX, toY, boardState); // if a friendly piece is in a square, don't allow this piece to be moved there\n\n  if (square && square.state.isOwner && square.state.isAlive) return false; // calculate the difference between the new square and the piece being dragged\n\n  var dx = Math.abs(toX - item.pieceState.col);\n  var dy = Math.abs(toY - item.pieceState.row);\n  const pieceName = item.pieceName.split(\"_\")[0]; // Check the row and column of the piece to see if the movement should be blocked\n  // by another piece\n\n  const straightCollision = checkStraightCollisions(toX, toY, boardState, draggedPiece); // Check the diagonal of the piece to see if the movement should be blocked\n  // by another piece\n\n  const diagCollision = checkDiagCollisions(toX, toY, boardState, draggedPiece);\n  boardState[\"queen_w\"].row = 4;\n  boardState[\"queen_w\"].col = 7;\n  /* const protectingKingAlongStraights = checkStraightCollisions(\r\n      item.pieceState.col,\r\n      item.pieceState.row,\r\n      boardState,\r\n      draggedPiece\r\n  );\r\n    const protectingKingAlongDiags = checkDiagCollisions(\r\n      item.pieceState.col,\r\n      item.pieceState.row,\r\n      boardState,\r\n      draggedPiece\r\n  ); */\n\n  const protectingKingAlongStraights = checkIfMoveUnderAttack(item.pieceState.col, item.pieceState.row, boardState);\n  const protectingKingAlongDiags = checkIfMoveUnderAttack(item.pieceState.col, item.pieceState.row, boardState);\n  let protectingKing;\n\n  if (straightCollision.piece) {\n    protectingKing = straightCollision.piece.split(\"_\")[0] === \"king\" && straightCollision.isOwner;\n  }\n\n  if (diagCollision.piece) {\n    protectingKing = protectingKing || diagCollision.piece.split(\"_\")[0] === \"king\" && diagCollision.isOwner;\n  }\n\n  switch (pieceName) {\n    case \"castle\":\n      return (dx === 0 && dy > 0 || dx > 0 && dy === 0) && !straightCollision.collision;\n\n    case \"knight\":\n      return dx === 2 && dy === 1 || dx === 1 && dy === 2;\n\n    case \"bishop\":\n      return !(dx === 0 && dy > 0) && !(dx > 0 && dy === 0) && (dx === dy || dx === dy) && !diagCollision.collision;\n\n    case \"queen\":\n      return (dx === 0 && dy > 0 || dx > 0 && dy === 0) && !straightCollision.collision || (dx === dy || dx === dy) && !diagCollision.collision;\n\n    case \"king\":\n      const moveNotInCheck = checkIfMoveUnderAttack(toX, toY, boardState);\n      return (dx === 1 || dx === 0) && (dy === 1 || dy === 0) && moveNotInCheck;\n\n    case \"pawn\":\n      console.log(protectingKing);\n      if (protectingKing) return; // Recalculate dx/dy with direction\n\n      dx = toX - item.pieceState.col;\n      dy = toY - item.pieceState.row; // Allow pawn to move 2 squares on first move\n\n      if (!item.pieceState.hasMoved) {\n        // Negative direction moves up the board (player always at bottom)\n        if (dx === 0 && (dy === -1 || dy === -2) && !straightCollision.collision) {\n          return square === null;\n        }\n      } // Allow pawn to take opponents pieces diagonal by 1 square\n\n\n      if ((dx === 1 || dx === -1) && dy === -1 && square !== null) return true; // Allow pawn to move forward by 1 square\n\n      return dx === 0 && dy === -1 && square === null;\n\n    default:\n      return false;\n  }\n}\n/**\r\n * Checks if the current square is empty\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @returns piece name and state if square is not empty, null otherwise\r\n */\n\nfunction squareIsEmpty(x, y, boardState) {\n  for (const [piece, state] of Object.entries(boardState)) {\n    if (x === state.col && y === state.row) {\n      return {\n        piece,\n        state\n      };\n    }\n  }\n\n  return null;\n}\n/**\r\n * Checks if there is a piece in the diagonal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\n\n\nfunction checkDiagCollisions(x, y, boardState, draggedPiece) {\n  // Get row and col of dragged piece\n  const row = draggedPiece.pieceState.row;\n  const col = draggedPiece.pieceState.col;\n  const dirX = Math.sign(x - col);\n  const dirY = Math.sign(y - row);\n\n  for (let i = 1; i < Math.abs(x - col) + 1; i++) {\n    for (const [piece, state] of Object.entries(boardState)) {\n      if (col + i * dirX === state.col && row + i * dirY === state.row && state.isAlive) {\n        if (i !== Math.abs(x - col)) {\n          // Stops opponents pieces from being taken when hidden behind each other\n          return {\n            piece: piece,\n            isOwner: state.isOwner,\n            isAlive: state.isAlive,\n            collision: true\n          };\n        }\n\n        return {\n          piece: piece,\n          isOwner: state.isOwner,\n          isAlive: state.isAlive,\n          collision: state.isOwner\n        };\n      }\n    }\n  }\n\n  return {\n    piece: null,\n    collision: false\n  };\n}\n/**\r\n * Checks if there is a piece in the vertical and horizontal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\n\n\nfunction checkStraightCollisions(x, y, boardState, draggedPiece) {\n  // Get row and col of dragged piece\n  const row = draggedPiece.pieceState.row;\n  const col = draggedPiece.pieceState.col; // Get change in x and y between dragged piece and square\n\n  const dx = Math.abs(x - col);\n  const dy = Math.abs(y - row);\n  if (dx > 0 && dy > 0) return true;\n  const dirX = Math.sign(x - col);\n  const dirY = Math.sign(y - row);\n\n  for (let i = 1; i < Math.max(dx, dy) + 1; i++) {\n    for (const [piece, state] of Object.entries(boardState)) {\n      if (state.isAlive) {\n        // Move is horizontal if dy = 0, otherwise vertical\n        if (dy === 0) {\n          if (col + i * dirX === state.col && row === state.row) {\n            if (i !== Math.abs(x - col)) {\n              // Stops opponents pieces from being taken when hidden behind each other\n              return {\n                piece: piece,\n                isOwner: state.isOwner,\n                isAlive: state.isAlive,\n                collision: true\n              };\n            }\n\n            return {\n              piece: piece,\n              isOwner: state.isOwner,\n              isAlive: state.isAlive,\n              collision: state.isOwner\n            };\n          }\n        } else {\n          if (row + i * dirY === state.row && col === state.col) {\n            if (i !== Math.abs(y - row)) {\n              // Stops opponents pieces from being taken when hidden behind each other\n              return {\n                piece: piece,\n                isOwner: state.isOwner,\n                isAlive: state.isAlive,\n                collision: true\n              };\n            }\n\n            return {\n              piece: piece,\n              isOwner: state.isOwner,\n              isAlive: state.isAlive,\n              collision: state.isOwner\n            };\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    piece: null,\n    collision: false\n  };\n}\n\nfunction checkIfMoveUnderAttack(x, y, boardState) {\n  let protectingKing = false;\n\n  for (const [piece, state] of Object.entries(boardState)) {\n    // King cannot be checked by its own pieces\n    if (!state.isOwner) {\n      const dx = Math.abs(x - state.col);\n      const dy = Math.abs(y - state.row); // Check if the square is under attack from an opponents piece via straight line\n\n      let straightCollisions = checkStraightCollisions(state.col, state.row, boardState, {\n        pieceState: {\n          col: x,\n          row: y\n        }\n      });\n\n      if (straightCollisions.piece && !straightCollisions.collision) {\n        const pieceName = straightCollisions.piece.split(\"_\")[0]; // If the piece can take pieces horizontally or vertically or king is in range,\n        // then the move is not valid\n\n        if (pieceName === \"queen\" || pieceName === \"castle\" || pieceName === \"king\" && (dx === 1 || dy === 1)) {\n          return false;\n        }\n      } // Check if the square is under attack from an opponents piece via diagonal line\n\n\n      const diagCollisions = checkDiagCollisions(state.col, state.row, boardState, {\n        pieceState: {\n          col: x,\n          row: y\n        }\n      });\n\n      if (diagCollisions.piece && !diagCollisions.collision) {\n        const pieceName = diagCollisions.piece.split(\"_\")[0]; // If the piece can move diagonally or the pawn is in range of square,\n        // then the move is not valid\n\n        if (pieceName === \"queen\" || pieceName === \"bishop\" || pieceName === \"king\" && dx === 1 && dy === 1 || pieceName === \"pawn\" && dx === 1 && y - state.row === 2) return false;\n      } // Check if square is under attack by a knight\n\n\n      if (piece.split(\"_\")[0] === \"knight\" && (dx === 2 && dy === 1 || dx === 1 && dy === 2)) {\n        return false;\n      }\n    }\n    /* else {\r\n      const pieceName = piece.split(\"_\")[0];\r\n      if (pieceName === \"king\") {\r\n          // Check if the square is under attack from an opponents piece via straight line\r\n          let straightCollisions = checkStraightCollisions(\r\n              state.col,\r\n              state.row,\r\n              boardState,\r\n              {\r\n                  pieceState: { col: x, row: y },\r\n              }\r\n          );\r\n          // Check if the square is under attack from an opponents piece via diagonal line\r\n          const diagCollisions = checkDiagCollisions(\r\n              state.col,\r\n              state.row,\r\n              boardState,\r\n              {\r\n                  pieceState: { col: x, row: y },\r\n              }\r\n          );\r\n          if ()\r\n      }\r\n    } */\n\n  }\n\n  return true;\n}\n\nfunction checkIfPieceIsProtectingKing(x, y, boardState) {\n  const king = boardState[\"king_w\"].isOwner ? boardState[\"king_w\"] : boardState[\"king_b\"];\n}","map":{"version":3,"names":["movePiece","toX","toY","setBoardState","setTakenPieces","item","boardState","square","squareIsEmpty","isOwner","piece","isAlive","pieceNameSplit","split","piecePathName","pieceImgPath","require","colour","prevState","sort","pieceName","row","col","hasMoved","canMovePiece","draggedPiece","state","dx","Math","abs","pieceState","dy","straightCollision","checkStraightCollisions","diagCollision","checkDiagCollisions","protectingKingAlongStraights","checkIfMoveUnderAttack","protectingKingAlongDiags","protectingKing","collision","moveNotInCheck","console","log","x","y","Object","entries","dirX","sign","dirY","i","max","straightCollisions","diagCollisions","checkIfPieceIsProtectingKing","king"],"sources":["C:/Users/charl/Documents/Code/Web Dev/Chess-Online/chessproject/frontend/src/components/Game.js"],"sourcesContent":["/**\r\n * Callback for setting the board state\r\n *\r\n * @callback setBoardState\r\n * @param {Object} board An dictionary representing the current board state\r\n */\r\n\r\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {setBoardState} setBoardState sets a new state of the board\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\r\nexport function movePiece(\r\n    toX,\r\n    toY,\r\n    setBoardState,\r\n    setTakenPieces,\r\n    item,\r\n    boardState\r\n) {\r\n    const square = squareIsEmpty(toX, toY, boardState);\r\n    if (square != null) {\r\n        if (!square.isOwner) {\r\n            boardState[square.piece].isAlive = false;\r\n\r\n            // Track what pieces are taken so that they can be rendered under player name\r\n            const pieceNameSplit = square.piece.split(\"_\");\r\n            const piecePathName = pieceNameSplit[0] + \"_\" + pieceNameSplit[1];\r\n            const pieceImgPath = require(\"../assets/images/pieces/\" +\r\n                piecePathName +\r\n                \".png\");\r\n\r\n            let colour;\r\n            if (pieceNameSplit[1] === \"w\") colour = \"white\";\r\n            else colour = \"black\";\r\n            // Sort the array of pieces so that matching pieces appear next to eachother\r\n            setTakenPieces((prevState) => ({\r\n                ...prevState,\r\n                [colour]: [...prevState[colour], pieceImgPath].sort(),\r\n            }));\r\n        }\r\n    }\r\n\r\n    // Update state of the moved piece\r\n    setBoardState((prevState) => ({\r\n        ...prevState,\r\n        [item.pieceName]: {\r\n            row: toY,\r\n            col: toX,\r\n            hasMoved: true,\r\n            isOwner: true,\r\n            isAlive: true,\r\n        },\r\n    }));\r\n}\r\n\r\n/**\r\n * Checks if the dragged piece can be placed at a square\r\n * @param {number} toX x coordinate of the square currently being checked\r\n * @param {number} toY y coordinate of the square currently being checked\r\n * @param {Object} item piece currently being dragged\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if the dragged piece can be moved to the square at (x,y), false otherwise\r\n */\r\nexport function canMovePiece(toX, toY, item, boardState, draggedPiece) {\r\n    const square = squareIsEmpty(toX, toY, boardState);\r\n\r\n    // if a friendly piece is in a square, don't allow this piece to be moved there\r\n    if (square && square.state.isOwner && square.state.isAlive) return false;\r\n\r\n    // calculate the difference between the new square and the piece being dragged\r\n    var dx = Math.abs(toX - item.pieceState.col);\r\n    var dy = Math.abs(toY - item.pieceState.row);\r\n\r\n    const pieceName = item.pieceName.split(\"_\")[0];\r\n\r\n    // Check the row and column of the piece to see if the movement should be blocked\r\n    // by another piece\r\n    const straightCollision = checkStraightCollisions(\r\n        toX,\r\n        toY,\r\n        boardState,\r\n        draggedPiece\r\n    );\r\n    // Check the diagonal of the piece to see if the movement should be blocked\r\n    // by another piece\r\n    const diagCollision = checkDiagCollisions(\r\n        toX,\r\n        toY,\r\n        boardState,\r\n        draggedPiece\r\n    );\r\n\r\n    boardState[\"queen_w\"].row = 4;\r\n    boardState[\"queen_w\"].col = 7;\r\n\r\n    /* const protectingKingAlongStraights = checkStraightCollisions(\r\n        item.pieceState.col,\r\n        item.pieceState.row,\r\n        boardState,\r\n        draggedPiece\r\n    );\r\n\r\n    const protectingKingAlongDiags = checkDiagCollisions(\r\n        item.pieceState.col,\r\n        item.pieceState.row,\r\n        boardState,\r\n        draggedPiece\r\n    ); */\r\n\r\n    const protectingKingAlongStraights = checkIfMoveUnderAttack(\r\n        item.pieceState.col,\r\n        item.pieceState.row,\r\n        boardState\r\n    );\r\n\r\n    const protectingKingAlongDiags = checkIfMoveUnderAttack(\r\n        item.pieceState.col,\r\n        item.pieceState.row,\r\n        boardState\r\n    );\r\n\r\n    let protectingKing;\r\n    if (straightCollision.piece) {\r\n        protectingKing =\r\n            straightCollision.piece.split(\"_\")[0] === \"king\" &&\r\n            straightCollision.isOwner;\r\n    }\r\n    if (diagCollision.piece) {\r\n        protectingKing =\r\n            protectingKing ||\r\n            (diagCollision.piece.split(\"_\")[0] === \"king\" &&\r\n                diagCollision.isOwner);\r\n    }\r\n\r\n    switch (pieceName) {\r\n        case \"castle\":\r\n            return (\r\n                ((dx === 0 && dy > 0) || (dx > 0 && dy === 0)) &&\r\n                !straightCollision.collision\r\n            );\r\n\r\n        case \"knight\":\r\n            return (dx === 2 && dy === 1) || (dx === 1 && dy === 2);\r\n\r\n        case \"bishop\":\r\n            return (\r\n                !(dx === 0 && dy > 0) &&\r\n                !(dx > 0 && dy === 0) &&\r\n                (dx === dy || dx === dy) &&\r\n                !diagCollision.collision\r\n            );\r\n\r\n        case \"queen\":\r\n            return (\r\n                (((dx === 0 && dy > 0) || (dx > 0 && dy === 0)) &&\r\n                    !straightCollision.collision) ||\r\n                ((dx === dy || dx === dy) && !diagCollision.collision)\r\n            );\r\n\r\n        case \"king\":\r\n            const moveNotInCheck = checkIfMoveUnderAttack(toX, toY, boardState);\r\n            return (\r\n                (dx === 1 || dx === 0) &&\r\n                (dy === 1 || dy === 0) &&\r\n                moveNotInCheck\r\n            );\r\n\r\n        case \"pawn\":\r\n            console.log(protectingKing);\r\n            if (protectingKing) return;\r\n            // Recalculate dx/dy with direction\r\n            dx = toX - item.pieceState.col;\r\n            dy = toY - item.pieceState.row;\r\n            // Allow pawn to move 2 squares on first move\r\n            if (!item.pieceState.hasMoved) {\r\n                // Negative direction moves up the board (player always at bottom)\r\n                if (\r\n                    dx === 0 &&\r\n                    (dy === -1 || dy === -2) &&\r\n                    !straightCollision.collision\r\n                ) {\r\n                    return square === null;\r\n                }\r\n            }\r\n            // Allow pawn to take opponents pieces diagonal by 1 square\r\n            if ((dx === 1 || dx === -1) && dy === -1 && square !== null)\r\n                return true;\r\n\r\n            // Allow pawn to move forward by 1 square\r\n            return dx === 0 && dy === -1 && square === null;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if the current square is empty\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @returns piece name and state if square is not empty, null otherwise\r\n */\r\nfunction squareIsEmpty(x, y, boardState) {\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        if (x === state.col && y === state.row) {\r\n            return { piece, state };\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Checks if there is a piece in the diagonal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\r\nfunction checkDiagCollisions(x, y, boardState, draggedPiece) {\r\n    // Get row and col of dragged piece\r\n    const row = draggedPiece.pieceState.row;\r\n    const col = draggedPiece.pieceState.col;\r\n\r\n    const dirX = Math.sign(x - col);\r\n    const dirY = Math.sign(y - row);\r\n    for (let i = 1; i < Math.abs(x - col) + 1; i++) {\r\n        for (const [piece, state] of Object.entries(boardState)) {\r\n            if (\r\n                col + i * dirX === state.col &&\r\n                row + i * dirY === state.row &&\r\n                state.isAlive\r\n            ) {\r\n                if (i !== Math.abs(x - col)) {\r\n                    // Stops opponents pieces from being taken when hidden behind each other\r\n                    return {\r\n                        piece: piece,\r\n                        isOwner: state.isOwner,\r\n                        isAlive: state.isAlive,\r\n                        collision: true,\r\n                    };\r\n                }\r\n                return {\r\n                    piece: piece,\r\n                    isOwner: state.isOwner,\r\n                    isAlive: state.isAlive,\r\n                    collision: state.isOwner,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return { piece: null, collision: false };\r\n}\r\n\r\n/**\r\n * Checks if there is a piece in the vertical and horizontal of the selected piece and the current square\r\n * @param {number} x x coordinate of the square currently being checked\r\n * @param {number} y y coordinate of the square currently being checked\r\n * @param {Object} boardState current state of the board\r\n * @param {Object} monitor contains data about the currently dragged piece\r\n * @returns true if an opponents piece is inbetween the square and the currently dragged piece, false otherwise\r\n */\r\nfunction checkStraightCollisions(x, y, boardState, draggedPiece) {\r\n    // Get row and col of dragged piece\r\n    const row = draggedPiece.pieceState.row;\r\n    const col = draggedPiece.pieceState.col;\r\n    // Get change in x and y between dragged piece and square\r\n    const dx = Math.abs(x - col);\r\n    const dy = Math.abs(y - row);\r\n\r\n    if (dx > 0 && dy > 0) return true;\r\n    const dirX = Math.sign(x - col);\r\n    const dirY = Math.sign(y - row);\r\n\r\n    for (let i = 1; i < Math.max(dx, dy) + 1; i++) {\r\n        for (const [piece, state] of Object.entries(boardState)) {\r\n            if (state.isAlive) {\r\n                // Move is horizontal if dy = 0, otherwise vertical\r\n                if (dy === 0) {\r\n                    if (col + i * dirX === state.col && row === state.row) {\r\n                        if (i !== Math.abs(x - col)) {\r\n                            // Stops opponents pieces from being taken when hidden behind each other\r\n                            return {\r\n                                piece: piece,\r\n                                isOwner: state.isOwner,\r\n                                isAlive: state.isAlive,\r\n                                collision: true,\r\n                            };\r\n                        }\r\n                        return {\r\n                            piece: piece,\r\n                            isOwner: state.isOwner,\r\n                            isAlive: state.isAlive,\r\n                            collision: state.isOwner,\r\n                        };\r\n                    }\r\n                } else {\r\n                    if (row + i * dirY === state.row && col === state.col) {\r\n                        if (i !== Math.abs(y - row)) {\r\n                            // Stops opponents pieces from being taken when hidden behind each other\r\n                            return {\r\n                                piece: piece,\r\n                                isOwner: state.isOwner,\r\n                                isAlive: state.isAlive,\r\n                                collision: true,\r\n                            };\r\n                        }\r\n                        return {\r\n                            piece: piece,\r\n                            isOwner: state.isOwner,\r\n                            isAlive: state.isAlive,\r\n                            collision: state.isOwner,\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return { piece: null, collision: false };\r\n}\r\n\r\nfunction checkIfMoveUnderAttack(x, y, boardState) {\r\n    let protectingKing = false;\r\n    for (const [piece, state] of Object.entries(boardState)) {\r\n        // King cannot be checked by its own pieces\r\n        if (!state.isOwner) {\r\n            const dx = Math.abs(x - state.col);\r\n            const dy = Math.abs(y - state.row);\r\n\r\n            // Check if the square is under attack from an opponents piece via straight line\r\n            let straightCollisions = checkStraightCollisions(\r\n                state.col,\r\n                state.row,\r\n                boardState,\r\n                {\r\n                    pieceState: { col: x, row: y },\r\n                }\r\n            );\r\n\r\n            if (straightCollisions.piece && !straightCollisions.collision) {\r\n                const pieceName = straightCollisions.piece.split(\"_\")[0];\r\n                // If the piece can take pieces horizontally or vertically or king is in range,\r\n                // then the move is not valid\r\n                if (\r\n                    pieceName === \"queen\" ||\r\n                    pieceName === \"castle\" ||\r\n                    (pieceName === \"king\" && (dx === 1 || dy === 1))\r\n                ) {\r\n                    return false;\r\n                }\r\n            }\r\n            // Check if the square is under attack from an opponents piece via diagonal line\r\n            const diagCollisions = checkDiagCollisions(\r\n                state.col,\r\n                state.row,\r\n                boardState,\r\n                {\r\n                    pieceState: { col: x, row: y },\r\n                }\r\n            );\r\n            if (diagCollisions.piece && !diagCollisions.collision) {\r\n                const pieceName = diagCollisions.piece.split(\"_\")[0];\r\n\r\n                // If the piece can move diagonally or the pawn is in range of square,\r\n                // then the move is not valid\r\n                if (\r\n                    pieceName === \"queen\" ||\r\n                    pieceName === \"bishop\" ||\r\n                    (pieceName === \"king\" && dx === 1 && dy === 1) ||\r\n                    (pieceName === \"pawn\" && dx === 1 && y - state.row === 2)\r\n                )\r\n                    return false;\r\n            }\r\n\r\n            // Check if square is under attack by a knight\r\n            if (\r\n                piece.split(\"_\")[0] === \"knight\" &&\r\n                ((dx === 2 && dy === 1) || (dx === 1 && dy === 2))\r\n            ) {\r\n                return false;\r\n            }\r\n        } /* else {\r\n            const pieceName = piece.split(\"_\")[0];\r\n            if (pieceName === \"king\") {\r\n                // Check if the square is under attack from an opponents piece via straight line\r\n                let straightCollisions = checkStraightCollisions(\r\n                    state.col,\r\n                    state.row,\r\n                    boardState,\r\n                    {\r\n                        pieceState: { col: x, row: y },\r\n                    }\r\n                );\r\n                // Check if the square is under attack from an opponents piece via diagonal line\r\n                const diagCollisions = checkDiagCollisions(\r\n                    state.col,\r\n                    state.row,\r\n                    boardState,\r\n                    {\r\n                        pieceState: { col: x, row: y },\r\n                    }\r\n                );\r\n                if ()\r\n            }\r\n        } */\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction checkIfPieceIsProtectingKing(x, y, boardState) {\r\n    const king = boardState[\"king_w\"].isOwner\r\n        ? boardState[\"king_w\"]\r\n        : boardState[\"king_b\"];\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}